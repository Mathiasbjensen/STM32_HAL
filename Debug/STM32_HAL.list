
STM32_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004510  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004620  08004620  00014620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046cc  080046cc  00020150  2**0
                  CONTENTS
  4 .ARM          00000000  080046cc  080046cc  00020150  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046cc  080046cc  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  080046d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014d4  20000150  08004824  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001624  08004824  00021624  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001104d  00000000  00000000  00020179  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000281d  00000000  00000000  000311c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001070  00000000  00000000  000339e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f38  00000000  00000000  00034a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000187a8  00000000  00000000  00035990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ca19  00000000  00000000  0004e138  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009172d  00000000  00000000  0005ab51  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ec27e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000482c  00000000  00000000  000ec2fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  000f0b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000f0b4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000150 	.word	0x20000150
 800012c:	00000000 	.word	0x00000000
 8000130:	08004608 	.word	0x08004608

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000154 	.word	0x20000154
 800014c:	08004608 	.word	0x08004608

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000016c 	.word	0x2000016c
 800018c:	200001c0 	.word	0x200001c0

08000190 <SARA_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void SARA_Init() {
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, SARAate0, strlen(SARAate0), 50);
 8000194:	4833      	ldr	r0, [pc, #204]	; (8000264 <SARA_Init+0xd4>)
 8000196:	f7ff ffdb 	bl	8000150 <strlen>
 800019a:	4603      	mov	r3, r0
 800019c:	b29a      	uxth	r2, r3
 800019e:	2332      	movs	r3, #50	; 0x32
 80001a0:	4930      	ldr	r1, [pc, #192]	; (8000264 <SARA_Init+0xd4>)
 80001a2:	4831      	ldr	r0, [pc, #196]	; (8000268 <SARA_Init+0xd8>)
 80001a4:	f002 f97b 	bl	800249e <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 80001a8:	2364      	movs	r3, #100	; 0x64
 80001aa:	2280      	movs	r2, #128	; 0x80
 80001ac:	492f      	ldr	r1, [pc, #188]	; (800026c <SARA_Init+0xdc>)
 80001ae:	482e      	ldr	r0, [pc, #184]	; (8000268 <SARA_Init+0xd8>)
 80001b0:	f002 fa07 	bl	80025c2 <HAL_UART_Receive>
	osDelay(500);
 80001b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001b8:	f002 fbe4 	bl	8002984 <osDelay>
	HAL_UART_Transmit(&huart1, SARAumnoprof, strlen(SARAumnoprof), 50);
 80001bc:	482c      	ldr	r0, [pc, #176]	; (8000270 <SARA_Init+0xe0>)
 80001be:	f7ff ffc7 	bl	8000150 <strlen>
 80001c2:	4603      	mov	r3, r0
 80001c4:	b29a      	uxth	r2, r3
 80001c6:	2332      	movs	r3, #50	; 0x32
 80001c8:	4929      	ldr	r1, [pc, #164]	; (8000270 <SARA_Init+0xe0>)
 80001ca:	4827      	ldr	r0, [pc, #156]	; (8000268 <SARA_Init+0xd8>)
 80001cc:	f002 f967 	bl	800249e <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 80001d0:	2364      	movs	r3, #100	; 0x64
 80001d2:	2280      	movs	r2, #128	; 0x80
 80001d4:	4925      	ldr	r1, [pc, #148]	; (800026c <SARA_Init+0xdc>)
 80001d6:	4824      	ldr	r0, [pc, #144]	; (8000268 <SARA_Init+0xd8>)
 80001d8:	f002 f9f3 	bl	80025c2 <HAL_UART_Receive>
	osDelay(500);
 80001dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001e0:	f002 fbd0 	bl	8002984 <osDelay>
	//HAL_UART_Transmit(&huart1, cereg, strlen(cereg), 10);
	//osDelay(250);
	HAL_UART_Transmit(&huart1, SARAcops, strlen(SARAcops), 50);
 80001e4:	4823      	ldr	r0, [pc, #140]	; (8000274 <SARA_Init+0xe4>)
 80001e6:	f7ff ffb3 	bl	8000150 <strlen>
 80001ea:	4603      	mov	r3, r0
 80001ec:	b29a      	uxth	r2, r3
 80001ee:	2332      	movs	r3, #50	; 0x32
 80001f0:	4920      	ldr	r1, [pc, #128]	; (8000274 <SARA_Init+0xe4>)
 80001f2:	481d      	ldr	r0, [pc, #116]	; (8000268 <SARA_Init+0xd8>)
 80001f4:	f002 f953 	bl	800249e <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 80001f8:	2364      	movs	r3, #100	; 0x64
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	491b      	ldr	r1, [pc, #108]	; (800026c <SARA_Init+0xdc>)
 80001fe:	481a      	ldr	r0, [pc, #104]	; (8000268 <SARA_Init+0xd8>)
 8000200:	f002 f9df 	bl	80025c2 <HAL_UART_Receive>
	osDelay(500);
 8000204:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000208:	f002 fbbc 	bl	8002984 <osDelay>
	HAL_UART_Transmit(&huart1, SARAconnLTE, strlen(SARAconnLTE), 50);
 800020c:	481a      	ldr	r0, [pc, #104]	; (8000278 <SARA_Init+0xe8>)
 800020e:	f7ff ff9f 	bl	8000150 <strlen>
 8000212:	4603      	mov	r3, r0
 8000214:	b29a      	uxth	r2, r3
 8000216:	2332      	movs	r3, #50	; 0x32
 8000218:	4917      	ldr	r1, [pc, #92]	; (8000278 <SARA_Init+0xe8>)
 800021a:	4813      	ldr	r0, [pc, #76]	; (8000268 <SARA_Init+0xd8>)
 800021c:	f002 f93f 	bl	800249e <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 8000220:	2364      	movs	r3, #100	; 0x64
 8000222:	2280      	movs	r2, #128	; 0x80
 8000224:	4911      	ldr	r1, [pc, #68]	; (800026c <SARA_Init+0xdc>)
 8000226:	4810      	ldr	r0, [pc, #64]	; (8000268 <SARA_Init+0xd8>)
 8000228:	f002 f9cb 	bl	80025c2 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart1, SARAate0, strlen(SARAate0), 50);
 800022c:	480d      	ldr	r0, [pc, #52]	; (8000264 <SARA_Init+0xd4>)
 800022e:	f7ff ff8f 	bl	8000150 <strlen>
 8000232:	4603      	mov	r3, r0
 8000234:	b29a      	uxth	r2, r3
 8000236:	2332      	movs	r3, #50	; 0x32
 8000238:	490a      	ldr	r1, [pc, #40]	; (8000264 <SARA_Init+0xd4>)
 800023a:	480b      	ldr	r0, [pc, #44]	; (8000268 <SARA_Init+0xd8>)
 800023c:	f002 f92f 	bl	800249e <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 8000240:	2364      	movs	r3, #100	; 0x64
 8000242:	2280      	movs	r2, #128	; 0x80
 8000244:	4909      	ldr	r1, [pc, #36]	; (800026c <SARA_Init+0xdc>)
 8000246:	4808      	ldr	r0, [pc, #32]	; (8000268 <SARA_Init+0xd8>)
 8000248:	f002 f9bb 	bl	80025c2 <HAL_UART_Receive>

	osDelay(500);
 800024c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000250:	f002 fb98 	bl	8002984 <osDelay>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 8000254:	2364      	movs	r3, #100	; 0x64
 8000256:	2280      	movs	r2, #128	; 0x80
 8000258:	4904      	ldr	r1, [pc, #16]	; (800026c <SARA_Init+0xdc>)
 800025a:	4803      	ldr	r0, [pc, #12]	; (8000268 <SARA_Init+0xd8>)
 800025c:	f002 f9b1 	bl	80025c2 <HAL_UART_Receive>

}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000000 	.word	0x20000000
 8000268:	200012b8 	.word	0x200012b8
 800026c:	200011e8 	.word	0x200011e8
 8000270:	20000008 	.word	0x20000008
 8000274:	2000001c 	.word	0x2000001c
 8000278:	2000002c 	.word	0x2000002c

0800027c <nemeus_Power_Cycle>:

void nemeus_Power_Cycle() {
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000286:	4832      	ldr	r0, [pc, #200]	; (8000350 <nemeus_Power_Cycle+0xd4>)
 8000288:	f001 f9f4 	bl	8001674 <HAL_GPIO_WritePin>
    osDelay(1500);
 800028c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000290:	f002 fb78 	bl	8002984 <osDelay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000294:	2201      	movs	r2, #1
 8000296:	f44f 7180 	mov.w	r1, #256	; 0x100
 800029a:	482d      	ldr	r0, [pc, #180]	; (8000350 <nemeus_Power_Cycle+0xd4>)
 800029c:	f001 f9ea 	bl	8001674 <HAL_GPIO_WritePin>
	//osDelay(150);
    HAL_UART_Receive(&huart3, trash, 128, 150);
 80002a0:	2396      	movs	r3, #150	; 0x96
 80002a2:	2280      	movs	r2, #128	; 0x80
 80002a4:	492b      	ldr	r1, [pc, #172]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 80002a6:	482c      	ldr	r0, [pc, #176]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 80002a8:	f002 f98b 	bl	80025c2 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart3, syncLora, strlen(syncLora), 10);
 80002ac:	482b      	ldr	r0, [pc, #172]	; (800035c <nemeus_Power_Cycle+0xe0>)
 80002ae:	f7ff ff4f 	bl	8000150 <strlen>
 80002b2:	4603      	mov	r3, r0
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	230a      	movs	r3, #10
 80002b8:	4928      	ldr	r1, [pc, #160]	; (800035c <nemeus_Power_Cycle+0xe0>)
 80002ba:	4827      	ldr	r0, [pc, #156]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 80002bc:	f002 f8ef 	bl	800249e <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, trash, 128, 100);
 80002c0:	2364      	movs	r3, #100	; 0x64
 80002c2:	2280      	movs	r2, #128	; 0x80
 80002c4:	4923      	ldr	r1, [pc, #140]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 80002c6:	4824      	ldr	r0, [pc, #144]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 80002c8:	f002 f97b 	bl	80025c2 <HAL_UART_Receive>
	osDelay(500);
 80002cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002d0:	f002 fb58 	bl	8002984 <osDelay>

	HAL_UART_Transmit(&huart3, beginLora, strlen(beginLora), 10);
 80002d4:	4822      	ldr	r0, [pc, #136]	; (8000360 <nemeus_Power_Cycle+0xe4>)
 80002d6:	f7ff ff3b 	bl	8000150 <strlen>
 80002da:	4603      	mov	r3, r0
 80002dc:	b29a      	uxth	r2, r3
 80002de:	230a      	movs	r3, #10
 80002e0:	491f      	ldr	r1, [pc, #124]	; (8000360 <nemeus_Power_Cycle+0xe4>)
 80002e2:	481d      	ldr	r0, [pc, #116]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 80002e4:	f002 f8db 	bl	800249e <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, trash, 128, 100);
 80002e8:	2364      	movs	r3, #100	; 0x64
 80002ea:	2280      	movs	r2, #128	; 0x80
 80002ec:	4919      	ldr	r1, [pc, #100]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 80002ee:	481a      	ldr	r0, [pc, #104]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 80002f0:	f002 f967 	bl	80025c2 <HAL_UART_Receive>
	//osDelay(1500);
	memset(trash, '\0', 128);
 80002f4:	2280      	movs	r2, #128	; 0x80
 80002f6:	2100      	movs	r1, #0
 80002f8:	4816      	ldr	r0, [pc, #88]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 80002fa:	f003 fcc8 	bl	8003c8e <memset>
	//HAL_UART_Receive(&huart3, trash, 128, 4000);
	HAL_UART_Receive(&huart3, trash, 10, 40000);
 80002fe:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000302:	220a      	movs	r2, #10
 8000304:	4913      	ldr	r1, [pc, #76]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 8000306:	4814      	ldr	r0, [pc, #80]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 8000308:	f002 f95b 	bl	80025c2 <HAL_UART_Receive>
	HAL_UART_Receive(&huart3, trash, 128, 100);
 800030c:	2364      	movs	r3, #100	; 0x64
 800030e:	2280      	movs	r2, #128	; 0x80
 8000310:	4910      	ldr	r1, [pc, #64]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 8000312:	4811      	ldr	r0, [pc, #68]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 8000314:	f002 f955 	bl	80025c2 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart3, beginSigfox, strlen(beginSigfox), 10);
 8000318:	4812      	ldr	r0, [pc, #72]	; (8000364 <nemeus_Power_Cycle+0xe8>)
 800031a:	f7ff ff19 	bl	8000150 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	b29a      	uxth	r2, r3
 8000322:	230a      	movs	r3, #10
 8000324:	490f      	ldr	r1, [pc, #60]	; (8000364 <nemeus_Power_Cycle+0xe8>)
 8000326:	480c      	ldr	r0, [pc, #48]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 8000328:	f002 f8b9 	bl	800249e <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, trash, 128, 100);
 800032c:	2364      	movs	r3, #100	; 0x64
 800032e:	2280      	movs	r2, #128	; 0x80
 8000330:	4908      	ldr	r1, [pc, #32]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 8000332:	4809      	ldr	r0, [pc, #36]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 8000334:	f002 f945 	bl	80025c2 <HAL_UART_Receive>
	osDelay(50);
 8000338:	2032      	movs	r0, #50	; 0x32
 800033a:	f002 fb23 	bl	8002984 <osDelay>
	HAL_UART_Receive(&huart3, trash, 128, 100);
 800033e:	2364      	movs	r3, #100	; 0x64
 8000340:	2280      	movs	r2, #128	; 0x80
 8000342:	4904      	ldr	r1, [pc, #16]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 8000344:	4804      	ldr	r0, [pc, #16]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 8000346:	f002 f93c 	bl	80025c2 <HAL_UART_Receive>


}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40010800 	.word	0x40010800
 8000354:	200011e8 	.word	0x200011e8
 8000358:	200011a0 	.word	0x200011a0
 800035c:	20000088 	.word	0x20000088
 8000360:	20000094 	.word	0x20000094
 8000364:	200000b8 	.word	0x200000b8

08000368 <SARA_ChangeTech>:
	HAL_UART_Transmit(&huart1, cmd, strlen(cmd), 10);
	HAL_UART_Receive(&huart1, SARAresult, 128, 100);
}


void SARA_ChangeTech(uint8_t tech){ //tech should be 9 for NB
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
	uint8_t lpwanTechnology[12];
	if(tech == '7'){
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	2b37      	cmp	r3, #55	; 0x37
 8000376:	d106      	bne.n	8000386 <SARA_ChangeTech+0x1e>
		strcpy(lpwanTechnology,SARAconnLTE);
 8000378:	f107 030c 	add.w	r3, r7, #12
 800037c:	494f      	ldr	r1, [pc, #316]	; (80004bc <SARA_ChangeTech+0x154>)
 800037e:	4618      	mov	r0, r3
 8000380:	f003 fd15 	bl	8003dae <strcpy>
 8000384:	e008      	b.n	8000398 <SARA_ChangeTech+0x30>
	}
	else if (tech == '9') {
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	2b39      	cmp	r3, #57	; 0x39
 800038a:	d105      	bne.n	8000398 <SARA_ChangeTech+0x30>
		strcpy(lpwanTechnology,SARAconnNB);
 800038c:	f107 030c 	add.w	r3, r7, #12
 8000390:	494b      	ldr	r1, [pc, #300]	; (80004c0 <SARA_ChangeTech+0x158>)
 8000392:	4618      	mov	r0, r3
 8000394:	f003 fd0b 	bl	8003dae <strcpy>
	}
	HAL_UART_Transmit(&huart1, lpwanTechnology, strlen(lpwanTechnology), 50);
 8000398:	f107 030c 	add.w	r3, r7, #12
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff fed7 	bl	8000150 <strlen>
 80003a2:	4603      	mov	r3, r0
 80003a4:	b29a      	uxth	r2, r3
 80003a6:	f107 010c 	add.w	r1, r7, #12
 80003aa:	2332      	movs	r3, #50	; 0x32
 80003ac:	4845      	ldr	r0, [pc, #276]	; (80004c4 <SARA_ChangeTech+0x15c>)
 80003ae:	f002 f876 	bl	800249e <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 80003b2:	2364      	movs	r3, #100	; 0x64
 80003b4:	2280      	movs	r2, #128	; 0x80
 80003b6:	4944      	ldr	r1, [pc, #272]	; (80004c8 <SARA_ChangeTech+0x160>)
 80003b8:	4842      	ldr	r0, [pc, #264]	; (80004c4 <SARA_ChangeTech+0x15c>)
 80003ba:	f002 f902 	bl	80025c2 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart1, SARAcfun15, strlen(SARAcfun15), 50);
 80003be:	4843      	ldr	r0, [pc, #268]	; (80004cc <SARA_ChangeTech+0x164>)
 80003c0:	f7ff fec6 	bl	8000150 <strlen>
 80003c4:	4603      	mov	r3, r0
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	2332      	movs	r3, #50	; 0x32
 80003ca:	4940      	ldr	r1, [pc, #256]	; (80004cc <SARA_ChangeTech+0x164>)
 80003cc:	483d      	ldr	r0, [pc, #244]	; (80004c4 <SARA_ChangeTech+0x15c>)
 80003ce:	f002 f866 	bl	800249e <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 80003d2:	2364      	movs	r3, #100	; 0x64
 80003d4:	2280      	movs	r2, #128	; 0x80
 80003d6:	493c      	ldr	r1, [pc, #240]	; (80004c8 <SARA_ChangeTech+0x160>)
 80003d8:	483a      	ldr	r0, [pc, #232]	; (80004c4 <SARA_ChangeTech+0x15c>)
 80003da:	f002 f8f2 	bl	80025c2 <HAL_UART_Receive>

	// Wait for device to restart and
	osDelay(7500);
 80003de:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80003e2:	f002 facf 	bl	8002984 <osDelay>

	HAL_UART_Transmit(&huart1, SARAate0, strlen(SARAate0), 50);
 80003e6:	483a      	ldr	r0, [pc, #232]	; (80004d0 <SARA_ChangeTech+0x168>)
 80003e8:	f7ff feb2 	bl	8000150 <strlen>
 80003ec:	4603      	mov	r3, r0
 80003ee:	b29a      	uxth	r2, r3
 80003f0:	2332      	movs	r3, #50	; 0x32
 80003f2:	4937      	ldr	r1, [pc, #220]	; (80004d0 <SARA_ChangeTech+0x168>)
 80003f4:	4833      	ldr	r0, [pc, #204]	; (80004c4 <SARA_ChangeTech+0x15c>)
 80003f6:	f002 f852 	bl	800249e <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 250);
 80003fa:	23fa      	movs	r3, #250	; 0xfa
 80003fc:	2280      	movs	r2, #128	; 0x80
 80003fe:	4932      	ldr	r1, [pc, #200]	; (80004c8 <SARA_ChangeTech+0x160>)
 8000400:	4830      	ldr	r0, [pc, #192]	; (80004c4 <SARA_ChangeTech+0x15c>)
 8000402:	f002 f8de 	bl	80025c2 <HAL_UART_Receive>

	if (tech == '9'){
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	2b39      	cmp	r3, #57	; 0x39
 800040a:	d103      	bne.n	8000414 <SARA_ChangeTech+0xac>
		osDelay(2000);
 800040c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000410:	f002 fab8 	bl	8002984 <osDelay>
	}

	HAL_UART_Transmit(&huart1, SARAate0, strlen(SARAate0), 50);
 8000414:	482e      	ldr	r0, [pc, #184]	; (80004d0 <SARA_ChangeTech+0x168>)
 8000416:	f7ff fe9b 	bl	8000150 <strlen>
 800041a:	4603      	mov	r3, r0
 800041c:	b29a      	uxth	r2, r3
 800041e:	2332      	movs	r3, #50	; 0x32
 8000420:	492b      	ldr	r1, [pc, #172]	; (80004d0 <SARA_ChangeTech+0x168>)
 8000422:	4828      	ldr	r0, [pc, #160]	; (80004c4 <SARA_ChangeTech+0x15c>)
 8000424:	f002 f83b 	bl	800249e <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 250);
 8000428:	23fa      	movs	r3, #250	; 0xfa
 800042a:	2280      	movs	r2, #128	; 0x80
 800042c:	4926      	ldr	r1, [pc, #152]	; (80004c8 <SARA_ChangeTech+0x160>)
 800042e:	4825      	ldr	r0, [pc, #148]	; (80004c4 <SARA_ChangeTech+0x15c>)
 8000430:	f002 f8c7 	bl	80025c2 <HAL_UART_Receive>

	int i = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	61fb      	str	r3, [r7, #28]
	int msgLength;
	do {
		SARA_CheckTech();
 8000438:	f000 f852 	bl	80004e0 <SARA_CheckTech>
		msgLength = strlen(SARAtech);
 800043c:	4825      	ldr	r0, [pc, #148]	; (80004d4 <SARA_ChangeTech+0x16c>)
 800043e:	f7ff fe87 	bl	8000150 <strlen>
 8000442:	4603      	mov	r3, r0
 8000444:	61bb      	str	r3, [r7, #24]
		getResultParameterURAT(3, SARAtech, msgLength);
 8000446:	69ba      	ldr	r2, [r7, #24]
 8000448:	4922      	ldr	r1, [pc, #136]	; (80004d4 <SARA_ChangeTech+0x16c>)
 800044a:	2003      	movs	r0, #3
 800044c:	f000 f86c 	bl	8000528 <getResultParameterURAT>
		osDelay(200);//sendToESP(SARATechnology);
 8000450:	20c8      	movs	r0, #200	; 0xc8
 8000452:	f002 fa97 	bl	8002984 <osDelay>
		osDelay(1500);
 8000456:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800045a:	f002 fa93 	bl	8002984 <osDelay>
		i++;
 800045e:	69fb      	ldr	r3, [r7, #28]
 8000460:	3301      	adds	r3, #1
 8000462:	61fb      	str	r3, [r7, #28]
		if(i > 3){
 8000464:	69fb      	ldr	r3, [r7, #28]
 8000466:	2b03      	cmp	r3, #3
 8000468:	dd1b      	ble.n	80004a2 <SARA_ChangeTech+0x13a>
			__HAL_UART_FLUSH_DRREGISTER(&huart1);
 800046a:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <SARA_ChangeTech+0x15c>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	685b      	ldr	r3, [r3, #4]
			if(&huart1.ErrorCode == HAL_UART_ERROR_ORE){
 8000470:	4b19      	ldr	r3, [pc, #100]	; (80004d8 <SARA_ChangeTech+0x170>)
 8000472:	2b08      	cmp	r3, #8
 8000474:	d105      	bne.n	8000482 <SARA_ChangeTech+0x11a>
				HAL_UART_Receive(&huart1, trash, 1, 20);
 8000476:	2314      	movs	r3, #20
 8000478:	2201      	movs	r2, #1
 800047a:	4913      	ldr	r1, [pc, #76]	; (80004c8 <SARA_ChangeTech+0x160>)
 800047c:	4811      	ldr	r0, [pc, #68]	; (80004c4 <SARA_ChangeTech+0x15c>)
 800047e:	f002 f8a0 	bl	80025c2 <HAL_UART_Receive>
				//sendToESP("Overrun Error code!!!!");
			}

			HAL_UART_Transmit(&huart1, SARAate0, strlen(SARAate0), 50);
 8000482:	4813      	ldr	r0, [pc, #76]	; (80004d0 <SARA_ChangeTech+0x168>)
 8000484:	f7ff fe64 	bl	8000150 <strlen>
 8000488:	4603      	mov	r3, r0
 800048a:	b29a      	uxth	r2, r3
 800048c:	2332      	movs	r3, #50	; 0x32
 800048e:	4910      	ldr	r1, [pc, #64]	; (80004d0 <SARA_ChangeTech+0x168>)
 8000490:	480c      	ldr	r0, [pc, #48]	; (80004c4 <SARA_ChangeTech+0x15c>)
 8000492:	f002 f804 	bl	800249e <HAL_UART_Transmit>
			HAL_UART_Receive(&huart1, trash, 128, 250);
 8000496:	23fa      	movs	r3, #250	; 0xfa
 8000498:	2280      	movs	r2, #128	; 0x80
 800049a:	490b      	ldr	r1, [pc, #44]	; (80004c8 <SARA_ChangeTech+0x160>)
 800049c:	4809      	ldr	r0, [pc, #36]	; (80004c4 <SARA_ChangeTech+0x15c>)
 800049e:	f002 f890 	bl	80025c2 <HAL_UART_Receive>
		}
	} while (SARATechnology[0] != tech && i < 5);
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <SARA_ChangeTech+0x174>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	79fa      	ldrb	r2, [r7, #7]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d002      	beq.n	80004b2 <SARA_ChangeTech+0x14a>
 80004ac:	69fb      	ldr	r3, [r7, #28]
 80004ae:	2b04      	cmp	r3, #4
 80004b0:	ddc2      	ble.n	8000438 <SARA_ChangeTech+0xd0>

}
 80004b2:	bf00      	nop
 80004b4:	3720      	adds	r7, #32
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	2000002c 	.word	0x2000002c
 80004c0:	20000038 	.word	0x20000038
 80004c4:	200012b8 	.word	0x200012b8
 80004c8:	200011e8 	.word	0x200011e8
 80004cc:	20000068 	.word	0x20000068
 80004d0:	20000000 	.word	0x20000000
 80004d4:	20001544 	.word	0x20001544
 80004d8:	200012f4 	.word	0x200012f4
 80004dc:	200012b4 	.word	0x200012b4

080004e0 <SARA_CheckTech>:

void SARA_CheckTech(){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	memset(SARAtech,'\0',50);
 80004e4:	2232      	movs	r2, #50	; 0x32
 80004e6:	2100      	movs	r1, #0
 80004e8:	480c      	ldr	r0, [pc, #48]	; (800051c <SARA_CheckTech+0x3c>)
 80004ea:	f003 fbd0 	bl	8003c8e <memset>
	HAL_UART_Transmit(&huart1, SARAcopsCheck, strlen(SARAcopsCheck), 10);
 80004ee:	480c      	ldr	r0, [pc, #48]	; (8000520 <SARA_CheckTech+0x40>)
 80004f0:	f7ff fe2e 	bl	8000150 <strlen>
 80004f4:	4603      	mov	r3, r0
 80004f6:	b29a      	uxth	r2, r3
 80004f8:	230a      	movs	r3, #10
 80004fa:	4909      	ldr	r1, [pc, #36]	; (8000520 <SARA_CheckTech+0x40>)
 80004fc:	4809      	ldr	r0, [pc, #36]	; (8000524 <SARA_CheckTech+0x44>)
 80004fe:	f001 ffce 	bl	800249e <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, SARAtech, 50, 1500);
 8000502:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000506:	2232      	movs	r2, #50	; 0x32
 8000508:	4904      	ldr	r1, [pc, #16]	; (800051c <SARA_CheckTech+0x3c>)
 800050a:	4806      	ldr	r0, [pc, #24]	; (8000524 <SARA_CheckTech+0x44>)
 800050c:	f002 f859 	bl	80025c2 <HAL_UART_Receive>
	osDelay(200);//sendToESP(SARAtech);
 8000510:	20c8      	movs	r0, #200	; 0xc8
 8000512:	f002 fa37 	bl	8002984 <osDelay>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20001544 	.word	0x20001544
 8000520:	20000044 	.word	0x20000044
 8000524:	200012b8 	.word	0x200012b8

08000528 <getResultParameterURAT>:

void getResultParameterURAT(int nParam, uint8_t * msg, int msgLength){
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
	memset(SARATechnology,'\0',1);
 8000534:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <getResultParameterURAT+0x80>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
	int commaCnt = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
	int i = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
	//sendToESP(msg);
	osDelay(200);
 8000542:	20c8      	movs	r0, #200	; 0xc8
 8000544:	f002 fa1e 	bl	8002984 <osDelay>
	while (msg[i] != '\0' && i < msgLength){
 8000548:	e021      	b.n	800058e <getResultParameterURAT+0x66>
		osDelay(50);
 800054a:	2032      	movs	r0, #50	; 0x32
 800054c:	f002 fa1a 	bl	8002984 <osDelay>
		if(msg[i] == ',' && commaCnt == nParam-1){
 8000550:	693b      	ldr	r3, [r7, #16]
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	4413      	add	r3, r2
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b2c      	cmp	r3, #44	; 0x2c
 800055a:	d10c      	bne.n	8000576 <getResultParameterURAT+0x4e>
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	3b01      	subs	r3, #1
 8000560:	697a      	ldr	r2, [r7, #20]
 8000562:	429a      	cmp	r2, r3
 8000564:	d107      	bne.n	8000576 <getResultParameterURAT+0x4e>
			//memset(SARATechnology,'\0',1); //probably unnecessary since its already done in beg
			SARATechnology[0] = msg[i+1];
 8000566:	693b      	ldr	r3, [r7, #16]
 8000568:	3301      	adds	r3, #1
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	4413      	add	r3, r2
 800056e:	781a      	ldrb	r2, [r3, #0]
 8000570:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <getResultParameterURAT+0x80>)
 8000572:	701a      	strb	r2, [r3, #0]
			return;
 8000574:	e015      	b.n	80005a2 <getResultParameterURAT+0x7a>
		} else if(msg[i] == ','){
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	68ba      	ldr	r2, [r7, #8]
 800057a:	4413      	add	r3, r2
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b2c      	cmp	r3, #44	; 0x2c
 8000580:	d102      	bne.n	8000588 <getResultParameterURAT+0x60>
			commaCnt++;
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	3301      	adds	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
		}
		i++;	}
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	3301      	adds	r3, #1
 800058c:	613b      	str	r3, [r7, #16]
	while (msg[i] != '\0' && i < msgLength){
 800058e:	693b      	ldr	r3, [r7, #16]
 8000590:	68ba      	ldr	r2, [r7, #8]
 8000592:	4413      	add	r3, r2
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d003      	beq.n	80005a2 <getResultParameterURAT+0x7a>
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	429a      	cmp	r2, r3
 80005a0:	dbd3      	blt.n	800054a <getResultParameterURAT+0x22>
}
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200012b4 	.word	0x200012b4

080005ac <getResultParameterCESQ>:


void getResultParameterCESQ(int nParam, uint8_t * msg){
 80005ac:	b480      	push	{r7}
 80005ae:	b087      	sub	sp, #28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	int commaCnt = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
	//uint8_t result;
	//for(int i = 0; i <= strlen(msg); i++){
	int i = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
	int j = 1;
 80005be:	2301      	movs	r3, #1
 80005c0:	60fb      	str	r3, [r7, #12]
	while (msg[i] != '\0'){
 80005c2:	e03b      	b.n	800063c <getResultParameterCESQ+0x90>
		if(msg[i] == ',' && commaCnt == nParam-1){
 80005c4:	693b      	ldr	r3, [r7, #16]
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	4413      	add	r3, r2
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b2c      	cmp	r3, #44	; 0x2c
 80005ce:	d129      	bne.n	8000624 <getResultParameterCESQ+0x78>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3b01      	subs	r3, #1
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d124      	bne.n	8000624 <getResultParameterCESQ+0x78>
			while (j <= 5 && msg[i+j] != '\r' && msg[i+j] != '\n'){
 80005da:	e00d      	b.n	80005f8 <getResultParameterCESQ+0x4c>
				SARARsrpRsrq[j-1] = msg[i+j];
 80005dc:	693a      	ldr	r2, [r7, #16]
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	4413      	add	r3, r2
 80005e2:	461a      	mov	r2, r3
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	441a      	add	r2, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	7811      	ldrb	r1, [r2, #0]
 80005ee:	4a19      	ldr	r2, [pc, #100]	; (8000654 <getResultParameterCESQ+0xa8>)
 80005f0:	54d1      	strb	r1, [r2, r3]
				j++;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	3301      	adds	r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
			while (j <= 5 && msg[i+j] != '\r' && msg[i+j] != '\n'){
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	2b05      	cmp	r3, #5
 80005fc:	dc25      	bgt.n	800064a <getResultParameterCESQ+0x9e>
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	461a      	mov	r2, r3
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b0d      	cmp	r3, #13
 800060e:	d01c      	beq.n	800064a <getResultParameterCESQ+0x9e>
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	4413      	add	r3, r2
 8000616:	461a      	mov	r2, r3
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	4413      	add	r3, r2
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b0a      	cmp	r3, #10
 8000620:	d1dc      	bne.n	80005dc <getResultParameterCESQ+0x30>
			}
			return;
 8000622:	e012      	b.n	800064a <getResultParameterCESQ+0x9e>
		} else if(msg[i] == ','){
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	683a      	ldr	r2, [r7, #0]
 8000628:	4413      	add	r3, r2
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b2c      	cmp	r3, #44	; 0x2c
 800062e:	d102      	bne.n	8000636 <getResultParameterCESQ+0x8a>
			commaCnt++;
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	3301      	adds	r3, #1
 8000634:	617b      	str	r3, [r7, #20]
		}
		i++;
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	3301      	adds	r3, #1
 800063a:	613b      	str	r3, [r7, #16]
	while (msg[i] != '\0'){
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	4413      	add	r3, r2
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d1bd      	bne.n	80005c4 <getResultParameterCESQ+0x18>
 8000648:	e000      	b.n	800064c <getResultParameterCESQ+0xa0>
			return;
 800064a:	bf00      	nop
	}
}
 800064c:	371c      	adds	r7, #28
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	200015c8 	.word	0x200015c8

08000658 <getCSQResult>:

void getCSQResult(uint8_t * msg){
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	int i = 8;
 8000660:	2308      	movs	r3, #8
 8000662:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
	while (msg[i] != ',' && msg[i] != '\0' && msg[i] != '\r' && msg[i] != '\n' && j < 4){
 8000668:	e00e      	b.n	8000688 <getCSQResult+0x30>
		SARAcsqResult[j] = msg[i];
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	4413      	add	r3, r2
 8000670:	7819      	ldrb	r1, [r3, #0]
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <getCSQResult+0x70>)
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	4413      	add	r3, r2
 8000678:	460a      	mov	r2, r1
 800067a:	701a      	strb	r2, [r3, #0]
		i++;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3301      	adds	r3, #1
 8000680:	60fb      	str	r3, [r7, #12]
		j++;
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	3301      	adds	r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
	while (msg[i] != ',' && msg[i] != '\0' && msg[i] != '\r' && msg[i] != '\n' && j < 4){
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b2c      	cmp	r3, #44	; 0x2c
 8000692:	d014      	beq.n	80006be <getCSQResult+0x66>
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	4413      	add	r3, r2
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d00e      	beq.n	80006be <getCSQResult+0x66>
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b0d      	cmp	r3, #13
 80006aa:	d008      	beq.n	80006be <getCSQResult+0x66>
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b0a      	cmp	r3, #10
 80006b6:	d002      	beq.n	80006be <getCSQResult+0x66>
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	ddd5      	ble.n	800066a <getCSQResult+0x12>
	}
}
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	20001444 	.word	0x20001444

080006cc <getGPSCoordinates>:

void getGPSCoordinates(){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
	int cnt = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
	memset(currentGPSCoords,'\0',80);
 80006d6:	2250      	movs	r2, #80	; 0x50
 80006d8:	2100      	movs	r1, #0
 80006da:	4821      	ldr	r0, [pc, #132]	; (8000760 <getGPSCoordinates+0x94>)
 80006dc:	f003 fad7 	bl	8003c8e <memset>
	//HAL_UART_Receive(&huart1, trash, 128, 200);
    HAL_UART_Transmit(&huart1, getGPSCoordsCommand, strlen(getGPSCoordsCommand), 50);
 80006e0:	4820      	ldr	r0, [pc, #128]	; (8000764 <getGPSCoordinates+0x98>)
 80006e2:	f7ff fd35 	bl	8000150 <strlen>
 80006e6:	4603      	mov	r3, r0
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	2332      	movs	r3, #50	; 0x32
 80006ec:	491d      	ldr	r1, [pc, #116]	; (8000764 <getGPSCoordinates+0x98>)
 80006ee:	481e      	ldr	r0, [pc, #120]	; (8000768 <getGPSCoordinates+0x9c>)
 80006f0:	f001 fed5 	bl	800249e <HAL_UART_Transmit>
    HAL_UART_Receive(&huart1, currentGPSCoords, 80, 250);
 80006f4:	23fa      	movs	r3, #250	; 0xfa
 80006f6:	2250      	movs	r2, #80	; 0x50
 80006f8:	4919      	ldr	r1, [pc, #100]	; (8000760 <getGPSCoordinates+0x94>)
 80006fa:	481b      	ldr	r0, [pc, #108]	; (8000768 <getGPSCoordinates+0x9c>)
 80006fc:	f001 ff61 	bl	80025c2 <HAL_UART_Receive>

    while (strlen(currentGPSCoords) < 18 && cnt < 5){ //arbitrary number, should be tweaked.
 8000700:	e021      	b.n	8000746 <getGPSCoordinates+0x7a>
    	memset(currentGPSCoords,'\0',80);
 8000702:	2250      	movs	r2, #80	; 0x50
 8000704:	2100      	movs	r1, #0
 8000706:	4816      	ldr	r0, [pc, #88]	; (8000760 <getGPSCoordinates+0x94>)
 8000708:	f003 fac1 	bl	8003c8e <memset>
    	HAL_UART_Receive(&huart1, trash, 128, 250);
 800070c:	23fa      	movs	r3, #250	; 0xfa
 800070e:	2280      	movs	r2, #128	; 0x80
 8000710:	4916      	ldr	r1, [pc, #88]	; (800076c <getGPSCoordinates+0xa0>)
 8000712:	4815      	ldr	r0, [pc, #84]	; (8000768 <getGPSCoordinates+0x9c>)
 8000714:	f001 ff55 	bl	80025c2 <HAL_UART_Receive>
        HAL_UART_Transmit(&huart1, getGPSCoordsCommand, strlen(getGPSCoordsCommand), 50);
 8000718:	4812      	ldr	r0, [pc, #72]	; (8000764 <getGPSCoordinates+0x98>)
 800071a:	f7ff fd19 	bl	8000150 <strlen>
 800071e:	4603      	mov	r3, r0
 8000720:	b29a      	uxth	r2, r3
 8000722:	2332      	movs	r3, #50	; 0x32
 8000724:	490f      	ldr	r1, [pc, #60]	; (8000764 <getGPSCoordinates+0x98>)
 8000726:	4810      	ldr	r0, [pc, #64]	; (8000768 <getGPSCoordinates+0x9c>)
 8000728:	f001 feb9 	bl	800249e <HAL_UART_Transmit>
        HAL_UART_Receive(&huart1, currentGPSCoords, 80, 500);
 800072c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000730:	2250      	movs	r2, #80	; 0x50
 8000732:	490b      	ldr	r1, [pc, #44]	; (8000760 <getGPSCoordinates+0x94>)
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <getGPSCoordinates+0x9c>)
 8000736:	f001 ff44 	bl	80025c2 <HAL_UART_Receive>
        osDelay(250);
 800073a:	20fa      	movs	r0, #250	; 0xfa
 800073c:	f002 f922 	bl	8002984 <osDelay>
        cnt++;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3301      	adds	r3, #1
 8000744:	607b      	str	r3, [r7, #4]
    while (strlen(currentGPSCoords) < 18 && cnt < 5){ //arbitrary number, should be tweaked.
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <getGPSCoordinates+0x94>)
 8000748:	f7ff fd02 	bl	8000150 <strlen>
 800074c:	4603      	mov	r3, r0
 800074e:	2b11      	cmp	r3, #17
 8000750:	d802      	bhi.n	8000758 <getGPSCoordinates+0x8c>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2b04      	cmp	r3, #4
 8000756:	ddd4      	ble.n	8000702 <getGPSCoordinates+0x36>
    }

}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20001578 	.word	0x20001578
 8000764:	200000c4 	.word	0x200000c4
 8000768:	200012b8 	.word	0x200012b8
 800076c:	200011e8 	.word	0x200011e8

08000770 <prepareSaraMeasurement>:

void prepareSaraMeasurement(int technology){
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	memset(SaraMeasurements,'\0',128);
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	2100      	movs	r1, #0
 800077c:	4822      	ldr	r0, [pc, #136]	; (8000808 <prepareSaraMeasurement+0x98>)
 800077e:	f003 fa86 	bl	8003c8e <memset>
	if (technology == SARA_LTEM){
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b07      	cmp	r3, #7
 8000786:	d103      	bne.n	8000790 <prepareSaraMeasurement+0x20>
		strcpy(SaraMeasurements,LTEMTechName);
 8000788:	4920      	ldr	r1, [pc, #128]	; (800080c <prepareSaraMeasurement+0x9c>)
 800078a:	481f      	ldr	r0, [pc, #124]	; (8000808 <prepareSaraMeasurement+0x98>)
 800078c:	f003 fb0f 	bl	8003dae <strcpy>
	}
	if (technology == SARA_NBIOT){
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b08      	cmp	r3, #8
 8000794:	d103      	bne.n	800079e <prepareSaraMeasurement+0x2e>
		strcpy(SaraMeasurements,NBIoTTechName);
 8000796:	491e      	ldr	r1, [pc, #120]	; (8000810 <prepareSaraMeasurement+0xa0>)
 8000798:	481b      	ldr	r0, [pc, #108]	; (8000808 <prepareSaraMeasurement+0x98>)
 800079a:	f003 fb08 	bl	8003dae <strcpy>
	}

	strcat(SaraMeasurements,currentGPSCoords);
 800079e:	491d      	ldr	r1, [pc, #116]	; (8000814 <prepareSaraMeasurement+0xa4>)
 80007a0:	4819      	ldr	r0, [pc, #100]	; (8000808 <prepareSaraMeasurement+0x98>)
 80007a2:	f003 faf5 	bl	8003d90 <strcat>
	strcat(SaraMeasurements,SARARsrpRsrq);
 80007a6:	491c      	ldr	r1, [pc, #112]	; (8000818 <prepareSaraMeasurement+0xa8>)
 80007a8:	4817      	ldr	r0, [pc, #92]	; (8000808 <prepareSaraMeasurement+0x98>)
 80007aa:	f003 faf1 	bl	8003d90 <strcat>
	strcat(SaraMeasurements,",");
 80007ae:	4816      	ldr	r0, [pc, #88]	; (8000808 <prepareSaraMeasurement+0x98>)
 80007b0:	f7ff fcce 	bl	8000150 <strlen>
 80007b4:	4603      	mov	r3, r0
 80007b6:	461a      	mov	r2, r3
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <prepareSaraMeasurement+0x98>)
 80007ba:	4413      	add	r3, r2
 80007bc:	4917      	ldr	r1, [pc, #92]	; (800081c <prepareSaraMeasurement+0xac>)
 80007be:	461a      	mov	r2, r3
 80007c0:	460b      	mov	r3, r1
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	8013      	strh	r3, [r2, #0]
	strcat(SaraMeasurements,SARAcsqResult);
 80007c6:	4916      	ldr	r1, [pc, #88]	; (8000820 <prepareSaraMeasurement+0xb0>)
 80007c8:	480f      	ldr	r0, [pc, #60]	; (8000808 <prepareSaraMeasurement+0x98>)
 80007ca:	f003 fae1 	bl	8003d90 <strcat>

	memset(currentGPSCoords,'\0',80);
 80007ce:	2250      	movs	r2, #80	; 0x50
 80007d0:	2100      	movs	r1, #0
 80007d2:	4810      	ldr	r0, [pc, #64]	; (8000814 <prepareSaraMeasurement+0xa4>)
 80007d4:	f003 fa5b 	bl	8003c8e <memset>
	memset(SARARsrpRsrq,'\0',6);
 80007d8:	2206      	movs	r2, #6
 80007da:	2100      	movs	r1, #0
 80007dc:	480e      	ldr	r0, [pc, #56]	; (8000818 <prepareSaraMeasurement+0xa8>)
 80007de:	f003 fa56 	bl	8003c8e <memset>
	memset(SARAcsqResult,'\0',4);
 80007e2:	2204      	movs	r2, #4
 80007e4:	2100      	movs	r1, #0
 80007e6:	480e      	ldr	r0, [pc, #56]	; (8000820 <prepareSaraMeasurement+0xb0>)
 80007e8:	f003 fa51 	bl	8003c8e <memset>

	memset(saraCESQmessage,'\0',70);
 80007ec:	2246      	movs	r2, #70	; 0x46
 80007ee:	2100      	movs	r1, #0
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <prepareSaraMeasurement+0xb4>)
 80007f2:	f003 fa4c 	bl	8003c8e <memset>
	memset(saraCSQmessage,'\0',50);
 80007f6:	2232      	movs	r2, #50	; 0x32
 80007f8:	2100      	movs	r1, #0
 80007fa:	480b      	ldr	r0, [pc, #44]	; (8000828 <prepareSaraMeasurement+0xb8>)
 80007fc:	f003 fa47 	bl	8003c8e <memset>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200012fc 	.word	0x200012fc
 800080c:	20000078 	.word	0x20000078
 8000810:	20000080 	.word	0x20000080
 8000814:	20001578 	.word	0x20001578
 8000818:	200015c8 	.word	0x200015c8
 800081c:	08004620 	.word	0x08004620
 8000820:	20001444 	.word	0x20001444
 8000824:	2000137c 	.word	0x2000137c
 8000828:	20001510 	.word	0x20001510

0800082c <NEMEUS_Extract_Lora_Measurements>:

void NEMEUS_Extract_Lora_Measurements(uint8_t * cmd){
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	int i = 8; // start after '+MAC: ' also contains 2 more of some ascii stuff???
 8000834:	2308      	movs	r3, #8
 8000836:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]

	while(i < 69 && cmd[i] != '\n' && cmd[i] != '\0' && cmd[i] != '\r'){
 800083c:	e00e      	b.n	800085c <NEMEUS_Extract_Lora_Measurements+0x30>
		currentLoraSignalQuality[j] = cmd[i];
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	4413      	add	r3, r2
 8000844:	7819      	ldrb	r1, [r3, #0]
 8000846:	4a12      	ldr	r2, [pc, #72]	; (8000890 <NEMEUS_Extract_Lora_Measurements+0x64>)
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	4413      	add	r3, r2
 800084c:	460a      	mov	r2, r1
 800084e:	701a      	strb	r2, [r3, #0]
		i++;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	3301      	adds	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
		j++;
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	3301      	adds	r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
	while(i < 69 && cmd[i] != '\n' && cmd[i] != '\0' && cmd[i] != '\r'){
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	2b44      	cmp	r3, #68	; 0x44
 8000860:	dc11      	bgt.n	8000886 <NEMEUS_Extract_Lora_Measurements+0x5a>
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	4413      	add	r3, r2
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b0a      	cmp	r3, #10
 800086c:	d00b      	beq.n	8000886 <NEMEUS_Extract_Lora_Measurements+0x5a>
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	4413      	add	r3, r2
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d005      	beq.n	8000886 <NEMEUS_Extract_Lora_Measurements+0x5a>
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	4413      	add	r3, r2
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b0d      	cmp	r3, #13
 8000884:	d1db      	bne.n	800083e <NEMEUS_Extract_Lora_Measurements+0x12>
	}
}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	2000126c 	.word	0x2000126c

08000894 <NEMEUS_Prepare_Lora_Measurements>:

void NEMEUS_Prepare_Lora_Measurements(){
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

	strcpy(loraMeasurements,loraTechName);
 8000898:	4909      	ldr	r1, [pc, #36]	; (80008c0 <NEMEUS_Prepare_Lora_Measurements+0x2c>)
 800089a:	480a      	ldr	r0, [pc, #40]	; (80008c4 <NEMEUS_Prepare_Lora_Measurements+0x30>)
 800089c:	f003 fa87 	bl	8003dae <strcpy>
	strcat(loraMeasurements,currentGPSCoords);
 80008a0:	4909      	ldr	r1, [pc, #36]	; (80008c8 <NEMEUS_Prepare_Lora_Measurements+0x34>)
 80008a2:	4808      	ldr	r0, [pc, #32]	; (80008c4 <NEMEUS_Prepare_Lora_Measurements+0x30>)
 80008a4:	f003 fa74 	bl	8003d90 <strcat>
	strcat(loraMeasurements,currentLoraSignalQuality);
 80008a8:	4908      	ldr	r1, [pc, #32]	; (80008cc <NEMEUS_Prepare_Lora_Measurements+0x38>)
 80008aa:	4806      	ldr	r0, [pc, #24]	; (80008c4 <NEMEUS_Prepare_Lora_Measurements+0x30>)
 80008ac:	f003 fa70 	bl	8003d90 <strcat>

	memset(currentGPSCoords,'\0',80);
 80008b0:	2250      	movs	r2, #80	; 0x50
 80008b2:	2100      	movs	r1, #0
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <NEMEUS_Prepare_Lora_Measurements+0x34>)
 80008b6:	f003 f9ea 	bl	8003c8e <memset>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000cc 	.word	0x200000cc
 80008c4:	200013c4 	.word	0x200013c4
 80008c8:	20001578 	.word	0x20001578
 80008cc:	2000126c 	.word	0x2000126c

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b5b0      	push	{r4, r5, r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d6:	f000 fc61 	bl	800119c <HAL_Init>

  /* USER CODE BEGIN Init */

  srand(time(0));
 80008da:	2000      	movs	r0, #0
 80008dc:	f003 fa70 	bl	8003dc0 <time>
 80008e0:	4603      	mov	r3, r0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f003 f9dc 	bl	8003ca0 <srand>
  int x = rand();
 80008e8:	f003 f9fe 	bl	8003ce8 <rand>
 80008ec:	6278      	str	r0, [r7, #36]	; 0x24
  int y = rand();
 80008ee:	f003 f9fb 	bl	8003ce8 <rand>
 80008f2:	6238      	str	r0, [r7, #32]
  sprintf(randSeq, "%X", x%16);
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	425a      	negs	r2, r3
 80008f8:	f003 030f 	and.w	r3, r3, #15
 80008fc:	f002 020f 	and.w	r2, r2, #15
 8000900:	bf58      	it	pl
 8000902:	4253      	negpl	r3, r2
 8000904:	461a      	mov	r2, r3
 8000906:	491c      	ldr	r1, [pc, #112]	; (8000978 <main+0xa8>)
 8000908:	481c      	ldr	r0, [pc, #112]	; (800097c <main+0xac>)
 800090a:	f003 fa21 	bl	8003d50 <siprintf>
  sprintf(stry, "%X", y%16);
 800090e:	6a3b      	ldr	r3, [r7, #32]
 8000910:	425a      	negs	r2, r3
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	f002 020f 	and.w	r2, r2, #15
 800091a:	bf58      	it	pl
 800091c:	4253      	negpl	r3, r2
 800091e:	461a      	mov	r2, r3
 8000920:	4915      	ldr	r1, [pc, #84]	; (8000978 <main+0xa8>)
 8000922:	4817      	ldr	r0, [pc, #92]	; (8000980 <main+0xb0>)
 8000924:	f003 fa14 	bl	8003d50 <siprintf>
  strcat(randSeq, stry);
 8000928:	4915      	ldr	r1, [pc, #84]	; (8000980 <main+0xb0>)
 800092a:	4814      	ldr	r0, [pc, #80]	; (800097c <main+0xac>)
 800092c:	f003 fa30 	bl	8003d90 <strcat>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000930:	f000 f82e 	bl	8000990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000934:	f000 f8e6 	bl	8000b04 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000938:	f000 f866 	bl	8000a08 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800093c:	f000 f88e 	bl	8000a5c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000940:	f000 f8b6 	bl	8000ab0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 7180 	mov.w	r1, #256	; 0x100
 800094a:	480e      	ldr	r0, [pc, #56]	; (8000984 <main+0xb4>)
 800094c:	f000 fe92 	bl	8001674 <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <main+0xb8>)
 8000952:	1d3c      	adds	r4, r7, #4
 8000954:	461d      	mov	r5, r3
 8000956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800095e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f001 ffc0 	bl	80028ec <osThreadCreate>
 800096c:	4602      	mov	r2, r0
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <main+0xbc>)
 8000970:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000972:	f001 ffb4 	bl	80028de <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000976:	e7fe      	b.n	8000976 <main+0xa6>
 8000978:	08004624 	.word	0x08004624
 800097c:	200015d0 	.word	0x200015d0
 8000980:	2000144c 	.word	0x2000144c
 8000984:	40010800 	.word	0x40010800
 8000988:	08004634 	.word	0x08004634
 800098c:	2000119c 	.word	0x2000119c

08000990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b090      	sub	sp, #64	; 0x40
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0318 	add.w	r3, r7, #24
 800099a:	2228      	movs	r2, #40	; 0x28
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f003 f975 	bl	8003c8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b2:	2302      	movs	r3, #2
 80009b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b6:	2301      	movs	r3, #1
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ba:	2310      	movs	r3, #16
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009be:	2300      	movs	r3, #0
 80009c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	f107 0318 	add.w	r3, r7, #24
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fe86 	bl	80016d8 <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009d2:	f000 fa0f 	bl	8000df4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 f8f2 	bl	8001bd8 <HAL_RCC_ClockConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009fa:	f000 f9fb 	bl	8000df4 <Error_Handler>
  }
}
 80009fe:	bf00      	nop
 8000a00:	3740      	adds	r7, #64	; 0x40
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a14:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000a18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a40:	f001 fce0 	bl	8002404 <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a4a:	f000 f9d3 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200012b8 	.word	0x200012b8
 8000a58:	40013800 	.word	0x40013800

08000a5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	; (8000aac <MX_USART2_UART_Init+0x50>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a68:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000a6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a94:	f001 fcb6 	bl	8002404 <HAL_UART_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a9e:	f000 f9a9 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200014d0 	.word	0x200014d0
 8000aac:	40004400 	.word	0x40004400

08000ab0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <MX_USART3_UART_Init+0x50>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000abc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ac0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ae8:	f001 fc8c 	bl	8002404 <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000af2:	f000 f97f 	bl	8000df4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200011a0 	.word	0x200011a0
 8000b00:	40004800 	.word	0x40004800

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0310 	add.w	r3, r7, #16
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b18:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <MX_GPIO_Init+0xb8>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a27      	ldr	r2, [pc, #156]	; (8000bbc <MX_GPIO_Init+0xb8>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <MX_GPIO_Init+0xb8>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0310 	and.w	r3, r3, #16
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <MX_GPIO_Init+0xb8>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a21      	ldr	r2, [pc, #132]	; (8000bbc <MX_GPIO_Init+0xb8>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <MX_GPIO_Init+0xb8>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <MX_GPIO_Init+0xb8>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a1b      	ldr	r2, [pc, #108]	; (8000bbc <MX_GPIO_Init+0xb8>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <MX_GPIO_Init+0xb8>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0308 	and.w	r3, r3, #8
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b66:	4816      	ldr	r0, [pc, #88]	; (8000bc0 <MX_GPIO_Init+0xbc>)
 8000b68:	f000 fd84 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b72:	4814      	ldr	r0, [pc, #80]	; (8000bc4 <MX_GPIO_Init+0xc0>)
 8000b74:	f000 fd7e 	bl	8001674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <MX_GPIO_Init+0xbc>)
 8000b92:	f000 fc15 	bl	80013c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	4619      	mov	r1, r3
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_GPIO_Init+0xc0>)
 8000bb0:	f000 fc06 	bl	80013c0 <HAL_GPIO_Init>

}
 8000bb4:	bf00      	nop
 8000bb6:	3720      	adds	r7, #32
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40011000 	.word	0x40011000
 8000bc4:	40010800 	.word	0x40010800

08000bc8 <sendToESP>:

/* USER CODE BEGIN 4 */

void sendToESP(uint8_t * msg) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, beginDelim, 1, 50);
 8000bd0:	2332      	movs	r3, #50	; 0x32
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	490b      	ldr	r1, [pc, #44]	; (8000c04 <sendToESP+0x3c>)
 8000bd6:	480c      	ldr	r0, [pc, #48]	; (8000c08 <sendToESP+0x40>)
 8000bd8:	f001 fc61 	bl	800249e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, msg, strlen(msg), 50);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff fab7 	bl	8000150 <strlen>
 8000be2:	4603      	mov	r3, r0
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	2332      	movs	r3, #50	; 0x32
 8000be8:	6879      	ldr	r1, [r7, #4]
 8000bea:	4807      	ldr	r0, [pc, #28]	; (8000c08 <sendToESP+0x40>)
 8000bec:	f001 fc57 	bl	800249e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, endDelim, 1, 50);
 8000bf0:	2332      	movs	r3, #50	; 0x32
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4905      	ldr	r1, [pc, #20]	; (8000c0c <sendToESP+0x44>)
 8000bf6:	4804      	ldr	r0, [pc, #16]	; (8000c08 <sendToESP+0x40>)
 8000bf8:	f001 fc51 	bl	800249e <HAL_UART_Transmit>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200000d4 	.word	0x200000d4
 8000c08:	200014d0 	.word	0x200014d0
 8000c0c:	200000d8 	.word	0x200000d8

08000c10 <collectAndTransmitSARAMeasurement>:

void collectAndTransmitSARAMeasurement(){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0

    HAL_UART_Transmit(&huart1, SARAcesq, strlen(SARAcesq), 50);
 8000c14:	4814      	ldr	r0, [pc, #80]	; (8000c68 <collectAndTransmitSARAMeasurement+0x58>)
 8000c16:	f7ff fa9b 	bl	8000150 <strlen>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	2332      	movs	r3, #50	; 0x32
 8000c20:	4911      	ldr	r1, [pc, #68]	; (8000c68 <collectAndTransmitSARAMeasurement+0x58>)
 8000c22:	4812      	ldr	r0, [pc, #72]	; (8000c6c <collectAndTransmitSARAMeasurement+0x5c>)
 8000c24:	f001 fc3b 	bl	800249e <HAL_UART_Transmit>
    HAL_UART_Receive(&huart1, saraCESQmessage, 70, 150);
 8000c28:	2396      	movs	r3, #150	; 0x96
 8000c2a:	2246      	movs	r2, #70	; 0x46
 8000c2c:	4910      	ldr	r1, [pc, #64]	; (8000c70 <collectAndTransmitSARAMeasurement+0x60>)
 8000c2e:	480f      	ldr	r0, [pc, #60]	; (8000c6c <collectAndTransmitSARAMeasurement+0x5c>)
 8000c30:	f001 fcc7 	bl	80025c2 <HAL_UART_Receive>
    getResultParameterCESQ(4, saraCESQmessage);
 8000c34:	490e      	ldr	r1, [pc, #56]	; (8000c70 <collectAndTransmitSARAMeasurement+0x60>)
 8000c36:	2004      	movs	r0, #4
 8000c38:	f7ff fcb8 	bl	80005ac <getResultParameterCESQ>

    HAL_UART_Transmit(&huart1, SARAcsq, strlen(SARAcsq), 50);
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <collectAndTransmitSARAMeasurement+0x64>)
 8000c3e:	f7ff fa87 	bl	8000150 <strlen>
 8000c42:	4603      	mov	r3, r0
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	2332      	movs	r3, #50	; 0x32
 8000c48:	490a      	ldr	r1, [pc, #40]	; (8000c74 <collectAndTransmitSARAMeasurement+0x64>)
 8000c4a:	4808      	ldr	r0, [pc, #32]	; (8000c6c <collectAndTransmitSARAMeasurement+0x5c>)
 8000c4c:	f001 fc27 	bl	800249e <HAL_UART_Transmit>
    HAL_UART_Receive(&huart1, saraCSQmessage, 50, 150);
 8000c50:	2396      	movs	r3, #150	; 0x96
 8000c52:	2232      	movs	r2, #50	; 0x32
 8000c54:	4908      	ldr	r1, [pc, #32]	; (8000c78 <collectAndTransmitSARAMeasurement+0x68>)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <collectAndTransmitSARAMeasurement+0x5c>)
 8000c58:	f001 fcb3 	bl	80025c2 <HAL_UART_Receive>

    getCSQResult(saraCSQmessage);
 8000c5c:	4806      	ldr	r0, [pc, #24]	; (8000c78 <collectAndTransmitSARAMeasurement+0x68>)
 8000c5e:	f7ff fcfb 	bl	8000658 <getCSQResult>

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000005c 	.word	0x2000005c
 8000c6c:	200012b8 	.word	0x200012b8
 8000c70:	2000137c 	.word	0x2000137c
 8000c74:	20000050 	.word	0x20000050
 8000c78:	20001510 	.word	0x20001510

08000c7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b0b3      	sub	sp, #204	; 0xcc
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  uint8_t debugTest[] = "AT+DEBUG=ME?";
 8000c84:	4b46      	ldr	r3, [pc, #280]	; (8000da0 <StartDefaultTask+0x124>)
 8000c86:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8000c8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c8c:	c407      	stmia	r4!, {r0, r1, r2}
 8000c8e:	7023      	strb	r3, [r4, #0]
  osDelay(4500);
 8000c90:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c94:	f001 fe76 	bl	8002984 <osDelay>
  SARA_Init();
 8000c98:	f7ff fa7a 	bl	8000190 <SARA_Init>
  nemeus_Power_Cycle();
 8000c9c:	f7ff faee 	bl	800027c <nemeus_Power_Cycle>
  uint8_t SigFoxMessage[69];
  //uint8_t saraMSG[69];

  for(;;)
  {
    osDelay(1000);
 8000ca0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca4:	f001 fe6e 	bl	8002984 <osDelay>
    //sendToESP(test);

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000ca8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cac:	483d      	ldr	r0, [pc, #244]	; (8000da4 <StartDefaultTask+0x128>)
 8000cae:	f000 fcf9 	bl	80016a4 <HAL_GPIO_TogglePin>

    // **** SARA STUFF ****
    // ********************

    SARA_ChangeTech('7');
 8000cb2:	2037      	movs	r0, #55	; 0x37
 8000cb4:	f7ff fb58 	bl	8000368 <SARA_ChangeTech>

    collectAndTransmitSARAMeasurement();
 8000cb8:	f7ff ffaa 	bl	8000c10 <collectAndTransmitSARAMeasurement>
    getGPSCoordinates();
 8000cbc:	f7ff fd06 	bl	80006cc <getGPSCoordinates>
    prepareSaraMeasurement(SARA_LTEM);
 8000cc0:	2007      	movs	r0, #7
 8000cc2:	f7ff fd55 	bl	8000770 <prepareSaraMeasurement>
    sendToESP(SaraMeasurements);
 8000cc6:	4838      	ldr	r0, [pc, #224]	; (8000da8 <StartDefaultTask+0x12c>)
 8000cc8:	f7ff ff7e 	bl	8000bc8 <sendToESP>

    memset(SaraMeasurements, '\0', 128);
 8000ccc:	2280      	movs	r2, #128	; 0x80
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4835      	ldr	r0, [pc, #212]	; (8000da8 <StartDefaultTask+0x12c>)
 8000cd2:	f002 ffdc 	bl	8003c8e <memset>

	SARA_ChangeTech('9');
 8000cd6:	2039      	movs	r0, #57	; 0x39
 8000cd8:	f7ff fb46 	bl	8000368 <SARA_ChangeTech>

    collectAndTransmitSARAMeasurement();
 8000cdc:	f7ff ff98 	bl	8000c10 <collectAndTransmitSARAMeasurement>
    getGPSCoordinates();
 8000ce0:	f7ff fcf4 	bl	80006cc <getGPSCoordinates>
    prepareSaraMeasurement(SARA_NBIOT);
 8000ce4:	2008      	movs	r0, #8
 8000ce6:	f7ff fd43 	bl	8000770 <prepareSaraMeasurement>
    sendToESP(SaraMeasurements);
 8000cea:	482f      	ldr	r0, [pc, #188]	; (8000da8 <StartDefaultTask+0x12c>)
 8000cec:	f7ff ff6c 	bl	8000bc8 <sendToESP>

    memset(SaraMeasurements, '\0', 128);
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	482c      	ldr	r0, [pc, #176]	; (8000da8 <StartDefaultTask+0x12c>)
 8000cf6:	f002 ffca 	bl	8003c8e <memset>

    // **** NEMEUS STUFF ****
    // **********************

    HAL_UART_Transmit(&huart3, getLoraLCR, strlen(getLoraLCR), 50);
 8000cfa:	482c      	ldr	r0, [pc, #176]	; (8000dac <StartDefaultTask+0x130>)
 8000cfc:	f7ff fa28 	bl	8000150 <strlen>
 8000d00:	4603      	mov	r3, r0
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	2332      	movs	r3, #50	; 0x32
 8000d06:	4929      	ldr	r1, [pc, #164]	; (8000dac <StartDefaultTask+0x130>)
 8000d08:	4829      	ldr	r0, [pc, #164]	; (8000db0 <StartDefaultTask+0x134>)
 8000d0a:	f001 fbc8 	bl	800249e <HAL_UART_Transmit>
    HAL_UART_Receive(&huart3, LoRaMessage, 69, 10000);
 8000d0e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000d12:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d16:	2245      	movs	r2, #69	; 0x45
 8000d18:	4825      	ldr	r0, [pc, #148]	; (8000db0 <StartDefaultTask+0x134>)
 8000d1a:	f001 fc52 	bl	80025c2 <HAL_UART_Receive>
    NEMEUS_Extract_Lora_Measurements(LoRaMessage);
 8000d1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fd82 	bl	800082c <NEMEUS_Extract_Lora_Measurements>

    getGPSCoordinates();
 8000d28:	f7ff fcd0 	bl	80006cc <getGPSCoordinates>

    NEMEUS_Prepare_Lora_Measurements();
 8000d2c:	f7ff fdb2 	bl	8000894 <NEMEUS_Prepare_Lora_Measurements>

    sendToESP(loraMeasurements);
 8000d30:	4820      	ldr	r0, [pc, #128]	; (8000db4 <StartDefaultTask+0x138>)
 8000d32:	f7ff ff49 	bl	8000bc8 <sendToESP>

    HAL_UART_Transmit(&huart2, crlf, strlen(crlf), 50);
 8000d36:	2332      	movs	r3, #50	; 0x32
 8000d38:	2202      	movs	r2, #2
 8000d3a:	491f      	ldr	r1, [pc, #124]	; (8000db8 <StartDefaultTask+0x13c>)
 8000d3c:	481f      	ldr	r0, [pc, #124]	; (8000dbc <StartDefaultTask+0x140>)
 8000d3e:	f001 fbae 	bl	800249e <HAL_UART_Transmit>

    //memset(saraMSG,'\0', 69);
	memset(SigFoxMessage, '\0', 69);
 8000d42:	f107 0308 	add.w	r3, r7, #8
 8000d46:	2245      	movs	r2, #69	; 0x45
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f002 ff9f 	bl	8003c8e <memset>
	memset(LoRaMessage, '\0', 69);
 8000d50:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d54:	2245      	movs	r2, #69	; 0x45
 8000d56:	2100      	movs	r1, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f002 ff98 	bl	8003c8e <memset>
	memset(currentGPSCoords,'\0',80);
 8000d5e:	2250      	movs	r2, #80	; 0x50
 8000d60:	2100      	movs	r1, #0
 8000d62:	4817      	ldr	r0, [pc, #92]	; (8000dc0 <StartDefaultTask+0x144>)
 8000d64:	f002 ff93 	bl	8003c8e <memset>
	memset(currentLoraSignalQuality,'\0',69);
 8000d68:	2245      	movs	r2, #69	; 0x45
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4815      	ldr	r0, [pc, #84]	; (8000dc4 <StartDefaultTask+0x148>)
 8000d6e:	f002 ff8e 	bl	8003c8e <memset>
	memset(loraMeasurements,'\0',128);
 8000d72:	2280      	movs	r2, #128	; 0x80
 8000d74:	2100      	movs	r1, #0
 8000d76:	480f      	ldr	r0, [pc, #60]	; (8000db4 <StartDefaultTask+0x138>)
 8000d78:	f002 ff89 	bl	8003c8e <memset>
	memset(sigfoxMeasurements,'\0',128);
 8000d7c:	2280      	movs	r2, #128	; 0x80
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4811      	ldr	r0, [pc, #68]	; (8000dc8 <StartDefaultTask+0x14c>)
 8000d82:	f002 ff84 	bl	8003c8e <memset>
	memset(sigfoxSend,'\0',30);
 8000d86:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d8a:	221e      	movs	r2, #30
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f002 ff7d 	bl	8003c8e <memset>
	sigFoxSeq++;
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <StartDefaultTask+0x150>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	4a0c      	ldr	r2, [pc, #48]	; (8000dcc <StartDefaultTask+0x150>)
 8000d9c:	6013      	str	r3, [r2, #0]
  {
 8000d9e:	e77f      	b.n	8000ca0 <StartDefaultTask+0x24>
 8000da0:	08004650 	.word	0x08004650
 8000da4:	40011000 	.word	0x40011000
 8000da8:	200012fc 	.word	0x200012fc
 8000dac:	200000a8 	.word	0x200000a8
 8000db0:	200011a0 	.word	0x200011a0
 8000db4:	200013c4 	.word	0x200013c4
 8000db8:	0800467c 	.word	0x0800467c
 8000dbc:	200014d0 	.word	0x200014d0
 8000dc0:	20001578 	.word	0x20001578
 8000dc4:	2000126c 	.word	0x2000126c
 8000dc8:	20001450 	.word	0x20001450
 8000dcc:	200003c0 	.word	0x200003c0

08000dd0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a04      	ldr	r2, [pc, #16]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d101      	bne.n	8000de6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000de2:	f000 f9f1 	bl	80011c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40012c00 	.word	0x40012c00

08000df4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dfa:	e7fe      	b.n	8000dfa <Error_Handler+0x6>

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <HAL_MspInit+0x68>)
 8000e04:	699b      	ldr	r3, [r3, #24]
 8000e06:	4a17      	ldr	r2, [pc, #92]	; (8000e64 <HAL_MspInit+0x68>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6193      	str	r3, [r2, #24]
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <HAL_MspInit+0x68>)
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_MspInit+0x68>)
 8000e1c:	69db      	ldr	r3, [r3, #28]
 8000e1e:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <HAL_MspInit+0x68>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	61d3      	str	r3, [r2, #28]
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_MspInit+0x68>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	210f      	movs	r1, #15
 8000e36:	f06f 0001 	mvn.w	r0, #1
 8000e3a:	f000 fa96 	bl	800136a <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <HAL_MspInit+0x6c>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <HAL_MspInit+0x6c>)
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40010000 	.word	0x40010000

08000e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b08c      	sub	sp, #48	; 0x30
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e74:	f107 0320 	add.w	r3, r7, #32
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a53      	ldr	r2, [pc, #332]	; (8000fd4 <HAL_UART_MspInit+0x168>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d132      	bne.n	8000ef2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e8c:	4b52      	ldr	r3, [pc, #328]	; (8000fd8 <HAL_UART_MspInit+0x16c>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a51      	ldr	r2, [pc, #324]	; (8000fd8 <HAL_UART_MspInit+0x16c>)
 8000e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b4f      	ldr	r3, [pc, #316]	; (8000fd8 <HAL_UART_MspInit+0x16c>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea0:	61fb      	str	r3, [r7, #28]
 8000ea2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b4c      	ldr	r3, [pc, #304]	; (8000fd8 <HAL_UART_MspInit+0x16c>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a4b      	ldr	r2, [pc, #300]	; (8000fd8 <HAL_UART_MspInit+0x16c>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b49      	ldr	r3, [pc, #292]	; (8000fd8 <HAL_UART_MspInit+0x16c>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	61bb      	str	r3, [r7, #24]
 8000eba:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 0320 	add.w	r3, r7, #32
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4842      	ldr	r0, [pc, #264]	; (8000fdc <HAL_UART_MspInit+0x170>)
 8000ed2:	f000 fa75 	bl	80013c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 0320 	add.w	r3, r7, #32
 8000ee8:	4619      	mov	r1, r3
 8000eea:	483c      	ldr	r0, [pc, #240]	; (8000fdc <HAL_UART_MspInit+0x170>)
 8000eec:	f000 fa68 	bl	80013c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ef0:	e06c      	b.n	8000fcc <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a3a      	ldr	r2, [pc, #232]	; (8000fe0 <HAL_UART_MspInit+0x174>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d130      	bne.n	8000f5e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efc:	4b36      	ldr	r3, [pc, #216]	; (8000fd8 <HAL_UART_MspInit+0x16c>)
 8000efe:	69db      	ldr	r3, [r3, #28]
 8000f00:	4a35      	ldr	r2, [pc, #212]	; (8000fd8 <HAL_UART_MspInit+0x16c>)
 8000f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f06:	61d3      	str	r3, [r2, #28]
 8000f08:	4b33      	ldr	r3, [pc, #204]	; (8000fd8 <HAL_UART_MspInit+0x16c>)
 8000f0a:	69db      	ldr	r3, [r3, #28]
 8000f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f14:	4b30      	ldr	r3, [pc, #192]	; (8000fd8 <HAL_UART_MspInit+0x16c>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a2f      	ldr	r2, [pc, #188]	; (8000fd8 <HAL_UART_MspInit+0x16c>)
 8000f1a:	f043 0304 	orr.w	r3, r3, #4
 8000f1e:	6193      	str	r3, [r2, #24]
 8000f20:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <HAL_UART_MspInit+0x16c>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	f003 0304 	and.w	r3, r3, #4
 8000f28:	613b      	str	r3, [r7, #16]
 8000f2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 0320 	add.w	r3, r7, #32
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4827      	ldr	r0, [pc, #156]	; (8000fdc <HAL_UART_MspInit+0x170>)
 8000f40:	f000 fa3e 	bl	80013c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f44:	2308      	movs	r3, #8
 8000f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 0320 	add.w	r3, r7, #32
 8000f54:	4619      	mov	r1, r3
 8000f56:	4821      	ldr	r0, [pc, #132]	; (8000fdc <HAL_UART_MspInit+0x170>)
 8000f58:	f000 fa32 	bl	80013c0 <HAL_GPIO_Init>
}
 8000f5c:	e036      	b.n	8000fcc <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a20      	ldr	r2, [pc, #128]	; (8000fe4 <HAL_UART_MspInit+0x178>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d131      	bne.n	8000fcc <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <HAL_UART_MspInit+0x16c>)
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <HAL_UART_MspInit+0x16c>)
 8000f6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f72:	61d3      	str	r3, [r2, #28]
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_UART_MspInit+0x16c>)
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_UART_MspInit+0x16c>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <HAL_UART_MspInit+0x16c>)
 8000f86:	f043 0308 	orr.w	r3, r3, #8
 8000f8a:	6193      	str	r3, [r2, #24]
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_UART_MspInit+0x16c>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f003 0308 	and.w	r3, r3, #8
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	4619      	mov	r1, r3
 8000fac:	480e      	ldr	r0, [pc, #56]	; (8000fe8 <HAL_UART_MspInit+0x17c>)
 8000fae:	f000 fa07 	bl	80013c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc0:	f107 0320 	add.w	r3, r7, #32
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4808      	ldr	r0, [pc, #32]	; (8000fe8 <HAL_UART_MspInit+0x17c>)
 8000fc8:	f000 f9fa 	bl	80013c0 <HAL_GPIO_Init>
}
 8000fcc:	bf00      	nop
 8000fce:	3730      	adds	r7, #48	; 0x30
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40013800 	.word	0x40013800
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	40004400 	.word	0x40004400
 8000fe4:	40004800 	.word	0x40004800
 8000fe8:	40010c00 	.word	0x40010c00

08000fec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08c      	sub	sp, #48	; 0x30
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	2019      	movs	r0, #25
 8001002:	f000 f9b2 	bl	800136a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001006:	2019      	movs	r0, #25
 8001008:	f000 f9cb 	bl	80013a2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800100c:	4b1e      	ldr	r3, [pc, #120]	; (8001088 <HAL_InitTick+0x9c>)
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	4a1d      	ldr	r2, [pc, #116]	; (8001088 <HAL_InitTick+0x9c>)
 8001012:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001016:	6193      	str	r3, [r2, #24]
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <HAL_InitTick+0x9c>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001024:	f107 0210 	add.w	r2, r7, #16
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4611      	mov	r1, r2
 800102e:	4618      	mov	r0, r3
 8001030:	f000 ff50 	bl	8001ed4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001034:	f000 ff3a 	bl	8001eac <HAL_RCC_GetPCLK2Freq>
 8001038:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800103a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103c:	4a13      	ldr	r2, [pc, #76]	; (800108c <HAL_InitTick+0xa0>)
 800103e:	fba2 2303 	umull	r2, r3, r2, r3
 8001042:	0c9b      	lsrs	r3, r3, #18
 8001044:	3b01      	subs	r3, #1
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HAL_InitTick+0xa4>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <HAL_InitTick+0xa8>)
 800104c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <HAL_InitTick+0xa4>)
 8001050:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001054:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001056:	4a0e      	ldr	r2, [pc, #56]	; (8001090 <HAL_InitTick+0xa4>)
 8001058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <HAL_InitTick+0xa4>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_InitTick+0xa4>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001068:	4809      	ldr	r0, [pc, #36]	; (8001090 <HAL_InitTick+0xa4>)
 800106a:	f000 ff81 	bl	8001f70 <HAL_TIM_Base_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d104      	bne.n	800107e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001074:	4806      	ldr	r0, [pc, #24]	; (8001090 <HAL_InitTick+0xa4>)
 8001076:	f000 ffd3 	bl	8002020 <HAL_TIM_Base_Start_IT>
 800107a:	4603      	mov	r3, r0
 800107c:	e000      	b.n	8001080 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
}
 8001080:	4618      	mov	r0, r3
 8001082:	3730      	adds	r7, #48	; 0x30
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	40021000 	.word	0x40021000
 800108c:	431bde83 	.word	0x431bde83
 8001090:	200015d4 	.word	0x200015d4
 8001094:	40012c00 	.word	0x40012c00

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800109c:	e7fe      	b.n	800109c <NMI_Handler+0x4>

0800109e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <HardFault_Handler+0x4>

080010a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <MemManage_Handler+0x4>

080010aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	bc80      	pop	{r7}
 80010c0:	4770      	bx	lr
	...

080010c4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <TIM1_UP_IRQHandler+0x10>)
 80010ca:	f000 fffb 	bl	80020c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200015d4 	.word	0x200015d4

080010d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e0:	4a14      	ldr	r2, [pc, #80]	; (8001134 <_sbrk+0x5c>)
 80010e2:	4b15      	ldr	r3, [pc, #84]	; (8001138 <_sbrk+0x60>)
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d102      	bne.n	80010fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <_sbrk+0x64>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <_sbrk+0x68>)
 80010f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	429a      	cmp	r2, r3
 8001106:	d207      	bcs.n	8001118 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001108:	f002 fd8c 	bl	8003c24 <__errno>
 800110c:	4602      	mov	r2, r0
 800110e:	230c      	movs	r3, #12
 8001110:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001116:	e009      	b.n	800112c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <_sbrk+0x64>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	4a05      	ldr	r2, [pc, #20]	; (800113c <_sbrk+0x64>)
 8001128:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3718      	adds	r7, #24
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20005000 	.word	0x20005000
 8001138:	00000400 	.word	0x00000400
 800113c:	200003c4 	.word	0x200003c4
 8001140:	20001628 	.word	0x20001628

08001144 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	bc80      	pop	{r7}
 800114e:	4770      	bx	lr

08001150 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001150:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001152:	e003      	b.n	800115c <LoopCopyDataInit>

08001154 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001156:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001158:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800115a:	3104      	adds	r1, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800115c:	480a      	ldr	r0, [pc, #40]	; (8001188 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001160:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001162:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001164:	d3f6      	bcc.n	8001154 <CopyDataInit>
  ldr r2, =_sbss
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001168:	e002      	b.n	8001170 <LoopFillZerobss>

0800116a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800116c:	f842 3b04 	str.w	r3, [r2], #4

08001170 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001172:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001174:	d3f9      	bcc.n	800116a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001176:	f7ff ffe5 	bl	8001144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117a:	f002 fd59 	bl	8003c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800117e:	f7ff fba7 	bl	80008d0 <main>
  bx lr
 8001182:	4770      	bx	lr
  ldr r3, =_sidata
 8001184:	080046d4 	.word	0x080046d4
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800118c:	20000150 	.word	0x20000150
  ldr r2, =_sbss
 8001190:	20000150 	.word	0x20000150
  ldr r3, = _ebss
 8001194:	20001624 	.word	0x20001624

08001198 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC1_2_IRQHandler>
	...

0800119c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_Init+0x28>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_Init+0x28>)
 80011a6:	f043 0310 	orr.w	r3, r3, #16
 80011aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 f8d1 	bl	8001354 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b2:	2000      	movs	r0, #0
 80011b4:	f7ff ff1a 	bl	8000fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b8:	f7ff fe20 	bl	8000dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40022000 	.word	0x40022000

080011c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <HAL_IncTick+0x1c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_IncTick+0x20>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	4a03      	ldr	r2, [pc, #12]	; (80011e8 <HAL_IncTick+0x20>)
 80011da:	6013      	str	r3, [r2, #0]
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	200000e4 	.word	0x200000e4
 80011e8:	2000161c 	.word	0x2000161c

080011ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b02      	ldr	r3, [pc, #8]	; (80011fc <HAL_GetTick+0x10>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bc80      	pop	{r7}
 80011fa:	4770      	bx	lr
 80011fc:	2000161c 	.word	0x2000161c

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db0b      	blt.n	800128e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4906      	ldr	r1, [pc, #24]	; (8001298 <__NVIC_EnableIRQ+0x34>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	; (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	; (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff4f 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800137c:	f7ff ff64 	bl	8001248 <__NVIC_GetPriorityGrouping>
 8001380:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	6978      	ldr	r0, [r7, #20]
 8001388:	f7ff ffb2 	bl	80012f0 <NVIC_EncodePriority>
 800138c:	4602      	mov	r2, r0
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff81 	bl	800129c <__NVIC_SetPriority>
}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff57 	bl	8001264 <__NVIC_EnableIRQ>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b08b      	sub	sp, #44	; 0x2c
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d2:	e127      	b.n	8001624 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013d4:	2201      	movs	r2, #1
 80013d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	69fa      	ldr	r2, [r7, #28]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013e8:	69ba      	ldr	r2, [r7, #24]
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	f040 8116 	bne.w	800161e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b12      	cmp	r3, #18
 80013f8:	d034      	beq.n	8001464 <HAL_GPIO_Init+0xa4>
 80013fa:	2b12      	cmp	r3, #18
 80013fc:	d80d      	bhi.n	800141a <HAL_GPIO_Init+0x5a>
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d02b      	beq.n	800145a <HAL_GPIO_Init+0x9a>
 8001402:	2b02      	cmp	r3, #2
 8001404:	d804      	bhi.n	8001410 <HAL_GPIO_Init+0x50>
 8001406:	2b00      	cmp	r3, #0
 8001408:	d031      	beq.n	800146e <HAL_GPIO_Init+0xae>
 800140a:	2b01      	cmp	r3, #1
 800140c:	d01c      	beq.n	8001448 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800140e:	e048      	b.n	80014a2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001410:	2b03      	cmp	r3, #3
 8001412:	d043      	beq.n	800149c <HAL_GPIO_Init+0xdc>
 8001414:	2b11      	cmp	r3, #17
 8001416:	d01b      	beq.n	8001450 <HAL_GPIO_Init+0x90>
          break;
 8001418:	e043      	b.n	80014a2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800141a:	4a89      	ldr	r2, [pc, #548]	; (8001640 <HAL_GPIO_Init+0x280>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d026      	beq.n	800146e <HAL_GPIO_Init+0xae>
 8001420:	4a87      	ldr	r2, [pc, #540]	; (8001640 <HAL_GPIO_Init+0x280>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d806      	bhi.n	8001434 <HAL_GPIO_Init+0x74>
 8001426:	4a87      	ldr	r2, [pc, #540]	; (8001644 <HAL_GPIO_Init+0x284>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d020      	beq.n	800146e <HAL_GPIO_Init+0xae>
 800142c:	4a86      	ldr	r2, [pc, #536]	; (8001648 <HAL_GPIO_Init+0x288>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d01d      	beq.n	800146e <HAL_GPIO_Init+0xae>
          break;
 8001432:	e036      	b.n	80014a2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001434:	4a85      	ldr	r2, [pc, #532]	; (800164c <HAL_GPIO_Init+0x28c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d019      	beq.n	800146e <HAL_GPIO_Init+0xae>
 800143a:	4a85      	ldr	r2, [pc, #532]	; (8001650 <HAL_GPIO_Init+0x290>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d016      	beq.n	800146e <HAL_GPIO_Init+0xae>
 8001440:	4a84      	ldr	r2, [pc, #528]	; (8001654 <HAL_GPIO_Init+0x294>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d013      	beq.n	800146e <HAL_GPIO_Init+0xae>
          break;
 8001446:	e02c      	b.n	80014a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	623b      	str	r3, [r7, #32]
          break;
 800144e:	e028      	b.n	80014a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	3304      	adds	r3, #4
 8001456:	623b      	str	r3, [r7, #32]
          break;
 8001458:	e023      	b.n	80014a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	3308      	adds	r3, #8
 8001460:	623b      	str	r3, [r7, #32]
          break;
 8001462:	e01e      	b.n	80014a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	330c      	adds	r3, #12
 800146a:	623b      	str	r3, [r7, #32]
          break;
 800146c:	e019      	b.n	80014a2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d102      	bne.n	800147c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001476:	2304      	movs	r3, #4
 8001478:	623b      	str	r3, [r7, #32]
          break;
 800147a:	e012      	b.n	80014a2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d105      	bne.n	8001490 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001484:	2308      	movs	r3, #8
 8001486:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	611a      	str	r2, [r3, #16]
          break;
 800148e:	e008      	b.n	80014a2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001490:	2308      	movs	r3, #8
 8001492:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69fa      	ldr	r2, [r7, #28]
 8001498:	615a      	str	r2, [r3, #20]
          break;
 800149a:	e002      	b.n	80014a2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
          break;
 80014a0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	2bff      	cmp	r3, #255	; 0xff
 80014a6:	d801      	bhi.n	80014ac <HAL_GPIO_Init+0xec>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	e001      	b.n	80014b0 <HAL_GPIO_Init+0xf0>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3304      	adds	r3, #4
 80014b0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	2bff      	cmp	r3, #255	; 0xff
 80014b6:	d802      	bhi.n	80014be <HAL_GPIO_Init+0xfe>
 80014b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	e002      	b.n	80014c4 <HAL_GPIO_Init+0x104>
 80014be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c0:	3b08      	subs	r3, #8
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	210f      	movs	r1, #15
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	401a      	ands	r2, r3
 80014d6:	6a39      	ldr	r1, [r7, #32]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	431a      	orrs	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 8096 	beq.w	800161e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014f2:	4b59      	ldr	r3, [pc, #356]	; (8001658 <HAL_GPIO_Init+0x298>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	4a58      	ldr	r2, [pc, #352]	; (8001658 <HAL_GPIO_Init+0x298>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6193      	str	r3, [r2, #24]
 80014fe:	4b56      	ldr	r3, [pc, #344]	; (8001658 <HAL_GPIO_Init+0x298>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800150a:	4a54      	ldr	r2, [pc, #336]	; (800165c <HAL_GPIO_Init+0x29c>)
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3302      	adds	r3, #2
 8001512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001516:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	f003 0303 	and.w	r3, r3, #3
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	220f      	movs	r2, #15
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	43db      	mvns	r3, r3
 8001528:	68fa      	ldr	r2, [r7, #12]
 800152a:	4013      	ands	r3, r2
 800152c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4b      	ldr	r2, [pc, #300]	; (8001660 <HAL_GPIO_Init+0x2a0>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d013      	beq.n	800155e <HAL_GPIO_Init+0x19e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a4a      	ldr	r2, [pc, #296]	; (8001664 <HAL_GPIO_Init+0x2a4>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d00d      	beq.n	800155a <HAL_GPIO_Init+0x19a>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a49      	ldr	r2, [pc, #292]	; (8001668 <HAL_GPIO_Init+0x2a8>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d007      	beq.n	8001556 <HAL_GPIO_Init+0x196>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a48      	ldr	r2, [pc, #288]	; (800166c <HAL_GPIO_Init+0x2ac>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d101      	bne.n	8001552 <HAL_GPIO_Init+0x192>
 800154e:	2303      	movs	r3, #3
 8001550:	e006      	b.n	8001560 <HAL_GPIO_Init+0x1a0>
 8001552:	2304      	movs	r3, #4
 8001554:	e004      	b.n	8001560 <HAL_GPIO_Init+0x1a0>
 8001556:	2302      	movs	r3, #2
 8001558:	e002      	b.n	8001560 <HAL_GPIO_Init+0x1a0>
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <HAL_GPIO_Init+0x1a0>
 800155e:	2300      	movs	r3, #0
 8001560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001562:	f002 0203 	and.w	r2, r2, #3
 8001566:	0092      	lsls	r2, r2, #2
 8001568:	4093      	lsls	r3, r2
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	4313      	orrs	r3, r2
 800156e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001570:	493a      	ldr	r1, [pc, #232]	; (800165c <HAL_GPIO_Init+0x29c>)
 8001572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001574:	089b      	lsrs	r3, r3, #2
 8001576:	3302      	adds	r3, #2
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d006      	beq.n	8001598 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800158a:	4b39      	ldr	r3, [pc, #228]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4938      	ldr	r1, [pc, #224]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	4313      	orrs	r3, r2
 8001594:	600b      	str	r3, [r1, #0]
 8001596:	e006      	b.n	80015a6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001598:	4b35      	ldr	r3, [pc, #212]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	43db      	mvns	r3, r3
 80015a0:	4933      	ldr	r1, [pc, #204]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d006      	beq.n	80015c0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015b2:	4b2f      	ldr	r3, [pc, #188]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	492e      	ldr	r1, [pc, #184]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	604b      	str	r3, [r1, #4]
 80015be:	e006      	b.n	80015ce <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015c0:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	4929      	ldr	r1, [pc, #164]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 80015ca:	4013      	ands	r3, r2
 80015cc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d006      	beq.n	80015e8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	4924      	ldr	r1, [pc, #144]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
 80015e6:	e006      	b.n	80015f6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015e8:	4b21      	ldr	r3, [pc, #132]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	491f      	ldr	r1, [pc, #124]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d006      	beq.n	8001610 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001602:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	491a      	ldr	r1, [pc, #104]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	60cb      	str	r3, [r1, #12]
 800160e:	e006      	b.n	800161e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	43db      	mvns	r3, r3
 8001618:	4915      	ldr	r1, [pc, #84]	; (8001670 <HAL_GPIO_Init+0x2b0>)
 800161a:	4013      	ands	r3, r2
 800161c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	3301      	adds	r3, #1
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	fa22 f303 	lsr.w	r3, r2, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	f47f aed0 	bne.w	80013d4 <HAL_GPIO_Init+0x14>
  }
}
 8001634:	bf00      	nop
 8001636:	372c      	adds	r7, #44	; 0x2c
 8001638:	46bd      	mov	sp, r7
 800163a:	bc80      	pop	{r7}
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	10210000 	.word	0x10210000
 8001644:	10110000 	.word	0x10110000
 8001648:	10120000 	.word	0x10120000
 800164c:	10310000 	.word	0x10310000
 8001650:	10320000 	.word	0x10320000
 8001654:	10220000 	.word	0x10220000
 8001658:	40021000 	.word	0x40021000
 800165c:	40010000 	.word	0x40010000
 8001660:	40010800 	.word	0x40010800
 8001664:	40010c00 	.word	0x40010c00
 8001668:	40011000 	.word	0x40011000
 800166c:	40011400 	.word	0x40011400
 8001670:	40010400 	.word	0x40010400

08001674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
 8001680:	4613      	mov	r3, r2
 8001682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001684:	787b      	ldrb	r3, [r7, #1]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001690:	e003      	b.n	800169a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001692:	887b      	ldrh	r3, [r7, #2]
 8001694:	041a      	lsls	r2, r3, #16
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	611a      	str	r2, [r3, #16]
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016b6:	887a      	ldrh	r2, [r7, #2]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4013      	ands	r3, r2
 80016bc:	041a      	lsls	r2, r3, #16
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	43d9      	mvns	r1, r3
 80016c2:	887b      	ldrh	r3, [r7, #2]
 80016c4:	400b      	ands	r3, r1
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	611a      	str	r2, [r3, #16]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
	...

080016d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d101      	bne.n	80016ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e26c      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 8087 	beq.w	8001806 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016f8:	4b92      	ldr	r3, [pc, #584]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 030c 	and.w	r3, r3, #12
 8001700:	2b04      	cmp	r3, #4
 8001702:	d00c      	beq.n	800171e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001704:	4b8f      	ldr	r3, [pc, #572]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 030c 	and.w	r3, r3, #12
 800170c:	2b08      	cmp	r3, #8
 800170e:	d112      	bne.n	8001736 <HAL_RCC_OscConfig+0x5e>
 8001710:	4b8c      	ldr	r3, [pc, #560]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171c:	d10b      	bne.n	8001736 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171e:	4b89      	ldr	r3, [pc, #548]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d06c      	beq.n	8001804 <HAL_RCC_OscConfig+0x12c>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d168      	bne.n	8001804 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e246      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173e:	d106      	bne.n	800174e <HAL_RCC_OscConfig+0x76>
 8001740:	4b80      	ldr	r3, [pc, #512]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a7f      	ldr	r2, [pc, #508]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	e02e      	b.n	80017ac <HAL_RCC_OscConfig+0xd4>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x98>
 8001756:	4b7b      	ldr	r3, [pc, #492]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a7a      	ldr	r2, [pc, #488]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800175c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	4b78      	ldr	r3, [pc, #480]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a77      	ldr	r2, [pc, #476]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001768:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e01d      	b.n	80017ac <HAL_RCC_OscConfig+0xd4>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001778:	d10c      	bne.n	8001794 <HAL_RCC_OscConfig+0xbc>
 800177a:	4b72      	ldr	r3, [pc, #456]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a71      	ldr	r2, [pc, #452]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	4b6f      	ldr	r3, [pc, #444]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a6e      	ldr	r2, [pc, #440]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800178c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e00b      	b.n	80017ac <HAL_RCC_OscConfig+0xd4>
 8001794:	4b6b      	ldr	r3, [pc, #428]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a6a      	ldr	r2, [pc, #424]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800179a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b68      	ldr	r3, [pc, #416]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a67      	ldr	r2, [pc, #412]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017aa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d013      	beq.n	80017dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff fd1a 	bl	80011ec <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017bc:	f7ff fd16 	bl	80011ec <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	; 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e1fa      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4b5d      	ldr	r3, [pc, #372]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0xe4>
 80017da:	e014      	b.n	8001806 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fd06 	bl	80011ec <HAL_GetTick>
 80017e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e4:	f7ff fd02 	bl	80011ec <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	; 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e1e6      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017f6:	4b53      	ldr	r3, [pc, #332]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x10c>
 8001802:	e000      	b.n	8001806 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d063      	beq.n	80018da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001812:	4b4c      	ldr	r3, [pc, #304]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00b      	beq.n	8001836 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800181e:	4b49      	ldr	r3, [pc, #292]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 030c 	and.w	r3, r3, #12
 8001826:	2b08      	cmp	r3, #8
 8001828:	d11c      	bne.n	8001864 <HAL_RCC_OscConfig+0x18c>
 800182a:	4b46      	ldr	r3, [pc, #280]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d116      	bne.n	8001864 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001836:	4b43      	ldr	r3, [pc, #268]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <HAL_RCC_OscConfig+0x176>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	691b      	ldr	r3, [r3, #16]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d001      	beq.n	800184e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e1ba      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800184e:	4b3d      	ldr	r3, [pc, #244]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4939      	ldr	r1, [pc, #228]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800185e:	4313      	orrs	r3, r2
 8001860:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001862:	e03a      	b.n	80018da <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d020      	beq.n	80018ae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800186c:	4b36      	ldr	r3, [pc, #216]	; (8001948 <HAL_RCC_OscConfig+0x270>)
 800186e:	2201      	movs	r2, #1
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7ff fcbb 	bl	80011ec <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800187a:	f7ff fcb7 	bl	80011ec <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e19b      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001898:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	00db      	lsls	r3, r3, #3
 80018a6:	4927      	ldr	r1, [pc, #156]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]
 80018ac:	e015      	b.n	80018da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ae:	4b26      	ldr	r3, [pc, #152]	; (8001948 <HAL_RCC_OscConfig+0x270>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fc9a 	bl	80011ec <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018bc:	f7ff fc96 	bl	80011ec <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e17a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ce:	4b1d      	ldr	r3, [pc, #116]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d03a      	beq.n	800195c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d019      	beq.n	8001922 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <HAL_RCC_OscConfig+0x274>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f4:	f7ff fc7a 	bl	80011ec <HAL_GetTick>
 80018f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fa:	e008      	b.n	800190e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fc:	f7ff fc76 	bl	80011ec <HAL_GetTick>
 8001900:	4602      	mov	r2, r0
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	1ad3      	subs	r3, r2, r3
 8001906:	2b02      	cmp	r3, #2
 8001908:	d901      	bls.n	800190e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800190a:	2303      	movs	r3, #3
 800190c:	e15a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800190e:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <HAL_RCC_OscConfig+0x26c>)
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0f0      	beq.n	80018fc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800191a:	2001      	movs	r0, #1
 800191c:	f000 fb0a 	bl	8001f34 <RCC_Delay>
 8001920:	e01c      	b.n	800195c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_RCC_OscConfig+0x274>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001928:	f7ff fc60 	bl	80011ec <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800192e:	e00f      	b.n	8001950 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001930:	f7ff fc5c 	bl	80011ec <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d908      	bls.n	8001950 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e140      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000
 8001948:	42420000 	.word	0x42420000
 800194c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001950:	4b9e      	ldr	r3, [pc, #632]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	f003 0302 	and.w	r3, r3, #2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1e9      	bne.n	8001930 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 80a6 	beq.w	8001ab6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800196a:	2300      	movs	r3, #0
 800196c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800196e:	4b97      	ldr	r3, [pc, #604]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d10d      	bne.n	8001996 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	4b94      	ldr	r3, [pc, #592]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	4a93      	ldr	r2, [pc, #588]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	61d3      	str	r3, [r2, #28]
 8001986:	4b91      	ldr	r3, [pc, #580]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001988:	69db      	ldr	r3, [r3, #28]
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	60bb      	str	r3, [r7, #8]
 8001990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001992:	2301      	movs	r3, #1
 8001994:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001996:	4b8e      	ldr	r3, [pc, #568]	; (8001bd0 <HAL_RCC_OscConfig+0x4f8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d118      	bne.n	80019d4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019a2:	4b8b      	ldr	r3, [pc, #556]	; (8001bd0 <HAL_RCC_OscConfig+0x4f8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a8a      	ldr	r2, [pc, #552]	; (8001bd0 <HAL_RCC_OscConfig+0x4f8>)
 80019a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ae:	f7ff fc1d 	bl	80011ec <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019b6:	f7ff fc19 	bl	80011ec <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b64      	cmp	r3, #100	; 0x64
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0fd      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c8:	4b81      	ldr	r3, [pc, #516]	; (8001bd0 <HAL_RCC_OscConfig+0x4f8>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d0f0      	beq.n	80019b6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d106      	bne.n	80019ea <HAL_RCC_OscConfig+0x312>
 80019dc:	4b7b      	ldr	r3, [pc, #492]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 80019de:	6a1b      	ldr	r3, [r3, #32]
 80019e0:	4a7a      	ldr	r2, [pc, #488]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	6213      	str	r3, [r2, #32]
 80019e8:	e02d      	b.n	8001a46 <HAL_RCC_OscConfig+0x36e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0x334>
 80019f2:	4b76      	ldr	r3, [pc, #472]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	4a75      	ldr	r2, [pc, #468]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	f023 0301 	bic.w	r3, r3, #1
 80019fc:	6213      	str	r3, [r2, #32]
 80019fe:	4b73      	ldr	r3, [pc, #460]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4a72      	ldr	r2, [pc, #456]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	f023 0304 	bic.w	r3, r3, #4
 8001a08:	6213      	str	r3, [r2, #32]
 8001a0a:	e01c      	b.n	8001a46 <HAL_RCC_OscConfig+0x36e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	2b05      	cmp	r3, #5
 8001a12:	d10c      	bne.n	8001a2e <HAL_RCC_OscConfig+0x356>
 8001a14:	4b6d      	ldr	r3, [pc, #436]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	4a6c      	ldr	r2, [pc, #432]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	f043 0304 	orr.w	r3, r3, #4
 8001a1e:	6213      	str	r3, [r2, #32]
 8001a20:	4b6a      	ldr	r3, [pc, #424]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	4a69      	ldr	r2, [pc, #420]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a26:	f043 0301 	orr.w	r3, r3, #1
 8001a2a:	6213      	str	r3, [r2, #32]
 8001a2c:	e00b      	b.n	8001a46 <HAL_RCC_OscConfig+0x36e>
 8001a2e:	4b67      	ldr	r3, [pc, #412]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4a66      	ldr	r2, [pc, #408]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	6213      	str	r3, [r2, #32]
 8001a3a:	4b64      	ldr	r3, [pc, #400]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a3c:	6a1b      	ldr	r3, [r3, #32]
 8001a3e:	4a63      	ldr	r2, [pc, #396]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a40:	f023 0304 	bic.w	r3, r3, #4
 8001a44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d015      	beq.n	8001a7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4e:	f7ff fbcd 	bl	80011ec <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a54:	e00a      	b.n	8001a6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a56:	f7ff fbc9 	bl	80011ec <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e0ab      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6c:	4b57      	ldr	r3, [pc, #348]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a6e:	6a1b      	ldr	r3, [r3, #32]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0ee      	beq.n	8001a56 <HAL_RCC_OscConfig+0x37e>
 8001a78:	e014      	b.n	8001aa4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a7a:	f7ff fbb7 	bl	80011ec <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a80:	e00a      	b.n	8001a98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a82:	f7ff fbb3 	bl	80011ec <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e095      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a98:	4b4c      	ldr	r3, [pc, #304]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1ee      	bne.n	8001a82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001aa4:	7dfb      	ldrb	r3, [r7, #23]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d105      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aaa:	4b48      	ldr	r3, [pc, #288]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	4a47      	ldr	r2, [pc, #284]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 8081 	beq.w	8001bc2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac0:	4b42      	ldr	r3, [pc, #264]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d061      	beq.n	8001b90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d146      	bne.n	8001b62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad4:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <HAL_RCC_OscConfig+0x4fc>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ada:	f7ff fb87 	bl	80011ec <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae2:	f7ff fb83 	bl	80011ec <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e067      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001af4:	4b35      	ldr	r3, [pc, #212]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f0      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b08:	d108      	bne.n	8001b1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b0a:	4b30      	ldr	r3, [pc, #192]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	492d      	ldr	r1, [pc, #180]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b1c:	4b2b      	ldr	r3, [pc, #172]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a19      	ldr	r1, [r3, #32]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	4927      	ldr	r1, [pc, #156]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b34:	4b27      	ldr	r3, [pc, #156]	; (8001bd4 <HAL_RCC_OscConfig+0x4fc>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fb57 	bl	80011ec <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b42:	f7ff fb53 	bl	80011ec <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e037      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b54:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x46a>
 8001b60:	e02f      	b.n	8001bc2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b62:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <HAL_RCC_OscConfig+0x4fc>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7ff fb40 	bl	80011ec <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff fb3c 	bl	80011ec <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e020      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b82:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x498>
 8001b8e:	e018      	b.n	8001bc2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69db      	ldr	r3, [r3, #28]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e013      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_RCC_OscConfig+0x4f4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d106      	bne.n	8001bbe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d001      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40007000 	.word	0x40007000
 8001bd4:	42420060 	.word	0x42420060

08001bd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0d0      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bec:	4b6a      	ldr	r3, [pc, #424]	; (8001d98 <HAL_RCC_ClockConfig+0x1c0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d910      	bls.n	8001c1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfa:	4b67      	ldr	r3, [pc, #412]	; (8001d98 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f023 0207 	bic.w	r2, r3, #7
 8001c02:	4965      	ldr	r1, [pc, #404]	; (8001d98 <HAL_RCC_ClockConfig+0x1c0>)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0a:	4b63      	ldr	r3, [pc, #396]	; (8001d98 <HAL_RCC_ClockConfig+0x1c0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d001      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e0b8      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d020      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d005      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c34:	4b59      	ldr	r3, [pc, #356]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4a58      	ldr	r2, [pc, #352]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c4c:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4a52      	ldr	r2, [pc, #328]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c58:	4b50      	ldr	r3, [pc, #320]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	494d      	ldr	r1, [pc, #308]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d040      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d107      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c7e:	4b47      	ldr	r3, [pc, #284]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d115      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e07f      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d107      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c96:	4b41      	ldr	r3, [pc, #260]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e073      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca6:	4b3d      	ldr	r3, [pc, #244]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e06b      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cb6:	4b39      	ldr	r3, [pc, #228]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f023 0203 	bic.w	r2, r3, #3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	4936      	ldr	r1, [pc, #216]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cc8:	f7ff fa90 	bl	80011ec <HAL_GetTick>
 8001ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	e00a      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cd0:	f7ff fa8c 	bl	80011ec <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e053      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 020c 	and.w	r2, r3, #12
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d1eb      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cf8:	4b27      	ldr	r3, [pc, #156]	; (8001d98 <HAL_RCC_ClockConfig+0x1c0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d210      	bcs.n	8001d28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d06:	4b24      	ldr	r3, [pc, #144]	; (8001d98 <HAL_RCC_ClockConfig+0x1c0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 0207 	bic.w	r2, r3, #7
 8001d0e:	4922      	ldr	r1, [pc, #136]	; (8001d98 <HAL_RCC_ClockConfig+0x1c0>)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d16:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <HAL_RCC_ClockConfig+0x1c0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e032      	b.n	8001d8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d008      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d34:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	4916      	ldr	r1, [pc, #88]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0308 	and.w	r3, r3, #8
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d009      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d52:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	490e      	ldr	r1, [pc, #56]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d66:	f000 f821 	bl	8001dac <HAL_RCC_GetSysClockFreq>
 8001d6a:	4601      	mov	r1, r0
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	091b      	lsrs	r3, r3, #4
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	4a0a      	ldr	r2, [pc, #40]	; (8001da0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d78:	5cd3      	ldrb	r3, [r2, r3]
 8001d7a:	fa21 f303 	lsr.w	r3, r1, r3
 8001d7e:	4a09      	ldr	r2, [pc, #36]	; (8001da4 <HAL_RCC_ClockConfig+0x1cc>)
 8001d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <HAL_RCC_ClockConfig+0x1d0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff f930 	bl	8000fec <HAL_InitTick>

  return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40022000 	.word	0x40022000
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	08004680 	.word	0x08004680
 8001da4:	200000dc 	.word	0x200000dc
 8001da8:	200000e0 	.word	0x200000e0

08001dac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dac:	b490      	push	{r4, r7}
 8001dae:	b08a      	sub	sp, #40	; 0x28
 8001db0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001db2:	4b2a      	ldr	r3, [pc, #168]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001db4:	1d3c      	adds	r4, r7, #4
 8001db6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001db8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001dbc:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	2300      	movs	r3, #0
 8001dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dd6:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d002      	beq.n	8001dec <HAL_RCC_GetSysClockFreq+0x40>
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d003      	beq.n	8001df2 <HAL_RCC_GetSysClockFreq+0x46>
 8001dea:	e02d      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dec:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dee:	623b      	str	r3, [r7, #32]
      break;
 8001df0:	e02d      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	0c9b      	lsrs	r3, r3, #18
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001dfe:	4413      	add	r3, r2
 8001e00:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001e04:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	0c5b      	lsrs	r3, r3, #17
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e1e:	4413      	add	r3, r2
 8001e20:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e24:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	4a0f      	ldr	r2, [pc, #60]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e2a:	fb02 f203 	mul.w	r2, r2, r3
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
 8001e36:	e004      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	4a0c      	ldr	r2, [pc, #48]	; (8001e6c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e3c:	fb02 f303 	mul.w	r3, r2, r3
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	623b      	str	r3, [r7, #32]
      break;
 8001e46:	e002      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e48:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e4a:	623b      	str	r3, [r7, #32]
      break;
 8001e4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc90      	pop	{r4, r7}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	08004660 	.word	0x08004660
 8001e60:	08004670 	.word	0x08004670
 8001e64:	40021000 	.word	0x40021000
 8001e68:	007a1200 	.word	0x007a1200
 8001e6c:	003d0900 	.word	0x003d0900

08001e70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e74:	4b02      	ldr	r3, [pc, #8]	; (8001e80 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	200000dc 	.word	0x200000dc

08001e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e88:	f7ff fff2 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001e8c:	4601      	mov	r1, r0
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	0a1b      	lsrs	r3, r3, #8
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	4a03      	ldr	r2, [pc, #12]	; (8001ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e9a:	5cd3      	ldrb	r3, [r2, r3]
 8001e9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	08004690 	.word	0x08004690

08001eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001eb0:	f7ff ffde 	bl	8001e70 <HAL_RCC_GetHCLKFreq>
 8001eb4:	4601      	mov	r1, r0
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	0adb      	lsrs	r3, r3, #11
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	4a03      	ldr	r2, [pc, #12]	; (8001ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ec2:	5cd3      	ldrb	r3, [r2, r3]
 8001ec4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	08004690 	.word	0x08004690

08001ed4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	220f      	movs	r2, #15
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <HAL_RCC_GetClockConfig+0x58>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0203 	and.w	r2, r3, #3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_RCC_GetClockConfig+0x58>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_RCC_GetClockConfig+0x58>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_RCC_GetClockConfig+0x58>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	08db      	lsrs	r3, r3, #3
 8001f0e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_RCC_GetClockConfig+0x5c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0207 	and.w	r2, r3, #7
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40022000 	.word	0x40022000

08001f34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <RCC_Delay+0x34>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <RCC_Delay+0x38>)
 8001f42:	fba2 2303 	umull	r2, r3, r2, r3
 8001f46:	0a5b      	lsrs	r3, r3, #9
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f50:	bf00      	nop
  }
  while (Delay --);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1e5a      	subs	r2, r3, #1
 8001f56:	60fa      	str	r2, [r7, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1f9      	bne.n	8001f50 <RCC_Delay+0x1c>
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	200000dc 	.word	0x200000dc
 8001f6c:	10624dd3 	.word	0x10624dd3

08001f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e041      	b.n	8002006 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f839 	bl	800200e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3304      	adds	r3, #4
 8001fac:	4619      	mov	r1, r3
 8001fae:	4610      	mov	r0, r2
 8001fb0:	f000 f9b4 	bl	800231c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr

08002020 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b01      	cmp	r3, #1
 8002032:	d001      	beq.n	8002038 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e03a      	b.n	80020ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a18      	ldr	r2, [pc, #96]	; (80020b8 <HAL_TIM_Base_Start_IT+0x98>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00e      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x58>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002062:	d009      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x58>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <HAL_TIM_Base_Start_IT+0x9c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d004      	beq.n	8002078 <HAL_TIM_Base_Start_IT+0x58>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a13      	ldr	r2, [pc, #76]	; (80020c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d111      	bne.n	800209c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2b06      	cmp	r3, #6
 8002088:	d010      	beq.n	80020ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800209a:	e007      	b.n	80020ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	40012c00 	.word	0x40012c00
 80020bc:	40000400 	.word	0x40000400
 80020c0:	40000800 	.word	0x40000800

080020c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d122      	bne.n	8002120 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d11b      	bne.n	8002120 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0202 	mvn.w	r2, #2
 80020f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f8ed 	bl	80022e6 <HAL_TIM_IC_CaptureCallback>
 800210c:	e005      	b.n	800211a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f8e0 	bl	80022d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f8ef 	bl	80022f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b04      	cmp	r3, #4
 800212c:	d122      	bne.n	8002174 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	2b04      	cmp	r3, #4
 800213a:	d11b      	bne.n	8002174 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0204 	mvn.w	r2, #4
 8002144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2202      	movs	r2, #2
 800214a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f8c3 	bl	80022e6 <HAL_TIM_IC_CaptureCallback>
 8002160:	e005      	b.n	800216e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f8b6 	bl	80022d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f8c5 	bl	80022f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b08      	cmp	r3, #8
 8002180:	d122      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0308 	and.w	r3, r3, #8
 800218c:	2b08      	cmp	r3, #8
 800218e:	d11b      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0208 	mvn.w	r2, #8
 8002198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2204      	movs	r2, #4
 800219e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f899 	bl	80022e6 <HAL_TIM_IC_CaptureCallback>
 80021b4:	e005      	b.n	80021c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f88c 	bl	80022d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f89b 	bl	80022f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b10      	cmp	r3, #16
 80021d4:	d122      	bne.n	800221c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d11b      	bne.n	800221c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0210 	mvn.w	r2, #16
 80021ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2208      	movs	r2, #8
 80021f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f86f 	bl	80022e6 <HAL_TIM_IC_CaptureCallback>
 8002208:	e005      	b.n	8002216 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f862 	bl	80022d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f871 	bl	80022f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b01      	cmp	r3, #1
 8002228:	d10e      	bne.n	8002248 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b01      	cmp	r3, #1
 8002236:	d107      	bne.n	8002248 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0201 	mvn.w	r2, #1
 8002240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe fdc4 	bl	8000dd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002252:	2b80      	cmp	r3, #128	; 0x80
 8002254:	d10e      	bne.n	8002274 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002260:	2b80      	cmp	r3, #128	; 0x80
 8002262:	d107      	bne.n	8002274 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800226c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f8bf 	bl	80023f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800227e:	2b40      	cmp	r3, #64	; 0x40
 8002280:	d10e      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228c:	2b40      	cmp	r3, #64	; 0x40
 800228e:	d107      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f835 	bl	800230a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	d10e      	bne.n	80022cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0320 	and.w	r3, r3, #32
 80022b8:	2b20      	cmp	r3, #32
 80022ba:	d107      	bne.n	80022cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0220 	mvn.w	r2, #32
 80022c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f88a 	bl	80023e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022cc:	bf00      	nop
 80022ce:	3708      	adds	r7, #8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr

080022e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800230a:	b480      	push	{r7}
 800230c:	b083      	sub	sp, #12
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002312:	bf00      	nop
 8002314:	370c      	adds	r7, #12
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr

0800231c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a29      	ldr	r2, [pc, #164]	; (80023d4 <TIM_Base_SetConfig+0xb8>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d00b      	beq.n	800234c <TIM_Base_SetConfig+0x30>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233a:	d007      	beq.n	800234c <TIM_Base_SetConfig+0x30>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a26      	ldr	r2, [pc, #152]	; (80023d8 <TIM_Base_SetConfig+0xbc>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d003      	beq.n	800234c <TIM_Base_SetConfig+0x30>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a25      	ldr	r2, [pc, #148]	; (80023dc <TIM_Base_SetConfig+0xc0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d108      	bne.n	800235e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002352:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a1c      	ldr	r2, [pc, #112]	; (80023d4 <TIM_Base_SetConfig+0xb8>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d00b      	beq.n	800237e <TIM_Base_SetConfig+0x62>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800236c:	d007      	beq.n	800237e <TIM_Base_SetConfig+0x62>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a19      	ldr	r2, [pc, #100]	; (80023d8 <TIM_Base_SetConfig+0xbc>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d003      	beq.n	800237e <TIM_Base_SetConfig+0x62>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a18      	ldr	r2, [pc, #96]	; (80023dc <TIM_Base_SetConfig+0xc0>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d108      	bne.n	8002390 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	4313      	orrs	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	4313      	orrs	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <TIM_Base_SetConfig+0xb8>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d103      	bne.n	80023c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	615a      	str	r2, [r3, #20]
}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr
 80023d4:	40012c00 	.word	0x40012c00
 80023d8:	40000400 	.word	0x40000400
 80023dc:	40000800 	.word	0x40000800

080023e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bc80      	pop	{r7}
 80023f0:	4770      	bx	lr

080023f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023f2:	b480      	push	{r7}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	bc80      	pop	{r7}
 8002402:	4770      	bx	lr

08002404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e03f      	b.n	8002496 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7fe fd1e 	bl	8000e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2224      	movs	r2, #36	; 0x24
 8002434:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f000 f9a3 	bl	8002794 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800245c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695a      	ldr	r2, [r3, #20]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800246c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800247c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2220      	movs	r2, #32
 8002488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2220      	movs	r2, #32
 8002490:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b08a      	sub	sp, #40	; 0x28
 80024a2:	af02      	add	r7, sp, #8
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	603b      	str	r3, [r7, #0]
 80024aa:	4613      	mov	r3, r2
 80024ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2b20      	cmp	r3, #32
 80024bc:	d17c      	bne.n	80025b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d002      	beq.n	80024ca <HAL_UART_Transmit+0x2c>
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e075      	b.n	80025ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d101      	bne.n	80024dc <HAL_UART_Transmit+0x3e>
 80024d8:	2302      	movs	r3, #2
 80024da:	e06e      	b.n	80025ba <HAL_UART_Transmit+0x11c>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2200      	movs	r2, #0
 80024e8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2221      	movs	r2, #33	; 0x21
 80024ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80024f2:	f7fe fe7b 	bl	80011ec <HAL_GetTick>
 80024f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	88fa      	ldrh	r2, [r7, #6]
 80024fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	88fa      	ldrh	r2, [r7, #6]
 8002502:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800250c:	d108      	bne.n	8002520 <HAL_UART_Transmit+0x82>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d104      	bne.n	8002520 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	e003      	b.n	8002528 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002524:	2300      	movs	r3, #0
 8002526:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002530:	e02a      	b.n	8002588 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2200      	movs	r2, #0
 800253a:	2180      	movs	r1, #128	; 0x80
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 f8df 	bl	8002700 <UART_WaitOnFlagUntilTimeout>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e036      	b.n	80025ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10b      	bne.n	800256a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	881b      	ldrh	r3, [r3, #0]
 8002556:	461a      	mov	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002560:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	3302      	adds	r3, #2
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	e007      	b.n	800257a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	781a      	ldrb	r2, [r3, #0]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	3301      	adds	r3, #1
 8002578:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800258c:	b29b      	uxth	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1cf      	bne.n	8002532 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2200      	movs	r2, #0
 800259a:	2140      	movs	r1, #64	; 0x40
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f8af 	bl	8002700 <UART_WaitOnFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e006      	b.n	80025ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2220      	movs	r2, #32
 80025b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e000      	b.n	80025ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80025b8:	2302      	movs	r3, #2
  }
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3720      	adds	r7, #32
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b08a      	sub	sp, #40	; 0x28
 80025c6:	af02      	add	r7, sp, #8
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	60b9      	str	r1, [r7, #8]
 80025cc:	603b      	str	r3, [r7, #0]
 80025ce:	4613      	mov	r3, r2
 80025d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b20      	cmp	r3, #32
 80025e0:	f040 8089 	bne.w	80026f6 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d002      	beq.n	80025f0 <HAL_UART_Receive+0x2e>
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d101      	bne.n	80025f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e081      	b.n	80026f8 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_UART_Receive+0x40>
 80025fe:	2302      	movs	r3, #2
 8002600:	e07a      	b.n	80026f8 <HAL_UART_Receive+0x136>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2222      	movs	r2, #34	; 0x22
 8002614:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002618:	f7fe fde8 	bl	80011ec <HAL_GetTick>
 800261c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	88fa      	ldrh	r2, [r7, #6]
 8002622:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	88fa      	ldrh	r2, [r7, #6]
 8002628:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002632:	d108      	bne.n	8002646 <HAL_UART_Receive+0x84>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d104      	bne.n	8002646 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 800263c:	2300      	movs	r3, #0
 800263e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	61bb      	str	r3, [r7, #24]
 8002644:	e003      	b.n	800264e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002656:	e043      	b.n	80026e0 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2200      	movs	r2, #0
 8002660:	2120      	movs	r1, #32
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 f84c 	bl	8002700 <UART_WaitOnFlagUntilTimeout>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e042      	b.n	80026f8 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10c      	bne.n	8002692 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	b29b      	uxth	r3, r3
 8002680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002684:	b29a      	uxth	r2, r3
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	3302      	adds	r3, #2
 800268e:	61bb      	str	r3, [r7, #24]
 8002690:	e01f      	b.n	80026d2 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269a:	d007      	beq.n	80026ac <HAL_UART_Receive+0xea>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <HAL_UART_Receive+0xf8>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d106      	bne.n	80026ba <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	e008      	b.n	80026cc <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	3301      	adds	r3, #1
 80026d0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1b6      	bne.n	8002658 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2220      	movs	r2, #32
 80026ee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80026f6:	2302      	movs	r3, #2
  }
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3720      	adds	r7, #32
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}

08002700 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	4613      	mov	r3, r2
 800270e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002710:	e02c      	b.n	800276c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002718:	d028      	beq.n	800276c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d007      	beq.n	8002730 <UART_WaitOnFlagUntilTimeout+0x30>
 8002720:	f7fe fd64 	bl	80011ec <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	429a      	cmp	r2, r3
 800272e:	d21d      	bcs.n	800276c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800273e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0201 	bic.w	r2, r2, #1
 800274e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2220      	movs	r2, #32
 800275c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e00f      	b.n	800278c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	4013      	ands	r3, r2
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	429a      	cmp	r2, r3
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	461a      	mov	r2, r3
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	429a      	cmp	r2, r3
 8002788:	d0c3      	beq.n	8002712 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027ce:	f023 030c 	bic.w	r3, r3, #12
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	68b9      	ldr	r1, [r7, #8]
 80027d8:	430b      	orrs	r3, r1
 80027da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	699a      	ldr	r2, [r3, #24]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a2c      	ldr	r2, [pc, #176]	; (80028a8 <UART_SetConfig+0x114>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d103      	bne.n	8002804 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027fc:	f7ff fb56 	bl	8001eac <HAL_RCC_GetPCLK2Freq>
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	e002      	b.n	800280a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002804:	f7ff fb3e 	bl	8001e84 <HAL_RCC_GetPCLK1Freq>
 8002808:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	009a      	lsls	r2, r3, #2
 8002814:	441a      	add	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002820:	4a22      	ldr	r2, [pc, #136]	; (80028ac <UART_SetConfig+0x118>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	095b      	lsrs	r3, r3, #5
 8002828:	0119      	lsls	r1, r3, #4
 800282a:	68fa      	ldr	r2, [r7, #12]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	009a      	lsls	r2, r3, #2
 8002834:	441a      	add	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002840:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <UART_SetConfig+0x118>)
 8002842:	fba3 0302 	umull	r0, r3, r3, r2
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2064      	movs	r0, #100	; 0x64
 800284a:	fb00 f303 	mul.w	r3, r0, r3
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	011b      	lsls	r3, r3, #4
 8002852:	3332      	adds	r3, #50	; 0x32
 8002854:	4a15      	ldr	r2, [pc, #84]	; (80028ac <UART_SetConfig+0x118>)
 8002856:	fba2 2303 	umull	r2, r3, r2, r3
 800285a:	095b      	lsrs	r3, r3, #5
 800285c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002860:	4419      	add	r1, r3
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	4613      	mov	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	4413      	add	r3, r2
 800286a:	009a      	lsls	r2, r3, #2
 800286c:	441a      	add	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	fbb2 f2f3 	udiv	r2, r2, r3
 8002878:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <UART_SetConfig+0x118>)
 800287a:	fba3 0302 	umull	r0, r3, r3, r2
 800287e:	095b      	lsrs	r3, r3, #5
 8002880:	2064      	movs	r0, #100	; 0x64
 8002882:	fb00 f303 	mul.w	r3, r0, r3
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	011b      	lsls	r3, r3, #4
 800288a:	3332      	adds	r3, #50	; 0x32
 800288c:	4a07      	ldr	r2, [pc, #28]	; (80028ac <UART_SetConfig+0x118>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	095b      	lsrs	r3, r3, #5
 8002894:	f003 020f 	and.w	r2, r3, #15
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	440a      	add	r2, r1
 800289e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028a0:	bf00      	nop
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40013800 	.word	0x40013800
 80028ac:	51eb851f 	.word	0x51eb851f

080028b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80028be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028c2:	2b84      	cmp	r3, #132	; 0x84
 80028c4:	d005      	beq.n	80028d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80028c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	4413      	add	r3, r2
 80028ce:	3303      	adds	r3, #3
 80028d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80028d2:	68fb      	ldr	r3, [r7, #12]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	bc80      	pop	{r7}
 80028dc:	4770      	bx	lr

080028de <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80028e2:	f000 facd 	bl	8002e80 <vTaskStartScheduler>
  
  return osOK;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	bd80      	pop	{r7, pc}

080028ec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80028ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ee:	b089      	sub	sp, #36	; 0x24
 80028f0:	af04      	add	r7, sp, #16
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d020      	beq.n	8002940 <osThreadCreate+0x54>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d01c      	beq.n	8002940 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685c      	ldr	r4, [r3, #4]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681d      	ldr	r5, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691e      	ldr	r6, [r3, #16]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ffc9 	bl	80028b0 <makeFreeRtosPriority>
 800291e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002928:	9202      	str	r2, [sp, #8]
 800292a:	9301      	str	r3, [sp, #4]
 800292c:	9100      	str	r1, [sp, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	4632      	mov	r2, r6
 8002932:	4629      	mov	r1, r5
 8002934:	4620      	mov	r0, r4
 8002936:	f000 f8e8 	bl	8002b0a <xTaskCreateStatic>
 800293a:	4603      	mov	r3, r0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	e01c      	b.n	800297a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685c      	ldr	r4, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800294c:	b29e      	uxth	r6, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ffab 	bl	80028b0 <makeFreeRtosPriority>
 800295a:	4602      	mov	r2, r0
 800295c:	f107 030c 	add.w	r3, r7, #12
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	9200      	str	r2, [sp, #0]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4632      	mov	r2, r6
 8002968:	4629      	mov	r1, r5
 800296a:	4620      	mov	r0, r4
 800296c:	f000 f926 	bl	8002bbc <xTaskCreate>
 8002970:	4603      	mov	r3, r0
 8002972:	2b01      	cmp	r3, #1
 8002974:	d001      	beq.n	800297a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800297a:	68fb      	ldr	r3, [r7, #12]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002984 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <osDelay+0x16>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	e000      	b.n	800299c <osDelay+0x18>
 800299a:	2301      	movs	r3, #1
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fa3b 	bl	8002e18 <vTaskDelay>
  
  return osOK;
 80029a2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f103 0208 	add.w	r2, r3, #8
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f103 0208 	add.w	r2, r3, #8
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f103 0208 	add.w	r2, r3, #8
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bc80      	pop	{r7}
 80029e8:	4770      	bx	lr

080029ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr

08002a02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	601a      	str	r2, [r3, #0]
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr

08002a48 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a5e:	d103      	bne.n	8002a68 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	e00c      	b.n	8002a82 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3308      	adds	r3, #8
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	e002      	b.n	8002a76 <vListInsert+0x2e>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68ba      	ldr	r2, [r7, #8]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d2f6      	bcs.n	8002a70 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	601a      	str	r2, [r3, #0]
}
 8002aae:	bf00      	nop
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bc80      	pop	{r7}
 8002ab6:	4770      	bx	lr

08002ab8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6892      	ldr	r2, [r2, #8]
 8002ace:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	6852      	ldr	r2, [r2, #4]
 8002ad8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d103      	bne.n	8002aec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	1e5a      	subs	r2, r3, #1
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr

08002b0a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b08e      	sub	sp, #56	; 0x38
 8002b0e:	af04      	add	r7, sp, #16
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b22:	f383 8811 	msr	BASEPRI, r3
 8002b26:	f3bf 8f6f 	isb	sy
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	623b      	str	r3, [r7, #32]
 8002b30:	e7fe      	b.n	8002b30 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d109      	bne.n	8002b4c <xTaskCreateStatic+0x42>
 8002b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b3c:	f383 8811 	msr	BASEPRI, r3
 8002b40:	f3bf 8f6f 	isb	sy
 8002b44:	f3bf 8f4f 	dsb	sy
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	e7fe      	b.n	8002b4a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b4c:	2354      	movs	r3, #84	; 0x54
 8002b4e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	2b54      	cmp	r3, #84	; 0x54
 8002b54:	d009      	beq.n	8002b6a <xTaskCreateStatic+0x60>
 8002b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b5a:	f383 8811 	msr	BASEPRI, r3
 8002b5e:	f3bf 8f6f 	isb	sy
 8002b62:	f3bf 8f4f 	dsb	sy
 8002b66:	61bb      	str	r3, [r7, #24]
 8002b68:	e7fe      	b.n	8002b68 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d01e      	beq.n	8002bae <xTaskCreateStatic+0xa4>
 8002b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d01b      	beq.n	8002bae <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	2202      	movs	r2, #2
 8002b84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b88:	2300      	movs	r3, #0
 8002b8a:	9303      	str	r3, [sp, #12]
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	9302      	str	r3, [sp, #8]
 8002b90:	f107 0314 	add.w	r3, r7, #20
 8002b94:	9301      	str	r3, [sp, #4]
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f850 	bl	8002c46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002ba6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ba8:	f000 f8cc 	bl	8002d44 <prvAddNewTaskToReadyList>
 8002bac:	e001      	b.n	8002bb2 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002bb2:	697b      	ldr	r3, [r7, #20]
	}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3728      	adds	r7, #40	; 0x28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08c      	sub	sp, #48	; 0x30
 8002bc0:	af04      	add	r7, sp, #16
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	603b      	str	r3, [r7, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f000 fe53 	bl	800387c <pvPortMalloc>
 8002bd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00e      	beq.n	8002bfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002bde:	2054      	movs	r0, #84	; 0x54
 8002be0:	f000 fe4c 	bl	800387c <pvPortMalloc>
 8002be4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	631a      	str	r2, [r3, #48]	; 0x30
 8002bf2:	e005      	b.n	8002c00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002bf4:	6978      	ldr	r0, [r7, #20]
 8002bf6:	f000 ff03 	bl	8003a00 <vPortFree>
 8002bfa:	e001      	b.n	8002c00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d017      	beq.n	8002c36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c0e:	88fa      	ldrh	r2, [r7, #6]
 8002c10:	2300      	movs	r3, #0
 8002c12:	9303      	str	r3, [sp, #12]
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	9302      	str	r3, [sp, #8]
 8002c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1a:	9301      	str	r3, [sp, #4]
 8002c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 f80e 	bl	8002c46 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c2a:	69f8      	ldr	r0, [r7, #28]
 8002c2c:	f000 f88a 	bl	8002d44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c30:	2301      	movs	r3, #1
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	e002      	b.n	8002c3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c3c:	69bb      	ldr	r3, [r7, #24]
	}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3720      	adds	r7, #32
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b088      	sub	sp, #32
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	607a      	str	r2, [r7, #4]
 8002c52:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	f023 0307 	bic.w	r3, r3, #7
 8002c6c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d009      	beq.n	8002c8c <prvInitialiseNewTask+0x46>
 8002c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	e7fe      	b.n	8002c8a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61fb      	str	r3, [r7, #28]
 8002c90:	e012      	b.n	8002cb8 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	4413      	add	r3, r2
 8002c98:	7819      	ldrb	r1, [r3, #0]
 8002c9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3334      	adds	r3, #52	; 0x34
 8002ca2:	460a      	mov	r2, r1
 8002ca4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	4413      	add	r3, r2
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d006      	beq.n	8002cc0 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	61fb      	str	r3, [r7, #28]
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	2b0f      	cmp	r3, #15
 8002cbc:	d9e9      	bls.n	8002c92 <prvInitialiseNewTask+0x4c>
 8002cbe:	e000      	b.n	8002cc2 <prvInitialiseNewTask+0x7c>
		{
			break;
 8002cc0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	2b06      	cmp	r3, #6
 8002cce:	d901      	bls.n	8002cd4 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002cd0:	2306      	movs	r3, #6
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cde:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	3304      	adds	r3, #4
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fe7d 	bl	80029ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf2:	3318      	adds	r3, #24
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fe78 	bl	80029ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d02:	f1c3 0207 	rsb	r2, r3, #7
 8002d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d12:	2200      	movs	r2, #0
 8002d14:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	68f9      	ldr	r1, [r7, #12]
 8002d22:	69b8      	ldr	r0, [r7, #24]
 8002d24:	f000 fc06 	bl	8003534 <pxPortInitialiseStack>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d3a:	bf00      	nop
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d4c:	f000 fcdc 	bl	8003708 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002d50:	4b2a      	ldr	r3, [pc, #168]	; (8002dfc <prvAddNewTaskToReadyList+0xb8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3301      	adds	r3, #1
 8002d56:	4a29      	ldr	r2, [pc, #164]	; (8002dfc <prvAddNewTaskToReadyList+0xb8>)
 8002d58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002d5a:	4b29      	ldr	r3, [pc, #164]	; (8002e00 <prvAddNewTaskToReadyList+0xbc>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d109      	bne.n	8002d76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002d62:	4a27      	ldr	r2, [pc, #156]	; (8002e00 <prvAddNewTaskToReadyList+0xbc>)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d68:	4b24      	ldr	r3, [pc, #144]	; (8002dfc <prvAddNewTaskToReadyList+0xb8>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d110      	bne.n	8002d92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002d70:	f000 fabc 	bl	80032ec <prvInitialiseTaskLists>
 8002d74:	e00d      	b.n	8002d92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002d76:	4b23      	ldr	r3, [pc, #140]	; (8002e04 <prvAddNewTaskToReadyList+0xc0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d7e:	4b20      	ldr	r3, [pc, #128]	; (8002e00 <prvAddNewTaskToReadyList+0xbc>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d802      	bhi.n	8002d92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002d8c:	4a1c      	ldr	r2, [pc, #112]	; (8002e00 <prvAddNewTaskToReadyList+0xbc>)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002d92:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <prvAddNewTaskToReadyList+0xc4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	3301      	adds	r3, #1
 8002d98:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <prvAddNewTaskToReadyList+0xc4>)
 8002d9a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	2201      	movs	r2, #1
 8002da2:	409a      	lsls	r2, r3
 8002da4:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <prvAddNewTaskToReadyList+0xc8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	4a18      	ldr	r2, [pc, #96]	; (8002e0c <prvAddNewTaskToReadyList+0xc8>)
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4a15      	ldr	r2, [pc, #84]	; (8002e10 <prvAddNewTaskToReadyList+0xcc>)
 8002dbc:	441a      	add	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	f7ff fe1c 	bl	8002a02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002dca:	f000 fccb 	bl	8003764 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002dce:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <prvAddNewTaskToReadyList+0xc0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00e      	beq.n	8002df4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <prvAddNewTaskToReadyList+0xbc>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d207      	bcs.n	8002df4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002de4:	4b0b      	ldr	r3, [pc, #44]	; (8002e14 <prvAddNewTaskToReadyList+0xd0>)
 8002de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	200004c8 	.word	0x200004c8
 8002e00:	200003c8 	.word	0x200003c8
 8002e04:	200004d4 	.word	0x200004d4
 8002e08:	200004e4 	.word	0x200004e4
 8002e0c:	200004d0 	.word	0x200004d0
 8002e10:	200003cc 	.word	0x200003cc
 8002e14:	e000ed04 	.word	0xe000ed04

08002e18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d016      	beq.n	8002e58 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e2a:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <vTaskDelay+0x60>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d009      	beq.n	8002e46 <vTaskDelay+0x2e>
 8002e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e36:	f383 8811 	msr	BASEPRI, r3
 8002e3a:	f3bf 8f6f 	isb	sy
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	60bb      	str	r3, [r7, #8]
 8002e44:	e7fe      	b.n	8002e44 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002e46:	f000 f879 	bl	8002f3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fb0b 	bl	8003468 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e52:	f000 f881 	bl	8002f58 <xTaskResumeAll>
 8002e56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d107      	bne.n	8002e6e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <vTaskDelay+0x64>)
 8002e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	f3bf 8f4f 	dsb	sy
 8002e6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	200004f0 	.word	0x200004f0
 8002e7c:	e000ed04 	.word	0xe000ed04

08002e80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08a      	sub	sp, #40	; 0x28
 8002e84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002e8e:	463a      	mov	r2, r7
 8002e90:	1d39      	adds	r1, r7, #4
 8002e92:	f107 0308 	add.w	r3, r7, #8
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fd f962 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002e9c:	6839      	ldr	r1, [r7, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	9202      	str	r2, [sp, #8]
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	9300      	str	r3, [sp, #0]
 8002eaa:	2300      	movs	r3, #0
 8002eac:	460a      	mov	r2, r1
 8002eae:	491d      	ldr	r1, [pc, #116]	; (8002f24 <vTaskStartScheduler+0xa4>)
 8002eb0:	481d      	ldr	r0, [pc, #116]	; (8002f28 <vTaskStartScheduler+0xa8>)
 8002eb2:	f7ff fe2a 	bl	8002b0a <xTaskCreateStatic>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <vTaskStartScheduler+0xac>)
 8002eba:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ebc:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <vTaskStartScheduler+0xac>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	e001      	b.n	8002ece <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d115      	bne.n	8002f00 <vTaskStartScheduler+0x80>
 8002ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed8:	f383 8811 	msr	BASEPRI, r3
 8002edc:	f3bf 8f6f 	isb	sy
 8002ee0:	f3bf 8f4f 	dsb	sy
 8002ee4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002ee6:	4b12      	ldr	r3, [pc, #72]	; (8002f30 <vTaskStartScheduler+0xb0>)
 8002ee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002eee:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <vTaskStartScheduler+0xb4>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002ef4:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <vTaskStartScheduler+0xb8>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002efa:	f000 fb95 	bl	8003628 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002efe:	e00d      	b.n	8002f1c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f06:	d109      	bne.n	8002f1c <vTaskStartScheduler+0x9c>
 8002f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0c:	f383 8811 	msr	BASEPRI, r3
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	e7fe      	b.n	8002f1a <vTaskStartScheduler+0x9a>
}
 8002f1c:	bf00      	nop
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	08004674 	.word	0x08004674
 8002f28:	080032bd 	.word	0x080032bd
 8002f2c:	200004ec 	.word	0x200004ec
 8002f30:	200004e8 	.word	0x200004e8
 8002f34:	200004d4 	.word	0x200004d4
 8002f38:	200004cc 	.word	0x200004cc

08002f3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <vTaskSuspendAll+0x18>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	3301      	adds	r3, #1
 8002f46:	4a03      	ldr	r2, [pc, #12]	; (8002f54 <vTaskSuspendAll+0x18>)
 8002f48:	6013      	str	r3, [r2, #0]
}
 8002f4a:	bf00      	nop
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	200004f0 	.word	0x200004f0

08002f58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002f66:	4b41      	ldr	r3, [pc, #260]	; (800306c <xTaskResumeAll+0x114>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <xTaskResumeAll+0x2a>
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	e7fe      	b.n	8002f80 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002f82:	f000 fbc1 	bl	8003708 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002f86:	4b39      	ldr	r3, [pc, #228]	; (800306c <xTaskResumeAll+0x114>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	4a37      	ldr	r2, [pc, #220]	; (800306c <xTaskResumeAll+0x114>)
 8002f8e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f90:	4b36      	ldr	r3, [pc, #216]	; (800306c <xTaskResumeAll+0x114>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d161      	bne.n	800305c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f98:	4b35      	ldr	r3, [pc, #212]	; (8003070 <xTaskResumeAll+0x118>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d05d      	beq.n	800305c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fa0:	e02e      	b.n	8003000 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002fa2:	4b34      	ldr	r3, [pc, #208]	; (8003074 <xTaskResumeAll+0x11c>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3318      	adds	r3, #24
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fd82 	bl	8002ab8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	3304      	adds	r3, #4
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff fd7d 	bl	8002ab8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	4b2c      	ldr	r3, [pc, #176]	; (8003078 <xTaskResumeAll+0x120>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	4a2a      	ldr	r2, [pc, #168]	; (8003078 <xTaskResumeAll+0x120>)
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4a27      	ldr	r2, [pc, #156]	; (800307c <xTaskResumeAll+0x124>)
 8002fde:	441a      	add	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4610      	mov	r0, r2
 8002fe8:	f7ff fd0b 	bl	8002a02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ff0:	4b23      	ldr	r3, [pc, #140]	; (8003080 <xTaskResumeAll+0x128>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d302      	bcc.n	8003000 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002ffa:	4b22      	ldr	r3, [pc, #136]	; (8003084 <xTaskResumeAll+0x12c>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003000:	4b1c      	ldr	r3, [pc, #112]	; (8003074 <xTaskResumeAll+0x11c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1cc      	bne.n	8002fa2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800300e:	f000 fa07 	bl	8003420 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003012:	4b1d      	ldr	r3, [pc, #116]	; (8003088 <xTaskResumeAll+0x130>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d010      	beq.n	8003040 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800301e:	f000 f837 	bl	8003090 <xTaskIncrementTick>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d002      	beq.n	800302e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003028:	4b16      	ldr	r3, [pc, #88]	; (8003084 <xTaskResumeAll+0x12c>)
 800302a:	2201      	movs	r2, #1
 800302c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3b01      	subs	r3, #1
 8003032:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f1      	bne.n	800301e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800303a:	4b13      	ldr	r3, [pc, #76]	; (8003088 <xTaskResumeAll+0x130>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003040:	4b10      	ldr	r3, [pc, #64]	; (8003084 <xTaskResumeAll+0x12c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d009      	beq.n	800305c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003048:	2301      	movs	r3, #1
 800304a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800304c:	4b0f      	ldr	r3, [pc, #60]	; (800308c <xTaskResumeAll+0x134>)
 800304e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003052:	601a      	str	r2, [r3, #0]
 8003054:	f3bf 8f4f 	dsb	sy
 8003058:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800305c:	f000 fb82 	bl	8003764 <vPortExitCritical>

	return xAlreadyYielded;
 8003060:	68bb      	ldr	r3, [r7, #8]
}
 8003062:	4618      	mov	r0, r3
 8003064:	3710      	adds	r7, #16
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	200004f0 	.word	0x200004f0
 8003070:	200004c8 	.word	0x200004c8
 8003074:	20000488 	.word	0x20000488
 8003078:	200004d0 	.word	0x200004d0
 800307c:	200003cc 	.word	0x200003cc
 8003080:	200003c8 	.word	0x200003c8
 8003084:	200004dc 	.word	0x200004dc
 8003088:	200004d8 	.word	0x200004d8
 800308c:	e000ed04 	.word	0xe000ed04

08003090 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800309a:	4b50      	ldr	r3, [pc, #320]	; (80031dc <xTaskIncrementTick+0x14c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	f040 808c 	bne.w	80031bc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80030a4:	4b4e      	ldr	r3, [pc, #312]	; (80031e0 <xTaskIncrementTick+0x150>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3301      	adds	r3, #1
 80030aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80030ac:	4a4c      	ldr	r2, [pc, #304]	; (80031e0 <xTaskIncrementTick+0x150>)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d11f      	bne.n	80030f8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80030b8:	4b4a      	ldr	r3, [pc, #296]	; (80031e4 <xTaskIncrementTick+0x154>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d009      	beq.n	80030d6 <xTaskIncrementTick+0x46>
 80030c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c6:	f383 8811 	msr	BASEPRI, r3
 80030ca:	f3bf 8f6f 	isb	sy
 80030ce:	f3bf 8f4f 	dsb	sy
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	e7fe      	b.n	80030d4 <xTaskIncrementTick+0x44>
 80030d6:	4b43      	ldr	r3, [pc, #268]	; (80031e4 <xTaskIncrementTick+0x154>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	4b42      	ldr	r3, [pc, #264]	; (80031e8 <xTaskIncrementTick+0x158>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a40      	ldr	r2, [pc, #256]	; (80031e4 <xTaskIncrementTick+0x154>)
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4a40      	ldr	r2, [pc, #256]	; (80031e8 <xTaskIncrementTick+0x158>)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6013      	str	r3, [r2, #0]
 80030ea:	4b40      	ldr	r3, [pc, #256]	; (80031ec <xTaskIncrementTick+0x15c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3301      	adds	r3, #1
 80030f0:	4a3e      	ldr	r2, [pc, #248]	; (80031ec <xTaskIncrementTick+0x15c>)
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	f000 f994 	bl	8003420 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80030f8:	4b3d      	ldr	r3, [pc, #244]	; (80031f0 <xTaskIncrementTick+0x160>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d34d      	bcc.n	800319e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003102:	4b38      	ldr	r3, [pc, #224]	; (80031e4 <xTaskIncrementTick+0x154>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <xTaskIncrementTick+0x80>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <xTaskIncrementTick+0x82>
 8003110:	2300      	movs	r3, #0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d004      	beq.n	8003120 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003116:	4b36      	ldr	r3, [pc, #216]	; (80031f0 <xTaskIncrementTick+0x160>)
 8003118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800311c:	601a      	str	r2, [r3, #0]
					break;
 800311e:	e03e      	b.n	800319e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003120:	4b30      	ldr	r3, [pc, #192]	; (80031e4 <xTaskIncrementTick+0x154>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	429a      	cmp	r2, r3
 8003136:	d203      	bcs.n	8003140 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003138:	4a2d      	ldr	r2, [pc, #180]	; (80031f0 <xTaskIncrementTick+0x160>)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6013      	str	r3, [r2, #0]
						break;
 800313e:	e02e      	b.n	800319e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	3304      	adds	r3, #4
 8003144:	4618      	mov	r0, r3
 8003146:	f7ff fcb7 	bl	8002ab8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314e:	2b00      	cmp	r3, #0
 8003150:	d004      	beq.n	800315c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	3318      	adds	r3, #24
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff fcae 	bl	8002ab8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003160:	2201      	movs	r2, #1
 8003162:	409a      	lsls	r2, r3
 8003164:	4b23      	ldr	r3, [pc, #140]	; (80031f4 <xTaskIncrementTick+0x164>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4313      	orrs	r3, r2
 800316a:	4a22      	ldr	r2, [pc, #136]	; (80031f4 <xTaskIncrementTick+0x164>)
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003172:	4613      	mov	r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4a1f      	ldr	r2, [pc, #124]	; (80031f8 <xTaskIncrementTick+0x168>)
 800317c:	441a      	add	r2, r3
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	3304      	adds	r3, #4
 8003182:	4619      	mov	r1, r3
 8003184:	4610      	mov	r0, r2
 8003186:	f7ff fc3c 	bl	8002a02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800318e:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <xTaskIncrementTick+0x16c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	429a      	cmp	r2, r3
 8003196:	d3b4      	bcc.n	8003102 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003198:	2301      	movs	r3, #1
 800319a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800319c:	e7b1      	b.n	8003102 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800319e:	4b17      	ldr	r3, [pc, #92]	; (80031fc <xTaskIncrementTick+0x16c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a4:	4914      	ldr	r1, [pc, #80]	; (80031f8 <xTaskIncrementTick+0x168>)
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d907      	bls.n	80031c6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80031b6:	2301      	movs	r3, #1
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	e004      	b.n	80031c6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80031bc:	4b10      	ldr	r3, [pc, #64]	; (8003200 <xTaskIncrementTick+0x170>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	3301      	adds	r3, #1
 80031c2:	4a0f      	ldr	r2, [pc, #60]	; (8003200 <xTaskIncrementTick+0x170>)
 80031c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80031c6:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <xTaskIncrementTick+0x174>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80031ce:	2301      	movs	r3, #1
 80031d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80031d2:	697b      	ldr	r3, [r7, #20]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	200004f0 	.word	0x200004f0
 80031e0:	200004cc 	.word	0x200004cc
 80031e4:	20000480 	.word	0x20000480
 80031e8:	20000484 	.word	0x20000484
 80031ec:	200004e0 	.word	0x200004e0
 80031f0:	200004e8 	.word	0x200004e8
 80031f4:	200004d0 	.word	0x200004d0
 80031f8:	200003cc 	.word	0x200003cc
 80031fc:	200003c8 	.word	0x200003c8
 8003200:	200004d8 	.word	0x200004d8
 8003204:	200004dc 	.word	0x200004dc

08003208 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800320e:	4b26      	ldr	r3, [pc, #152]	; (80032a8 <vTaskSwitchContext+0xa0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003216:	4b25      	ldr	r3, [pc, #148]	; (80032ac <vTaskSwitchContext+0xa4>)
 8003218:	2201      	movs	r2, #1
 800321a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800321c:	e03e      	b.n	800329c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800321e:	4b23      	ldr	r3, [pc, #140]	; (80032ac <vTaskSwitchContext+0xa4>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003224:	4b22      	ldr	r3, [pc, #136]	; (80032b0 <vTaskSwitchContext+0xa8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	fab3 f383 	clz	r3, r3
 8003230:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003232:	7afb      	ldrb	r3, [r7, #11]
 8003234:	f1c3 031f 	rsb	r3, r3, #31
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	491e      	ldr	r1, [pc, #120]	; (80032b4 <vTaskSwitchContext+0xac>)
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d109      	bne.n	8003262 <vTaskSwitchContext+0x5a>
	__asm volatile
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	607b      	str	r3, [r7, #4]
 8003260:	e7fe      	b.n	8003260 <vTaskSwitchContext+0x58>
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4a11      	ldr	r2, [pc, #68]	; (80032b4 <vTaskSwitchContext+0xac>)
 800326e:	4413      	add	r3, r2
 8003270:	613b      	str	r3, [r7, #16]
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	605a      	str	r2, [r3, #4]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	3308      	adds	r3, #8
 8003284:	429a      	cmp	r2, r3
 8003286:	d104      	bne.n	8003292 <vTaskSwitchContext+0x8a>
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4a07      	ldr	r2, [pc, #28]	; (80032b8 <vTaskSwitchContext+0xb0>)
 800329a:	6013      	str	r3, [r2, #0]
}
 800329c:	bf00      	nop
 800329e:	371c      	adds	r7, #28
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	200004f0 	.word	0x200004f0
 80032ac:	200004dc 	.word	0x200004dc
 80032b0:	200004d0 	.word	0x200004d0
 80032b4:	200003cc 	.word	0x200003cc
 80032b8:	200003c8 	.word	0x200003c8

080032bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80032c4:	f000 f852 	bl	800336c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80032c8:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <prvIdleTask+0x28>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d9f9      	bls.n	80032c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <prvIdleTask+0x2c>)
 80032d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80032e0:	e7f0      	b.n	80032c4 <prvIdleTask+0x8>
 80032e2:	bf00      	nop
 80032e4:	200003cc 	.word	0x200003cc
 80032e8:	e000ed04 	.word	0xe000ed04

080032ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032f2:	2300      	movs	r3, #0
 80032f4:	607b      	str	r3, [r7, #4]
 80032f6:	e00c      	b.n	8003312 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4a12      	ldr	r2, [pc, #72]	; (800334c <prvInitialiseTaskLists+0x60>)
 8003304:	4413      	add	r3, r2
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff fb50 	bl	80029ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3301      	adds	r3, #1
 8003310:	607b      	str	r3, [r7, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b06      	cmp	r3, #6
 8003316:	d9ef      	bls.n	80032f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003318:	480d      	ldr	r0, [pc, #52]	; (8003350 <prvInitialiseTaskLists+0x64>)
 800331a:	f7ff fb47 	bl	80029ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800331e:	480d      	ldr	r0, [pc, #52]	; (8003354 <prvInitialiseTaskLists+0x68>)
 8003320:	f7ff fb44 	bl	80029ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003324:	480c      	ldr	r0, [pc, #48]	; (8003358 <prvInitialiseTaskLists+0x6c>)
 8003326:	f7ff fb41 	bl	80029ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800332a:	480c      	ldr	r0, [pc, #48]	; (800335c <prvInitialiseTaskLists+0x70>)
 800332c:	f7ff fb3e 	bl	80029ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003330:	480b      	ldr	r0, [pc, #44]	; (8003360 <prvInitialiseTaskLists+0x74>)
 8003332:	f7ff fb3b 	bl	80029ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003336:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <prvInitialiseTaskLists+0x78>)
 8003338:	4a05      	ldr	r2, [pc, #20]	; (8003350 <prvInitialiseTaskLists+0x64>)
 800333a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <prvInitialiseTaskLists+0x7c>)
 800333e:	4a05      	ldr	r2, [pc, #20]	; (8003354 <prvInitialiseTaskLists+0x68>)
 8003340:	601a      	str	r2, [r3, #0]
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	200003cc 	.word	0x200003cc
 8003350:	20000458 	.word	0x20000458
 8003354:	2000046c 	.word	0x2000046c
 8003358:	20000488 	.word	0x20000488
 800335c:	2000049c 	.word	0x2000049c
 8003360:	200004b4 	.word	0x200004b4
 8003364:	20000480 	.word	0x20000480
 8003368:	20000484 	.word	0x20000484

0800336c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003372:	e019      	b.n	80033a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003374:	f000 f9c8 	bl	8003708 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003378:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <prvCheckTasksWaitingTermination+0x4c>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	3304      	adds	r3, #4
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff fb97 	bl	8002ab8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800338a:	4b0c      	ldr	r3, [pc, #48]	; (80033bc <prvCheckTasksWaitingTermination+0x50>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	3b01      	subs	r3, #1
 8003390:	4a0a      	ldr	r2, [pc, #40]	; (80033bc <prvCheckTasksWaitingTermination+0x50>)
 8003392:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <prvCheckTasksWaitingTermination+0x54>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	3b01      	subs	r3, #1
 800339a:	4a09      	ldr	r2, [pc, #36]	; (80033c0 <prvCheckTasksWaitingTermination+0x54>)
 800339c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800339e:	f000 f9e1 	bl	8003764 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f80e 	bl	80033c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <prvCheckTasksWaitingTermination+0x54>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1e1      	bne.n	8003374 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80033b0:	bf00      	nop
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	2000049c 	.word	0x2000049c
 80033bc:	200004c8 	.word	0x200004c8
 80033c0:	200004b0 	.word	0x200004b0

080033c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d108      	bne.n	80033e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fb10 	bl	8003a00 <vPortFree>
				vPortFree( pxTCB );
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 fb0d 	bl	8003a00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80033e6:	e017      	b.n	8003418 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d103      	bne.n	80033fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 fb04 	bl	8003a00 <vPortFree>
	}
 80033f8:	e00e      	b.n	8003418 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003400:	2b02      	cmp	r3, #2
 8003402:	d009      	beq.n	8003418 <prvDeleteTCB+0x54>
 8003404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	e7fe      	b.n	8003416 <prvDeleteTCB+0x52>
	}
 8003418:	bf00      	nop
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003426:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <prvResetNextTaskUnblockTime+0x40>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <prvResetNextTaskUnblockTime+0x14>
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <prvResetNextTaskUnblockTime+0x16>
 8003434:	2300      	movs	r3, #0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d004      	beq.n	8003444 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800343a:	4b0a      	ldr	r3, [pc, #40]	; (8003464 <prvResetNextTaskUnblockTime+0x44>)
 800343c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003440:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003442:	e008      	b.n	8003456 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003444:	4b06      	ldr	r3, [pc, #24]	; (8003460 <prvResetNextTaskUnblockTime+0x40>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68db      	ldr	r3, [r3, #12]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	4a04      	ldr	r2, [pc, #16]	; (8003464 <prvResetNextTaskUnblockTime+0x44>)
 8003454:	6013      	str	r3, [r2, #0]
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr
 8003460:	20000480 	.word	0x20000480
 8003464:	200004e8 	.word	0x200004e8

08003468 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003472:	4b29      	ldr	r3, [pc, #164]	; (8003518 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003478:	4b28      	ldr	r3, [pc, #160]	; (800351c <prvAddCurrentTaskToDelayedList+0xb4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	3304      	adds	r3, #4
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fb1a 	bl	8002ab8 <uxListRemove>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10b      	bne.n	80034a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800348a:	4b24      	ldr	r3, [pc, #144]	; (800351c <prvAddCurrentTaskToDelayedList+0xb4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	2201      	movs	r2, #1
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43da      	mvns	r2, r3
 8003498:	4b21      	ldr	r3, [pc, #132]	; (8003520 <prvAddCurrentTaskToDelayedList+0xb8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4013      	ands	r3, r2
 800349e:	4a20      	ldr	r2, [pc, #128]	; (8003520 <prvAddCurrentTaskToDelayedList+0xb8>)
 80034a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034a8:	d10a      	bne.n	80034c0 <prvAddCurrentTaskToDelayedList+0x58>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d007      	beq.n	80034c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034b0:	4b1a      	ldr	r3, [pc, #104]	; (800351c <prvAddCurrentTaskToDelayedList+0xb4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	3304      	adds	r3, #4
 80034b6:	4619      	mov	r1, r3
 80034b8:	481a      	ldr	r0, [pc, #104]	; (8003524 <prvAddCurrentTaskToDelayedList+0xbc>)
 80034ba:	f7ff faa2 	bl	8002a02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80034be:	e026      	b.n	800350e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4413      	add	r3, r2
 80034c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034c8:	4b14      	ldr	r3, [pc, #80]	; (800351c <prvAddCurrentTaskToDelayedList+0xb4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d209      	bcs.n	80034ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034d8:	4b13      	ldr	r3, [pc, #76]	; (8003528 <prvAddCurrentTaskToDelayedList+0xc0>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	4b0f      	ldr	r3, [pc, #60]	; (800351c <prvAddCurrentTaskToDelayedList+0xb4>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3304      	adds	r3, #4
 80034e2:	4619      	mov	r1, r3
 80034e4:	4610      	mov	r0, r2
 80034e6:	f7ff faaf 	bl	8002a48 <vListInsert>
}
 80034ea:	e010      	b.n	800350e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034ec:	4b0f      	ldr	r3, [pc, #60]	; (800352c <prvAddCurrentTaskToDelayedList+0xc4>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	4b0a      	ldr	r3, [pc, #40]	; (800351c <prvAddCurrentTaskToDelayedList+0xb4>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3304      	adds	r3, #4
 80034f6:	4619      	mov	r1, r3
 80034f8:	4610      	mov	r0, r2
 80034fa:	f7ff faa5 	bl	8002a48 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80034fe:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	429a      	cmp	r2, r3
 8003506:	d202      	bcs.n	800350e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003508:	4a09      	ldr	r2, [pc, #36]	; (8003530 <prvAddCurrentTaskToDelayedList+0xc8>)
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	6013      	str	r3, [r2, #0]
}
 800350e:	bf00      	nop
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	200004cc 	.word	0x200004cc
 800351c:	200003c8 	.word	0x200003c8
 8003520:	200004d0 	.word	0x200004d0
 8003524:	200004b4 	.word	0x200004b4
 8003528:	20000484 	.word	0x20000484
 800352c:	20000480 	.word	0x20000480
 8003530:	200004e8 	.word	0x200004e8

08003534 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	3b04      	subs	r3, #4
 8003544:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800354c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3b04      	subs	r3, #4
 8003552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f023 0201 	bic.w	r2, r3, #1
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	3b04      	subs	r3, #4
 8003562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003564:	4a08      	ldr	r2, [pc, #32]	; (8003588 <pxPortInitialiseStack+0x54>)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	3b14      	subs	r3, #20
 800356e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3b20      	subs	r3, #32
 800357a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800357c:	68fb      	ldr	r3, [r7, #12]
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr
 8003588:	0800358d 	.word	0x0800358d

0800358c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003592:	2300      	movs	r3, #0
 8003594:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003596:	4b10      	ldr	r3, [pc, #64]	; (80035d8 <prvTaskExitError+0x4c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800359e:	d009      	beq.n	80035b4 <prvTaskExitError+0x28>
 80035a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	60fb      	str	r3, [r7, #12]
 80035b2:	e7fe      	b.n	80035b2 <prvTaskExitError+0x26>
 80035b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b8:	f383 8811 	msr	BASEPRI, r3
 80035bc:	f3bf 8f6f 	isb	sy
 80035c0:	f3bf 8f4f 	dsb	sy
 80035c4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80035c6:	bf00      	nop
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0fc      	beq.n	80035c8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80035ce:	bf00      	nop
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr
 80035d8:	200000e8 	.word	0x200000e8
 80035dc:	00000000 	.word	0x00000000

080035e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80035e0:	4b07      	ldr	r3, [pc, #28]	; (8003600 <pxCurrentTCBConst2>)
 80035e2:	6819      	ldr	r1, [r3, #0]
 80035e4:	6808      	ldr	r0, [r1, #0]
 80035e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80035ea:	f380 8809 	msr	PSP, r0
 80035ee:	f3bf 8f6f 	isb	sy
 80035f2:	f04f 0000 	mov.w	r0, #0
 80035f6:	f380 8811 	msr	BASEPRI, r0
 80035fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80035fe:	4770      	bx	lr

08003600 <pxCurrentTCBConst2>:
 8003600:	200003c8 	.word	0x200003c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop

08003608 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003608:	4806      	ldr	r0, [pc, #24]	; (8003624 <prvPortStartFirstTask+0x1c>)
 800360a:	6800      	ldr	r0, [r0, #0]
 800360c:	6800      	ldr	r0, [r0, #0]
 800360e:	f380 8808 	msr	MSP, r0
 8003612:	b662      	cpsie	i
 8003614:	b661      	cpsie	f
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	df00      	svc	0
 8003620:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003622:	bf00      	nop
 8003624:	e000ed08 	.word	0xe000ed08

08003628 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800362e:	4b31      	ldr	r3, [pc, #196]	; (80036f4 <xPortStartScheduler+0xcc>)
 8003630:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	b2db      	uxtb	r3, r3
 8003638:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	22ff      	movs	r2, #255	; 0xff
 800363e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	b2db      	uxtb	r3, r3
 8003646:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003650:	b2da      	uxtb	r2, r3
 8003652:	4b29      	ldr	r3, [pc, #164]	; (80036f8 <xPortStartScheduler+0xd0>)
 8003654:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003656:	4b29      	ldr	r3, [pc, #164]	; (80036fc <xPortStartScheduler+0xd4>)
 8003658:	2207      	movs	r2, #7
 800365a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800365c:	e009      	b.n	8003672 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800365e:	4b27      	ldr	r3, [pc, #156]	; (80036fc <xPortStartScheduler+0xd4>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3b01      	subs	r3, #1
 8003664:	4a25      	ldr	r2, [pc, #148]	; (80036fc <xPortStartScheduler+0xd4>)
 8003666:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003668:	78fb      	ldrb	r3, [r7, #3]
 800366a:	b2db      	uxtb	r3, r3
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	b2db      	uxtb	r3, r3
 8003670:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367a:	2b80      	cmp	r3, #128	; 0x80
 800367c:	d0ef      	beq.n	800365e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800367e:	4b1f      	ldr	r3, [pc, #124]	; (80036fc <xPortStartScheduler+0xd4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f1c3 0307 	rsb	r3, r3, #7
 8003686:	2b04      	cmp	r3, #4
 8003688:	d009      	beq.n	800369e <xPortStartScheduler+0x76>
 800368a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	e7fe      	b.n	800369c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800369e:	4b17      	ldr	r3, [pc, #92]	; (80036fc <xPortStartScheduler+0xd4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	021b      	lsls	r3, r3, #8
 80036a4:	4a15      	ldr	r2, [pc, #84]	; (80036fc <xPortStartScheduler+0xd4>)
 80036a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80036a8:	4b14      	ldr	r3, [pc, #80]	; (80036fc <xPortStartScheduler+0xd4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036b0:	4a12      	ldr	r2, [pc, #72]	; (80036fc <xPortStartScheduler+0xd4>)
 80036b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80036bc:	4b10      	ldr	r3, [pc, #64]	; (8003700 <xPortStartScheduler+0xd8>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a0f      	ldr	r2, [pc, #60]	; (8003700 <xPortStartScheduler+0xd8>)
 80036c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80036c8:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <xPortStartScheduler+0xd8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a0c      	ldr	r2, [pc, #48]	; (8003700 <xPortStartScheduler+0xd8>)
 80036ce:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80036d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80036d4:	f000 f8b0 	bl	8003838 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80036d8:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <xPortStartScheduler+0xdc>)
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80036de:	f7ff ff93 	bl	8003608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80036e2:	f7ff fd91 	bl	8003208 <vTaskSwitchContext>
	prvTaskExitError();
 80036e6:	f7ff ff51 	bl	800358c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	e000e400 	.word	0xe000e400
 80036f8:	200004f4 	.word	0x200004f4
 80036fc:	200004f8 	.word	0x200004f8
 8003700:	e000ed20 	.word	0xe000ed20
 8003704:	200000e8 	.word	0x200000e8

08003708 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003720:	4b0e      	ldr	r3, [pc, #56]	; (800375c <vPortEnterCritical+0x54>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3301      	adds	r3, #1
 8003726:	4a0d      	ldr	r2, [pc, #52]	; (800375c <vPortEnterCritical+0x54>)
 8003728:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800372a:	4b0c      	ldr	r3, [pc, #48]	; (800375c <vPortEnterCritical+0x54>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d10e      	bne.n	8003750 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003732:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <vPortEnterCritical+0x58>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d009      	beq.n	8003750 <vPortEnterCritical+0x48>
 800373c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003740:	f383 8811 	msr	BASEPRI, r3
 8003744:	f3bf 8f6f 	isb	sy
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	603b      	str	r3, [r7, #0]
 800374e:	e7fe      	b.n	800374e <vPortEnterCritical+0x46>
	}
}
 8003750:	bf00      	nop
 8003752:	370c      	adds	r7, #12
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	200000e8 	.word	0x200000e8
 8003760:	e000ed04 	.word	0xe000ed04

08003764 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800376a:	4b10      	ldr	r3, [pc, #64]	; (80037ac <vPortExitCritical+0x48>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <vPortExitCritical+0x22>
 8003772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003776:	f383 8811 	msr	BASEPRI, r3
 800377a:	f3bf 8f6f 	isb	sy
 800377e:	f3bf 8f4f 	dsb	sy
 8003782:	607b      	str	r3, [r7, #4]
 8003784:	e7fe      	b.n	8003784 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003786:	4b09      	ldr	r3, [pc, #36]	; (80037ac <vPortExitCritical+0x48>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3b01      	subs	r3, #1
 800378c:	4a07      	ldr	r2, [pc, #28]	; (80037ac <vPortExitCritical+0x48>)
 800378e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003790:	4b06      	ldr	r3, [pc, #24]	; (80037ac <vPortExitCritical+0x48>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d104      	bne.n	80037a2 <vPortExitCritical+0x3e>
 8003798:	2300      	movs	r3, #0
 800379a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr
 80037ac:	200000e8 	.word	0x200000e8

080037b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80037b0:	f3ef 8009 	mrs	r0, PSP
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	4b0d      	ldr	r3, [pc, #52]	; (80037f0 <pxCurrentTCBConst>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037c0:	6010      	str	r0, [r2, #0]
 80037c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80037c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80037ca:	f380 8811 	msr	BASEPRI, r0
 80037ce:	f7ff fd1b 	bl	8003208 <vTaskSwitchContext>
 80037d2:	f04f 0000 	mov.w	r0, #0
 80037d6:	f380 8811 	msr	BASEPRI, r0
 80037da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80037de:	6819      	ldr	r1, [r3, #0]
 80037e0:	6808      	ldr	r0, [r1, #0]
 80037e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037e6:	f380 8809 	msr	PSP, r0
 80037ea:	f3bf 8f6f 	isb	sy
 80037ee:	4770      	bx	lr

080037f0 <pxCurrentTCBConst>:
 80037f0:	200003c8 	.word	0x200003c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80037f4:	bf00      	nop
 80037f6:	bf00      	nop

080037f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
	__asm volatile
 80037fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003802:	f383 8811 	msr	BASEPRI, r3
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003810:	f7ff fc3e 	bl	8003090 <xTaskIncrementTick>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <SysTick_Handler+0x3c>)
 800381c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	2300      	movs	r3, #0
 8003824:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800382c:	bf00      	nop
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	e000ed04 	.word	0xe000ed04

08003838 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <vPortSetupTimerInterrupt+0x30>)
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003842:	4b0a      	ldr	r3, [pc, #40]	; (800386c <vPortSetupTimerInterrupt+0x34>)
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003848:	4b09      	ldr	r3, [pc, #36]	; (8003870 <vPortSetupTimerInterrupt+0x38>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a09      	ldr	r2, [pc, #36]	; (8003874 <vPortSetupTimerInterrupt+0x3c>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	099b      	lsrs	r3, r3, #6
 8003854:	4a08      	ldr	r2, [pc, #32]	; (8003878 <vPortSetupTimerInterrupt+0x40>)
 8003856:	3b01      	subs	r3, #1
 8003858:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800385a:	4b03      	ldr	r3, [pc, #12]	; (8003868 <vPortSetupTimerInterrupt+0x30>)
 800385c:	2207      	movs	r2, #7
 800385e:	601a      	str	r2, [r3, #0]
}
 8003860:	bf00      	nop
 8003862:	46bd      	mov	sp, r7
 8003864:	bc80      	pop	{r7}
 8003866:	4770      	bx	lr
 8003868:	e000e010 	.word	0xe000e010
 800386c:	e000e018 	.word	0xe000e018
 8003870:	200000dc 	.word	0x200000dc
 8003874:	10624dd3 	.word	0x10624dd3
 8003878:	e000e014 	.word	0xe000e014

0800387c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08a      	sub	sp, #40	; 0x28
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003884:	2300      	movs	r3, #0
 8003886:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003888:	f7ff fb58 	bl	8002f3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800388c:	4b57      	ldr	r3, [pc, #348]	; (80039ec <pvPortMalloc+0x170>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003894:	f000 f90c 	bl	8003ab0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003898:	4b55      	ldr	r3, [pc, #340]	; (80039f0 <pvPortMalloc+0x174>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4013      	ands	r3, r2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f040 808c 	bne.w	80039be <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d01c      	beq.n	80038e6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80038ac:	2208      	movs	r2, #8
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4413      	add	r3, r2
 80038b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d013      	beq.n	80038e6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f023 0307 	bic.w	r3, r3, #7
 80038c4:	3308      	adds	r3, #8
 80038c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d009      	beq.n	80038e6 <pvPortMalloc+0x6a>
	__asm volatile
 80038d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d6:	f383 8811 	msr	BASEPRI, r3
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	e7fe      	b.n	80038e4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d068      	beq.n	80039be <pvPortMalloc+0x142>
 80038ec:	4b41      	ldr	r3, [pc, #260]	; (80039f4 <pvPortMalloc+0x178>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d863      	bhi.n	80039be <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80038f6:	4b40      	ldr	r3, [pc, #256]	; (80039f8 <pvPortMalloc+0x17c>)
 80038f8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80038fa:	4b3f      	ldr	r3, [pc, #252]	; (80039f8 <pvPortMalloc+0x17c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003900:	e004      	b.n	800390c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	429a      	cmp	r2, r3
 8003914:	d903      	bls.n	800391e <pvPortMalloc+0xa2>
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f1      	bne.n	8003902 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800391e:	4b33      	ldr	r3, [pc, #204]	; (80039ec <pvPortMalloc+0x170>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003924:	429a      	cmp	r2, r3
 8003926:	d04a      	beq.n	80039be <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2208      	movs	r2, #8
 800392e:	4413      	add	r3, r2
 8003930:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	1ad2      	subs	r2, r2, r3
 8003942:	2308      	movs	r3, #8
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	429a      	cmp	r2, r3
 8003948:	d91e      	bls.n	8003988 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800394a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4413      	add	r3, r2
 8003950:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	2b00      	cmp	r3, #0
 800395a:	d009      	beq.n	8003970 <pvPortMalloc+0xf4>
 800395c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	e7fe      	b.n	800396e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	1ad2      	subs	r2, r2, r3
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003982:	69b8      	ldr	r0, [r7, #24]
 8003984:	f000 f8f6 	bl	8003b74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003988:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <pvPortMalloc+0x178>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	4a18      	ldr	r2, [pc, #96]	; (80039f4 <pvPortMalloc+0x178>)
 8003994:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003996:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <pvPortMalloc+0x178>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4b18      	ldr	r3, [pc, #96]	; (80039fc <pvPortMalloc+0x180>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d203      	bcs.n	80039aa <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80039a2:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <pvPortMalloc+0x178>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a15      	ldr	r2, [pc, #84]	; (80039fc <pvPortMalloc+0x180>)
 80039a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <pvPortMalloc+0x174>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80039be:	f7ff facb 	bl	8002f58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d009      	beq.n	80039e0 <pvPortMalloc+0x164>
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	e7fe      	b.n	80039de <pvPortMalloc+0x162>
	return pvReturn;
 80039e0:	69fb      	ldr	r3, [r7, #28]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3728      	adds	r7, #40	; 0x28
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20001104 	.word	0x20001104
 80039f0:	20001110 	.word	0x20001110
 80039f4:	20001108 	.word	0x20001108
 80039f8:	200010fc 	.word	0x200010fc
 80039fc:	2000110c 	.word	0x2000110c

08003a00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d046      	beq.n	8003aa0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003a12:	2308      	movs	r3, #8
 8003a14:	425b      	negs	r3, r3
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	4413      	add	r3, r2
 8003a1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	4b20      	ldr	r3, [pc, #128]	; (8003aa8 <vPortFree+0xa8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <vPortFree+0x42>
 8003a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a32:	f383 8811 	msr	BASEPRI, r3
 8003a36:	f3bf 8f6f 	isb	sy
 8003a3a:	f3bf 8f4f 	dsb	sy
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	e7fe      	b.n	8003a40 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <vPortFree+0x5e>
 8003a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	60bb      	str	r3, [r7, #8]
 8003a5c:	e7fe      	b.n	8003a5c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <vPortFree+0xa8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d019      	beq.n	8003aa0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d115      	bne.n	8003aa0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <vPortFree+0xa8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	401a      	ands	r2, r3
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003a84:	f7ff fa5a 	bl	8002f3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	4b07      	ldr	r3, [pc, #28]	; (8003aac <vPortFree+0xac>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4413      	add	r3, r2
 8003a92:	4a06      	ldr	r2, [pc, #24]	; (8003aac <vPortFree+0xac>)
 8003a94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a96:	6938      	ldr	r0, [r7, #16]
 8003a98:	f000 f86c 	bl	8003b74 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003a9c:	f7ff fa5c 	bl	8002f58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003aa0:	bf00      	nop
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20001110 	.word	0x20001110
 8003aac:	20001108 	.word	0x20001108

08003ab0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003ab6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003aba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003abc:	4b27      	ldr	r3, [pc, #156]	; (8003b5c <prvHeapInit+0xac>)
 8003abe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00c      	beq.n	8003ae4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	3307      	adds	r3, #7
 8003ace:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0307 	bic.w	r3, r3, #7
 8003ad6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	4a1f      	ldr	r2, [pc, #124]	; (8003b5c <prvHeapInit+0xac>)
 8003ae0:	4413      	add	r3, r2
 8003ae2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ae8:	4a1d      	ldr	r2, [pc, #116]	; (8003b60 <prvHeapInit+0xb0>)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003aee:	4b1c      	ldr	r3, [pc, #112]	; (8003b60 <prvHeapInit+0xb0>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	4413      	add	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003afc:	2208      	movs	r2, #8
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f023 0307 	bic.w	r3, r3, #7
 8003b0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4a15      	ldr	r2, [pc, #84]	; (8003b64 <prvHeapInit+0xb4>)
 8003b10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003b12:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <prvHeapInit+0xb4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2200      	movs	r2, #0
 8003b18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b1a:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <prvHeapInit+0xb4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	1ad2      	subs	r2, r2, r3
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b30:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <prvHeapInit+0xb4>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	4a0a      	ldr	r2, [pc, #40]	; (8003b68 <prvHeapInit+0xb8>)
 8003b3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	4a09      	ldr	r2, [pc, #36]	; (8003b6c <prvHeapInit+0xbc>)
 8003b46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b48:	4b09      	ldr	r3, [pc, #36]	; (8003b70 <prvHeapInit+0xc0>)
 8003b4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003b4e:	601a      	str	r2, [r3, #0]
}
 8003b50:	bf00      	nop
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	200004fc 	.word	0x200004fc
 8003b60:	200010fc 	.word	0x200010fc
 8003b64:	20001104 	.word	0x20001104
 8003b68:	2000110c 	.word	0x2000110c
 8003b6c:	20001108 	.word	0x20001108
 8003b70:	20001110 	.word	0x20001110

08003b74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b7c:	4b27      	ldr	r3, [pc, #156]	; (8003c1c <prvInsertBlockIntoFreeList+0xa8>)
 8003b7e:	60fb      	str	r3, [r7, #12]
 8003b80:	e002      	b.n	8003b88 <prvInsertBlockIntoFreeList+0x14>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d8f7      	bhi.n	8003b82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d108      	bne.n	8003bb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	441a      	add	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	441a      	add	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d118      	bne.n	8003bfc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <prvInsertBlockIntoFreeList+0xac>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d00d      	beq.n	8003bf2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	441a      	add	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	e008      	b.n	8003c04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <prvInsertBlockIntoFreeList+0xac>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	e003      	b.n	8003c04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d002      	beq.n	8003c12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c12:	bf00      	nop
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bc80      	pop	{r7}
 8003c1a:	4770      	bx	lr
 8003c1c:	200010fc 	.word	0x200010fc
 8003c20:	20001104 	.word	0x20001104

08003c24 <__errno>:
 8003c24:	4b01      	ldr	r3, [pc, #4]	; (8003c2c <__errno+0x8>)
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	200000ec 	.word	0x200000ec

08003c30 <__libc_init_array>:
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	2500      	movs	r5, #0
 8003c34:	4e0c      	ldr	r6, [pc, #48]	; (8003c68 <__libc_init_array+0x38>)
 8003c36:	4c0d      	ldr	r4, [pc, #52]	; (8003c6c <__libc_init_array+0x3c>)
 8003c38:	1ba4      	subs	r4, r4, r6
 8003c3a:	10a4      	asrs	r4, r4, #2
 8003c3c:	42a5      	cmp	r5, r4
 8003c3e:	d109      	bne.n	8003c54 <__libc_init_array+0x24>
 8003c40:	f000 fce2 	bl	8004608 <_init>
 8003c44:	2500      	movs	r5, #0
 8003c46:	4e0a      	ldr	r6, [pc, #40]	; (8003c70 <__libc_init_array+0x40>)
 8003c48:	4c0a      	ldr	r4, [pc, #40]	; (8003c74 <__libc_init_array+0x44>)
 8003c4a:	1ba4      	subs	r4, r4, r6
 8003c4c:	10a4      	asrs	r4, r4, #2
 8003c4e:	42a5      	cmp	r5, r4
 8003c50:	d105      	bne.n	8003c5e <__libc_init_array+0x2e>
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c58:	4798      	blx	r3
 8003c5a:	3501      	adds	r5, #1
 8003c5c:	e7ee      	b.n	8003c3c <__libc_init_array+0xc>
 8003c5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c62:	4798      	blx	r3
 8003c64:	3501      	adds	r5, #1
 8003c66:	e7f2      	b.n	8003c4e <__libc_init_array+0x1e>
 8003c68:	080046cc 	.word	0x080046cc
 8003c6c:	080046cc 	.word	0x080046cc
 8003c70:	080046cc 	.word	0x080046cc
 8003c74:	080046d0 	.word	0x080046d0

08003c78 <memcpy>:
 8003c78:	b510      	push	{r4, lr}
 8003c7a:	1e43      	subs	r3, r0, #1
 8003c7c:	440a      	add	r2, r1
 8003c7e:	4291      	cmp	r1, r2
 8003c80:	d100      	bne.n	8003c84 <memcpy+0xc>
 8003c82:	bd10      	pop	{r4, pc}
 8003c84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c8c:	e7f7      	b.n	8003c7e <memcpy+0x6>

08003c8e <memset>:
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4402      	add	r2, r0
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d100      	bne.n	8003c98 <memset+0xa>
 8003c96:	4770      	bx	lr
 8003c98:	f803 1b01 	strb.w	r1, [r3], #1
 8003c9c:	e7f9      	b.n	8003c92 <memset+0x4>
	...

08003ca0 <srand>:
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	4b0d      	ldr	r3, [pc, #52]	; (8003cd8 <srand+0x38>)
 8003ca4:	4605      	mov	r5, r0
 8003ca6:	681c      	ldr	r4, [r3, #0]
 8003ca8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003caa:	b97b      	cbnz	r3, 8003ccc <srand+0x2c>
 8003cac:	2018      	movs	r0, #24
 8003cae:	f000 f8b3 	bl	8003e18 <malloc>
 8003cb2:	4a0a      	ldr	r2, [pc, #40]	; (8003cdc <srand+0x3c>)
 8003cb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ce0 <srand+0x40>)
 8003cb6:	63a0      	str	r0, [r4, #56]	; 0x38
 8003cb8:	e9c0 2300 	strd	r2, r3, [r0]
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <srand+0x44>)
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	6083      	str	r3, [r0, #8]
 8003cc2:	230b      	movs	r3, #11
 8003cc4:	8183      	strh	r3, [r0, #12]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003cd0:	611d      	str	r5, [r3, #16]
 8003cd2:	615a      	str	r2, [r3, #20]
 8003cd4:	bd38      	pop	{r3, r4, r5, pc}
 8003cd6:	bf00      	nop
 8003cd8:	200000ec 	.word	0x200000ec
 8003cdc:	abcd330e 	.word	0xabcd330e
 8003ce0:	e66d1234 	.word	0xe66d1234
 8003ce4:	0005deec 	.word	0x0005deec

08003ce8 <rand>:
 8003ce8:	b538      	push	{r3, r4, r5, lr}
 8003cea:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <rand+0x50>)
 8003cec:	681c      	ldr	r4, [r3, #0]
 8003cee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003cf0:	b97b      	cbnz	r3, 8003d12 <rand+0x2a>
 8003cf2:	2018      	movs	r0, #24
 8003cf4:	f000 f890 	bl	8003e18 <malloc>
 8003cf8:	4a10      	ldr	r2, [pc, #64]	; (8003d3c <rand+0x54>)
 8003cfa:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <rand+0x58>)
 8003cfc:	63a0      	str	r0, [r4, #56]	; 0x38
 8003cfe:	e9c0 2300 	strd	r2, r3, [r0]
 8003d02:	4b10      	ldr	r3, [pc, #64]	; (8003d44 <rand+0x5c>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	6083      	str	r3, [r0, #8]
 8003d08:	230b      	movs	r3, #11
 8003d0a:	8183      	strh	r3, [r0, #12]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003d12:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003d14:	480c      	ldr	r0, [pc, #48]	; (8003d48 <rand+0x60>)
 8003d16:	690a      	ldr	r2, [r1, #16]
 8003d18:	694b      	ldr	r3, [r1, #20]
 8003d1a:	4350      	muls	r0, r2
 8003d1c:	4c0b      	ldr	r4, [pc, #44]	; (8003d4c <rand+0x64>)
 8003d1e:	fb04 0003 	mla	r0, r4, r3, r0
 8003d22:	fba2 2304 	umull	r2, r3, r2, r4
 8003d26:	4403      	add	r3, r0
 8003d28:	1c54      	adds	r4, r2, #1
 8003d2a:	f143 0500 	adc.w	r5, r3, #0
 8003d2e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8003d32:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8003d36:	bd38      	pop	{r3, r4, r5, pc}
 8003d38:	200000ec 	.word	0x200000ec
 8003d3c:	abcd330e 	.word	0xabcd330e
 8003d40:	e66d1234 	.word	0xe66d1234
 8003d44:	0005deec 	.word	0x0005deec
 8003d48:	5851f42d 	.word	0x5851f42d
 8003d4c:	4c957f2d 	.word	0x4c957f2d

08003d50 <siprintf>:
 8003d50:	b40e      	push	{r1, r2, r3}
 8003d52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d56:	b500      	push	{lr}
 8003d58:	b09c      	sub	sp, #112	; 0x70
 8003d5a:	ab1d      	add	r3, sp, #116	; 0x74
 8003d5c:	9002      	str	r0, [sp, #8]
 8003d5e:	9006      	str	r0, [sp, #24]
 8003d60:	9107      	str	r1, [sp, #28]
 8003d62:	9104      	str	r1, [sp, #16]
 8003d64:	4808      	ldr	r0, [pc, #32]	; (8003d88 <siprintf+0x38>)
 8003d66:	4909      	ldr	r1, [pc, #36]	; (8003d8c <siprintf+0x3c>)
 8003d68:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d6c:	9105      	str	r1, [sp, #20]
 8003d6e:	6800      	ldr	r0, [r0, #0]
 8003d70:	a902      	add	r1, sp, #8
 8003d72:	9301      	str	r3, [sp, #4]
 8003d74:	f000 f958 	bl	8004028 <_svfiprintf_r>
 8003d78:	2200      	movs	r2, #0
 8003d7a:	9b02      	ldr	r3, [sp, #8]
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	b01c      	add	sp, #112	; 0x70
 8003d80:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d84:	b003      	add	sp, #12
 8003d86:	4770      	bx	lr
 8003d88:	200000ec 	.word	0x200000ec
 8003d8c:	ffff0208 	.word	0xffff0208

08003d90 <strcat>:
 8003d90:	4603      	mov	r3, r0
 8003d92:	b510      	push	{r4, lr}
 8003d94:	781a      	ldrb	r2, [r3, #0]
 8003d96:	1c5c      	adds	r4, r3, #1
 8003d98:	b93a      	cbnz	r2, 8003daa <strcat+0x1a>
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003da0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003da4:	2a00      	cmp	r2, #0
 8003da6:	d1f9      	bne.n	8003d9c <strcat+0xc>
 8003da8:	bd10      	pop	{r4, pc}
 8003daa:	4623      	mov	r3, r4
 8003dac:	e7f2      	b.n	8003d94 <strcat+0x4>

08003dae <strcpy>:
 8003dae:	4603      	mov	r3, r0
 8003db0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003db4:	f803 2b01 	strb.w	r2, [r3], #1
 8003db8:	2a00      	cmp	r2, #0
 8003dba:	d1f9      	bne.n	8003db0 <strcpy+0x2>
 8003dbc:	4770      	bx	lr
	...

08003dc0 <time>:
 8003dc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <time+0x30>)
 8003dc4:	4604      	mov	r4, r0
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	4669      	mov	r1, sp
 8003dca:	6818      	ldr	r0, [r3, #0]
 8003dcc:	f000 f812 	bl	8003df4 <_gettimeofday_r>
 8003dd0:	2800      	cmp	r0, #0
 8003dd2:	da05      	bge.n	8003de0 <time+0x20>
 8003dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003ddc:	e9cd 2300 	strd	r2, r3, [sp]
 8003de0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003de4:	b10c      	cbz	r4, 8003dea <time+0x2a>
 8003de6:	e9c4 0100 	strd	r0, r1, [r4]
 8003dea:	b004      	add	sp, #16
 8003dec:	bd10      	pop	{r4, pc}
 8003dee:	bf00      	nop
 8003df0:	200000ec 	.word	0x200000ec

08003df4 <_gettimeofday_r>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	2300      	movs	r3, #0
 8003df8:	4c06      	ldr	r4, [pc, #24]	; (8003e14 <_gettimeofday_r+0x20>)
 8003dfa:	4605      	mov	r5, r0
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	4611      	mov	r1, r2
 8003e00:	6023      	str	r3, [r4, #0]
 8003e02:	f000 fbf9 	bl	80045f8 <_gettimeofday>
 8003e06:	1c43      	adds	r3, r0, #1
 8003e08:	d102      	bne.n	8003e10 <_gettimeofday_r+0x1c>
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	b103      	cbz	r3, 8003e10 <_gettimeofday_r+0x1c>
 8003e0e:	602b      	str	r3, [r5, #0]
 8003e10:	bd38      	pop	{r3, r4, r5, pc}
 8003e12:	bf00      	nop
 8003e14:	20001620 	.word	0x20001620

08003e18 <malloc>:
 8003e18:	4b02      	ldr	r3, [pc, #8]	; (8003e24 <malloc+0xc>)
 8003e1a:	4601      	mov	r1, r0
 8003e1c:	6818      	ldr	r0, [r3, #0]
 8003e1e:	f000 b84f 	b.w	8003ec0 <_malloc_r>
 8003e22:	bf00      	nop
 8003e24:	200000ec 	.word	0x200000ec

08003e28 <_free_r>:
 8003e28:	b538      	push	{r3, r4, r5, lr}
 8003e2a:	4605      	mov	r5, r0
 8003e2c:	2900      	cmp	r1, #0
 8003e2e:	d043      	beq.n	8003eb8 <_free_r+0x90>
 8003e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e34:	1f0c      	subs	r4, r1, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	bfb8      	it	lt
 8003e3a:	18e4      	addlt	r4, r4, r3
 8003e3c:	f000 fbab 	bl	8004596 <__malloc_lock>
 8003e40:	4a1e      	ldr	r2, [pc, #120]	; (8003ebc <_free_r+0x94>)
 8003e42:	6813      	ldr	r3, [r2, #0]
 8003e44:	4610      	mov	r0, r2
 8003e46:	b933      	cbnz	r3, 8003e56 <_free_r+0x2e>
 8003e48:	6063      	str	r3, [r4, #4]
 8003e4a:	6014      	str	r4, [r2, #0]
 8003e4c:	4628      	mov	r0, r5
 8003e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e52:	f000 bba1 	b.w	8004598 <__malloc_unlock>
 8003e56:	42a3      	cmp	r3, r4
 8003e58:	d90b      	bls.n	8003e72 <_free_r+0x4a>
 8003e5a:	6821      	ldr	r1, [r4, #0]
 8003e5c:	1862      	adds	r2, r4, r1
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	bf01      	itttt	eq
 8003e62:	681a      	ldreq	r2, [r3, #0]
 8003e64:	685b      	ldreq	r3, [r3, #4]
 8003e66:	1852      	addeq	r2, r2, r1
 8003e68:	6022      	streq	r2, [r4, #0]
 8003e6a:	6063      	str	r3, [r4, #4]
 8003e6c:	6004      	str	r4, [r0, #0]
 8003e6e:	e7ed      	b.n	8003e4c <_free_r+0x24>
 8003e70:	4613      	mov	r3, r2
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	b10a      	cbz	r2, 8003e7a <_free_r+0x52>
 8003e76:	42a2      	cmp	r2, r4
 8003e78:	d9fa      	bls.n	8003e70 <_free_r+0x48>
 8003e7a:	6819      	ldr	r1, [r3, #0]
 8003e7c:	1858      	adds	r0, r3, r1
 8003e7e:	42a0      	cmp	r0, r4
 8003e80:	d10b      	bne.n	8003e9a <_free_r+0x72>
 8003e82:	6820      	ldr	r0, [r4, #0]
 8003e84:	4401      	add	r1, r0
 8003e86:	1858      	adds	r0, r3, r1
 8003e88:	4282      	cmp	r2, r0
 8003e8a:	6019      	str	r1, [r3, #0]
 8003e8c:	d1de      	bne.n	8003e4c <_free_r+0x24>
 8003e8e:	6810      	ldr	r0, [r2, #0]
 8003e90:	6852      	ldr	r2, [r2, #4]
 8003e92:	4401      	add	r1, r0
 8003e94:	6019      	str	r1, [r3, #0]
 8003e96:	605a      	str	r2, [r3, #4]
 8003e98:	e7d8      	b.n	8003e4c <_free_r+0x24>
 8003e9a:	d902      	bls.n	8003ea2 <_free_r+0x7a>
 8003e9c:	230c      	movs	r3, #12
 8003e9e:	602b      	str	r3, [r5, #0]
 8003ea0:	e7d4      	b.n	8003e4c <_free_r+0x24>
 8003ea2:	6820      	ldr	r0, [r4, #0]
 8003ea4:	1821      	adds	r1, r4, r0
 8003ea6:	428a      	cmp	r2, r1
 8003ea8:	bf01      	itttt	eq
 8003eaa:	6811      	ldreq	r1, [r2, #0]
 8003eac:	6852      	ldreq	r2, [r2, #4]
 8003eae:	1809      	addeq	r1, r1, r0
 8003eb0:	6021      	streq	r1, [r4, #0]
 8003eb2:	6062      	str	r2, [r4, #4]
 8003eb4:	605c      	str	r4, [r3, #4]
 8003eb6:	e7c9      	b.n	8003e4c <_free_r+0x24>
 8003eb8:	bd38      	pop	{r3, r4, r5, pc}
 8003eba:	bf00      	nop
 8003ebc:	20001114 	.word	0x20001114

08003ec0 <_malloc_r>:
 8003ec0:	b570      	push	{r4, r5, r6, lr}
 8003ec2:	1ccd      	adds	r5, r1, #3
 8003ec4:	f025 0503 	bic.w	r5, r5, #3
 8003ec8:	3508      	adds	r5, #8
 8003eca:	2d0c      	cmp	r5, #12
 8003ecc:	bf38      	it	cc
 8003ece:	250c      	movcc	r5, #12
 8003ed0:	2d00      	cmp	r5, #0
 8003ed2:	4606      	mov	r6, r0
 8003ed4:	db01      	blt.n	8003eda <_malloc_r+0x1a>
 8003ed6:	42a9      	cmp	r1, r5
 8003ed8:	d903      	bls.n	8003ee2 <_malloc_r+0x22>
 8003eda:	230c      	movs	r3, #12
 8003edc:	6033      	str	r3, [r6, #0]
 8003ede:	2000      	movs	r0, #0
 8003ee0:	bd70      	pop	{r4, r5, r6, pc}
 8003ee2:	f000 fb58 	bl	8004596 <__malloc_lock>
 8003ee6:	4a21      	ldr	r2, [pc, #132]	; (8003f6c <_malloc_r+0xac>)
 8003ee8:	6814      	ldr	r4, [r2, #0]
 8003eea:	4621      	mov	r1, r4
 8003eec:	b991      	cbnz	r1, 8003f14 <_malloc_r+0x54>
 8003eee:	4c20      	ldr	r4, [pc, #128]	; (8003f70 <_malloc_r+0xb0>)
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	b91b      	cbnz	r3, 8003efc <_malloc_r+0x3c>
 8003ef4:	4630      	mov	r0, r6
 8003ef6:	f000 fb17 	bl	8004528 <_sbrk_r>
 8003efa:	6020      	str	r0, [r4, #0]
 8003efc:	4629      	mov	r1, r5
 8003efe:	4630      	mov	r0, r6
 8003f00:	f000 fb12 	bl	8004528 <_sbrk_r>
 8003f04:	1c43      	adds	r3, r0, #1
 8003f06:	d124      	bne.n	8003f52 <_malloc_r+0x92>
 8003f08:	230c      	movs	r3, #12
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	6033      	str	r3, [r6, #0]
 8003f0e:	f000 fb43 	bl	8004598 <__malloc_unlock>
 8003f12:	e7e4      	b.n	8003ede <_malloc_r+0x1e>
 8003f14:	680b      	ldr	r3, [r1, #0]
 8003f16:	1b5b      	subs	r3, r3, r5
 8003f18:	d418      	bmi.n	8003f4c <_malloc_r+0x8c>
 8003f1a:	2b0b      	cmp	r3, #11
 8003f1c:	d90f      	bls.n	8003f3e <_malloc_r+0x7e>
 8003f1e:	600b      	str	r3, [r1, #0]
 8003f20:	18cc      	adds	r4, r1, r3
 8003f22:	50cd      	str	r5, [r1, r3]
 8003f24:	4630      	mov	r0, r6
 8003f26:	f000 fb37 	bl	8004598 <__malloc_unlock>
 8003f2a:	f104 000b 	add.w	r0, r4, #11
 8003f2e:	1d23      	adds	r3, r4, #4
 8003f30:	f020 0007 	bic.w	r0, r0, #7
 8003f34:	1ac3      	subs	r3, r0, r3
 8003f36:	d0d3      	beq.n	8003ee0 <_malloc_r+0x20>
 8003f38:	425a      	negs	r2, r3
 8003f3a:	50e2      	str	r2, [r4, r3]
 8003f3c:	e7d0      	b.n	8003ee0 <_malloc_r+0x20>
 8003f3e:	684b      	ldr	r3, [r1, #4]
 8003f40:	428c      	cmp	r4, r1
 8003f42:	bf16      	itet	ne
 8003f44:	6063      	strne	r3, [r4, #4]
 8003f46:	6013      	streq	r3, [r2, #0]
 8003f48:	460c      	movne	r4, r1
 8003f4a:	e7eb      	b.n	8003f24 <_malloc_r+0x64>
 8003f4c:	460c      	mov	r4, r1
 8003f4e:	6849      	ldr	r1, [r1, #4]
 8003f50:	e7cc      	b.n	8003eec <_malloc_r+0x2c>
 8003f52:	1cc4      	adds	r4, r0, #3
 8003f54:	f024 0403 	bic.w	r4, r4, #3
 8003f58:	42a0      	cmp	r0, r4
 8003f5a:	d005      	beq.n	8003f68 <_malloc_r+0xa8>
 8003f5c:	1a21      	subs	r1, r4, r0
 8003f5e:	4630      	mov	r0, r6
 8003f60:	f000 fae2 	bl	8004528 <_sbrk_r>
 8003f64:	3001      	adds	r0, #1
 8003f66:	d0cf      	beq.n	8003f08 <_malloc_r+0x48>
 8003f68:	6025      	str	r5, [r4, #0]
 8003f6a:	e7db      	b.n	8003f24 <_malloc_r+0x64>
 8003f6c:	20001114 	.word	0x20001114
 8003f70:	20001118 	.word	0x20001118

08003f74 <__ssputs_r>:
 8003f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f78:	688e      	ldr	r6, [r1, #8]
 8003f7a:	4682      	mov	sl, r0
 8003f7c:	429e      	cmp	r6, r3
 8003f7e:	460c      	mov	r4, r1
 8003f80:	4690      	mov	r8, r2
 8003f82:	4699      	mov	r9, r3
 8003f84:	d837      	bhi.n	8003ff6 <__ssputs_r+0x82>
 8003f86:	898a      	ldrh	r2, [r1, #12]
 8003f88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003f8c:	d031      	beq.n	8003ff2 <__ssputs_r+0x7e>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	6825      	ldr	r5, [r4, #0]
 8003f92:	6909      	ldr	r1, [r1, #16]
 8003f94:	1a6f      	subs	r7, r5, r1
 8003f96:	6965      	ldr	r5, [r4, #20]
 8003f98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f9c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003fa0:	f109 0301 	add.w	r3, r9, #1
 8003fa4:	443b      	add	r3, r7
 8003fa6:	429d      	cmp	r5, r3
 8003fa8:	bf38      	it	cc
 8003faa:	461d      	movcc	r5, r3
 8003fac:	0553      	lsls	r3, r2, #21
 8003fae:	d530      	bpl.n	8004012 <__ssputs_r+0x9e>
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	f7ff ff85 	bl	8003ec0 <_malloc_r>
 8003fb6:	4606      	mov	r6, r0
 8003fb8:	b950      	cbnz	r0, 8003fd0 <__ssputs_r+0x5c>
 8003fba:	230c      	movs	r3, #12
 8003fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fc0:	f8ca 3000 	str.w	r3, [sl]
 8003fc4:	89a3      	ldrh	r3, [r4, #12]
 8003fc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fca:	81a3      	strh	r3, [r4, #12]
 8003fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd0:	463a      	mov	r2, r7
 8003fd2:	6921      	ldr	r1, [r4, #16]
 8003fd4:	f7ff fe50 	bl	8003c78 <memcpy>
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe2:	81a3      	strh	r3, [r4, #12]
 8003fe4:	6126      	str	r6, [r4, #16]
 8003fe6:	443e      	add	r6, r7
 8003fe8:	6026      	str	r6, [r4, #0]
 8003fea:	464e      	mov	r6, r9
 8003fec:	6165      	str	r5, [r4, #20]
 8003fee:	1bed      	subs	r5, r5, r7
 8003ff0:	60a5      	str	r5, [r4, #8]
 8003ff2:	454e      	cmp	r6, r9
 8003ff4:	d900      	bls.n	8003ff8 <__ssputs_r+0x84>
 8003ff6:	464e      	mov	r6, r9
 8003ff8:	4632      	mov	r2, r6
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	6820      	ldr	r0, [r4, #0]
 8003ffe:	f000 fab1 	bl	8004564 <memmove>
 8004002:	68a3      	ldr	r3, [r4, #8]
 8004004:	2000      	movs	r0, #0
 8004006:	1b9b      	subs	r3, r3, r6
 8004008:	60a3      	str	r3, [r4, #8]
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	441e      	add	r6, r3
 800400e:	6026      	str	r6, [r4, #0]
 8004010:	e7dc      	b.n	8003fcc <__ssputs_r+0x58>
 8004012:	462a      	mov	r2, r5
 8004014:	f000 fac1 	bl	800459a <_realloc_r>
 8004018:	4606      	mov	r6, r0
 800401a:	2800      	cmp	r0, #0
 800401c:	d1e2      	bne.n	8003fe4 <__ssputs_r+0x70>
 800401e:	6921      	ldr	r1, [r4, #16]
 8004020:	4650      	mov	r0, sl
 8004022:	f7ff ff01 	bl	8003e28 <_free_r>
 8004026:	e7c8      	b.n	8003fba <__ssputs_r+0x46>

08004028 <_svfiprintf_r>:
 8004028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800402c:	461d      	mov	r5, r3
 800402e:	898b      	ldrh	r3, [r1, #12]
 8004030:	b09d      	sub	sp, #116	; 0x74
 8004032:	061f      	lsls	r7, r3, #24
 8004034:	4680      	mov	r8, r0
 8004036:	460c      	mov	r4, r1
 8004038:	4616      	mov	r6, r2
 800403a:	d50f      	bpl.n	800405c <_svfiprintf_r+0x34>
 800403c:	690b      	ldr	r3, [r1, #16]
 800403e:	b96b      	cbnz	r3, 800405c <_svfiprintf_r+0x34>
 8004040:	2140      	movs	r1, #64	; 0x40
 8004042:	f7ff ff3d 	bl	8003ec0 <_malloc_r>
 8004046:	6020      	str	r0, [r4, #0]
 8004048:	6120      	str	r0, [r4, #16]
 800404a:	b928      	cbnz	r0, 8004058 <_svfiprintf_r+0x30>
 800404c:	230c      	movs	r3, #12
 800404e:	f8c8 3000 	str.w	r3, [r8]
 8004052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004056:	e0c8      	b.n	80041ea <_svfiprintf_r+0x1c2>
 8004058:	2340      	movs	r3, #64	; 0x40
 800405a:	6163      	str	r3, [r4, #20]
 800405c:	2300      	movs	r3, #0
 800405e:	9309      	str	r3, [sp, #36]	; 0x24
 8004060:	2320      	movs	r3, #32
 8004062:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004066:	2330      	movs	r3, #48	; 0x30
 8004068:	f04f 0b01 	mov.w	fp, #1
 800406c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004070:	9503      	str	r5, [sp, #12]
 8004072:	4637      	mov	r7, r6
 8004074:	463d      	mov	r5, r7
 8004076:	f815 3b01 	ldrb.w	r3, [r5], #1
 800407a:	b10b      	cbz	r3, 8004080 <_svfiprintf_r+0x58>
 800407c:	2b25      	cmp	r3, #37	; 0x25
 800407e:	d13e      	bne.n	80040fe <_svfiprintf_r+0xd6>
 8004080:	ebb7 0a06 	subs.w	sl, r7, r6
 8004084:	d00b      	beq.n	800409e <_svfiprintf_r+0x76>
 8004086:	4653      	mov	r3, sl
 8004088:	4632      	mov	r2, r6
 800408a:	4621      	mov	r1, r4
 800408c:	4640      	mov	r0, r8
 800408e:	f7ff ff71 	bl	8003f74 <__ssputs_r>
 8004092:	3001      	adds	r0, #1
 8004094:	f000 80a4 	beq.w	80041e0 <_svfiprintf_r+0x1b8>
 8004098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800409a:	4453      	add	r3, sl
 800409c:	9309      	str	r3, [sp, #36]	; 0x24
 800409e:	783b      	ldrb	r3, [r7, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 809d 	beq.w	80041e0 <_svfiprintf_r+0x1b8>
 80040a6:	2300      	movs	r3, #0
 80040a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80040ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040b0:	9304      	str	r3, [sp, #16]
 80040b2:	9307      	str	r3, [sp, #28]
 80040b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040b8:	931a      	str	r3, [sp, #104]	; 0x68
 80040ba:	462f      	mov	r7, r5
 80040bc:	2205      	movs	r2, #5
 80040be:	f817 1b01 	ldrb.w	r1, [r7], #1
 80040c2:	4850      	ldr	r0, [pc, #320]	; (8004204 <_svfiprintf_r+0x1dc>)
 80040c4:	f000 fa40 	bl	8004548 <memchr>
 80040c8:	9b04      	ldr	r3, [sp, #16]
 80040ca:	b9d0      	cbnz	r0, 8004102 <_svfiprintf_r+0xda>
 80040cc:	06d9      	lsls	r1, r3, #27
 80040ce:	bf44      	itt	mi
 80040d0:	2220      	movmi	r2, #32
 80040d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040d6:	071a      	lsls	r2, r3, #28
 80040d8:	bf44      	itt	mi
 80040da:	222b      	movmi	r2, #43	; 0x2b
 80040dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040e0:	782a      	ldrb	r2, [r5, #0]
 80040e2:	2a2a      	cmp	r2, #42	; 0x2a
 80040e4:	d015      	beq.n	8004112 <_svfiprintf_r+0xea>
 80040e6:	462f      	mov	r7, r5
 80040e8:	2000      	movs	r0, #0
 80040ea:	250a      	movs	r5, #10
 80040ec:	9a07      	ldr	r2, [sp, #28]
 80040ee:	4639      	mov	r1, r7
 80040f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040f4:	3b30      	subs	r3, #48	; 0x30
 80040f6:	2b09      	cmp	r3, #9
 80040f8:	d94d      	bls.n	8004196 <_svfiprintf_r+0x16e>
 80040fa:	b1b8      	cbz	r0, 800412c <_svfiprintf_r+0x104>
 80040fc:	e00f      	b.n	800411e <_svfiprintf_r+0xf6>
 80040fe:	462f      	mov	r7, r5
 8004100:	e7b8      	b.n	8004074 <_svfiprintf_r+0x4c>
 8004102:	4a40      	ldr	r2, [pc, #256]	; (8004204 <_svfiprintf_r+0x1dc>)
 8004104:	463d      	mov	r5, r7
 8004106:	1a80      	subs	r0, r0, r2
 8004108:	fa0b f000 	lsl.w	r0, fp, r0
 800410c:	4318      	orrs	r0, r3
 800410e:	9004      	str	r0, [sp, #16]
 8004110:	e7d3      	b.n	80040ba <_svfiprintf_r+0x92>
 8004112:	9a03      	ldr	r2, [sp, #12]
 8004114:	1d11      	adds	r1, r2, #4
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	9103      	str	r1, [sp, #12]
 800411a:	2a00      	cmp	r2, #0
 800411c:	db01      	blt.n	8004122 <_svfiprintf_r+0xfa>
 800411e:	9207      	str	r2, [sp, #28]
 8004120:	e004      	b.n	800412c <_svfiprintf_r+0x104>
 8004122:	4252      	negs	r2, r2
 8004124:	f043 0302 	orr.w	r3, r3, #2
 8004128:	9207      	str	r2, [sp, #28]
 800412a:	9304      	str	r3, [sp, #16]
 800412c:	783b      	ldrb	r3, [r7, #0]
 800412e:	2b2e      	cmp	r3, #46	; 0x2e
 8004130:	d10c      	bne.n	800414c <_svfiprintf_r+0x124>
 8004132:	787b      	ldrb	r3, [r7, #1]
 8004134:	2b2a      	cmp	r3, #42	; 0x2a
 8004136:	d133      	bne.n	80041a0 <_svfiprintf_r+0x178>
 8004138:	9b03      	ldr	r3, [sp, #12]
 800413a:	3702      	adds	r7, #2
 800413c:	1d1a      	adds	r2, r3, #4
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	9203      	str	r2, [sp, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	bfb8      	it	lt
 8004146:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800414a:	9305      	str	r3, [sp, #20]
 800414c:	4d2e      	ldr	r5, [pc, #184]	; (8004208 <_svfiprintf_r+0x1e0>)
 800414e:	2203      	movs	r2, #3
 8004150:	7839      	ldrb	r1, [r7, #0]
 8004152:	4628      	mov	r0, r5
 8004154:	f000 f9f8 	bl	8004548 <memchr>
 8004158:	b138      	cbz	r0, 800416a <_svfiprintf_r+0x142>
 800415a:	2340      	movs	r3, #64	; 0x40
 800415c:	1b40      	subs	r0, r0, r5
 800415e:	fa03 f000 	lsl.w	r0, r3, r0
 8004162:	9b04      	ldr	r3, [sp, #16]
 8004164:	3701      	adds	r7, #1
 8004166:	4303      	orrs	r3, r0
 8004168:	9304      	str	r3, [sp, #16]
 800416a:	7839      	ldrb	r1, [r7, #0]
 800416c:	2206      	movs	r2, #6
 800416e:	4827      	ldr	r0, [pc, #156]	; (800420c <_svfiprintf_r+0x1e4>)
 8004170:	1c7e      	adds	r6, r7, #1
 8004172:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004176:	f000 f9e7 	bl	8004548 <memchr>
 800417a:	2800      	cmp	r0, #0
 800417c:	d038      	beq.n	80041f0 <_svfiprintf_r+0x1c8>
 800417e:	4b24      	ldr	r3, [pc, #144]	; (8004210 <_svfiprintf_r+0x1e8>)
 8004180:	bb13      	cbnz	r3, 80041c8 <_svfiprintf_r+0x1a0>
 8004182:	9b03      	ldr	r3, [sp, #12]
 8004184:	3307      	adds	r3, #7
 8004186:	f023 0307 	bic.w	r3, r3, #7
 800418a:	3308      	adds	r3, #8
 800418c:	9303      	str	r3, [sp, #12]
 800418e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004190:	444b      	add	r3, r9
 8004192:	9309      	str	r3, [sp, #36]	; 0x24
 8004194:	e76d      	b.n	8004072 <_svfiprintf_r+0x4a>
 8004196:	fb05 3202 	mla	r2, r5, r2, r3
 800419a:	2001      	movs	r0, #1
 800419c:	460f      	mov	r7, r1
 800419e:	e7a6      	b.n	80040ee <_svfiprintf_r+0xc6>
 80041a0:	2300      	movs	r3, #0
 80041a2:	250a      	movs	r5, #10
 80041a4:	4619      	mov	r1, r3
 80041a6:	3701      	adds	r7, #1
 80041a8:	9305      	str	r3, [sp, #20]
 80041aa:	4638      	mov	r0, r7
 80041ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041b0:	3a30      	subs	r2, #48	; 0x30
 80041b2:	2a09      	cmp	r2, #9
 80041b4:	d903      	bls.n	80041be <_svfiprintf_r+0x196>
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0c8      	beq.n	800414c <_svfiprintf_r+0x124>
 80041ba:	9105      	str	r1, [sp, #20]
 80041bc:	e7c6      	b.n	800414c <_svfiprintf_r+0x124>
 80041be:	fb05 2101 	mla	r1, r5, r1, r2
 80041c2:	2301      	movs	r3, #1
 80041c4:	4607      	mov	r7, r0
 80041c6:	e7f0      	b.n	80041aa <_svfiprintf_r+0x182>
 80041c8:	ab03      	add	r3, sp, #12
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	4622      	mov	r2, r4
 80041ce:	4b11      	ldr	r3, [pc, #68]	; (8004214 <_svfiprintf_r+0x1ec>)
 80041d0:	a904      	add	r1, sp, #16
 80041d2:	4640      	mov	r0, r8
 80041d4:	f3af 8000 	nop.w
 80041d8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80041dc:	4681      	mov	r9, r0
 80041de:	d1d6      	bne.n	800418e <_svfiprintf_r+0x166>
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	065b      	lsls	r3, r3, #25
 80041e4:	f53f af35 	bmi.w	8004052 <_svfiprintf_r+0x2a>
 80041e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041ea:	b01d      	add	sp, #116	; 0x74
 80041ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f0:	ab03      	add	r3, sp, #12
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	4622      	mov	r2, r4
 80041f6:	4b07      	ldr	r3, [pc, #28]	; (8004214 <_svfiprintf_r+0x1ec>)
 80041f8:	a904      	add	r1, sp, #16
 80041fa:	4640      	mov	r0, r8
 80041fc:	f000 f882 	bl	8004304 <_printf_i>
 8004200:	e7ea      	b.n	80041d8 <_svfiprintf_r+0x1b0>
 8004202:	bf00      	nop
 8004204:	08004698 	.word	0x08004698
 8004208:	0800469e 	.word	0x0800469e
 800420c:	080046a2 	.word	0x080046a2
 8004210:	00000000 	.word	0x00000000
 8004214:	08003f75 	.word	0x08003f75

08004218 <_printf_common>:
 8004218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800421c:	4691      	mov	r9, r2
 800421e:	461f      	mov	r7, r3
 8004220:	688a      	ldr	r2, [r1, #8]
 8004222:	690b      	ldr	r3, [r1, #16]
 8004224:	4606      	mov	r6, r0
 8004226:	4293      	cmp	r3, r2
 8004228:	bfb8      	it	lt
 800422a:	4613      	movlt	r3, r2
 800422c:	f8c9 3000 	str.w	r3, [r9]
 8004230:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004234:	460c      	mov	r4, r1
 8004236:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800423a:	b112      	cbz	r2, 8004242 <_printf_common+0x2a>
 800423c:	3301      	adds	r3, #1
 800423e:	f8c9 3000 	str.w	r3, [r9]
 8004242:	6823      	ldr	r3, [r4, #0]
 8004244:	0699      	lsls	r1, r3, #26
 8004246:	bf42      	ittt	mi
 8004248:	f8d9 3000 	ldrmi.w	r3, [r9]
 800424c:	3302      	addmi	r3, #2
 800424e:	f8c9 3000 	strmi.w	r3, [r9]
 8004252:	6825      	ldr	r5, [r4, #0]
 8004254:	f015 0506 	ands.w	r5, r5, #6
 8004258:	d107      	bne.n	800426a <_printf_common+0x52>
 800425a:	f104 0a19 	add.w	sl, r4, #25
 800425e:	68e3      	ldr	r3, [r4, #12]
 8004260:	f8d9 2000 	ldr.w	r2, [r9]
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	42ab      	cmp	r3, r5
 8004268:	dc29      	bgt.n	80042be <_printf_common+0xa6>
 800426a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800426e:	6822      	ldr	r2, [r4, #0]
 8004270:	3300      	adds	r3, #0
 8004272:	bf18      	it	ne
 8004274:	2301      	movne	r3, #1
 8004276:	0692      	lsls	r2, r2, #26
 8004278:	d42e      	bmi.n	80042d8 <_printf_common+0xc0>
 800427a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800427e:	4639      	mov	r1, r7
 8004280:	4630      	mov	r0, r6
 8004282:	47c0      	blx	r8
 8004284:	3001      	adds	r0, #1
 8004286:	d021      	beq.n	80042cc <_printf_common+0xb4>
 8004288:	6823      	ldr	r3, [r4, #0]
 800428a:	68e5      	ldr	r5, [r4, #12]
 800428c:	f003 0306 	and.w	r3, r3, #6
 8004290:	2b04      	cmp	r3, #4
 8004292:	bf18      	it	ne
 8004294:	2500      	movne	r5, #0
 8004296:	f8d9 2000 	ldr.w	r2, [r9]
 800429a:	f04f 0900 	mov.w	r9, #0
 800429e:	bf08      	it	eq
 80042a0:	1aad      	subeq	r5, r5, r2
 80042a2:	68a3      	ldr	r3, [r4, #8]
 80042a4:	6922      	ldr	r2, [r4, #16]
 80042a6:	bf08      	it	eq
 80042a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042ac:	4293      	cmp	r3, r2
 80042ae:	bfc4      	itt	gt
 80042b0:	1a9b      	subgt	r3, r3, r2
 80042b2:	18ed      	addgt	r5, r5, r3
 80042b4:	341a      	adds	r4, #26
 80042b6:	454d      	cmp	r5, r9
 80042b8:	d11a      	bne.n	80042f0 <_printf_common+0xd8>
 80042ba:	2000      	movs	r0, #0
 80042bc:	e008      	b.n	80042d0 <_printf_common+0xb8>
 80042be:	2301      	movs	r3, #1
 80042c0:	4652      	mov	r2, sl
 80042c2:	4639      	mov	r1, r7
 80042c4:	4630      	mov	r0, r6
 80042c6:	47c0      	blx	r8
 80042c8:	3001      	adds	r0, #1
 80042ca:	d103      	bne.n	80042d4 <_printf_common+0xbc>
 80042cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d4:	3501      	adds	r5, #1
 80042d6:	e7c2      	b.n	800425e <_printf_common+0x46>
 80042d8:	2030      	movs	r0, #48	; 0x30
 80042da:	18e1      	adds	r1, r4, r3
 80042dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042e6:	4422      	add	r2, r4
 80042e8:	3302      	adds	r3, #2
 80042ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042ee:	e7c4      	b.n	800427a <_printf_common+0x62>
 80042f0:	2301      	movs	r3, #1
 80042f2:	4622      	mov	r2, r4
 80042f4:	4639      	mov	r1, r7
 80042f6:	4630      	mov	r0, r6
 80042f8:	47c0      	blx	r8
 80042fa:	3001      	adds	r0, #1
 80042fc:	d0e6      	beq.n	80042cc <_printf_common+0xb4>
 80042fe:	f109 0901 	add.w	r9, r9, #1
 8004302:	e7d8      	b.n	80042b6 <_printf_common+0x9e>

08004304 <_printf_i>:
 8004304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004308:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800430c:	460c      	mov	r4, r1
 800430e:	7e09      	ldrb	r1, [r1, #24]
 8004310:	b085      	sub	sp, #20
 8004312:	296e      	cmp	r1, #110	; 0x6e
 8004314:	4617      	mov	r7, r2
 8004316:	4606      	mov	r6, r0
 8004318:	4698      	mov	r8, r3
 800431a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800431c:	f000 80b3 	beq.w	8004486 <_printf_i+0x182>
 8004320:	d822      	bhi.n	8004368 <_printf_i+0x64>
 8004322:	2963      	cmp	r1, #99	; 0x63
 8004324:	d036      	beq.n	8004394 <_printf_i+0x90>
 8004326:	d80a      	bhi.n	800433e <_printf_i+0x3a>
 8004328:	2900      	cmp	r1, #0
 800432a:	f000 80b9 	beq.w	80044a0 <_printf_i+0x19c>
 800432e:	2958      	cmp	r1, #88	; 0x58
 8004330:	f000 8083 	beq.w	800443a <_printf_i+0x136>
 8004334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004338:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800433c:	e032      	b.n	80043a4 <_printf_i+0xa0>
 800433e:	2964      	cmp	r1, #100	; 0x64
 8004340:	d001      	beq.n	8004346 <_printf_i+0x42>
 8004342:	2969      	cmp	r1, #105	; 0x69
 8004344:	d1f6      	bne.n	8004334 <_printf_i+0x30>
 8004346:	6820      	ldr	r0, [r4, #0]
 8004348:	6813      	ldr	r3, [r2, #0]
 800434a:	0605      	lsls	r5, r0, #24
 800434c:	f103 0104 	add.w	r1, r3, #4
 8004350:	d52a      	bpl.n	80043a8 <_printf_i+0xa4>
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6011      	str	r1, [r2, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	da03      	bge.n	8004362 <_printf_i+0x5e>
 800435a:	222d      	movs	r2, #45	; 0x2d
 800435c:	425b      	negs	r3, r3
 800435e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004362:	486f      	ldr	r0, [pc, #444]	; (8004520 <_printf_i+0x21c>)
 8004364:	220a      	movs	r2, #10
 8004366:	e039      	b.n	80043dc <_printf_i+0xd8>
 8004368:	2973      	cmp	r1, #115	; 0x73
 800436a:	f000 809d 	beq.w	80044a8 <_printf_i+0x1a4>
 800436e:	d808      	bhi.n	8004382 <_printf_i+0x7e>
 8004370:	296f      	cmp	r1, #111	; 0x6f
 8004372:	d020      	beq.n	80043b6 <_printf_i+0xb2>
 8004374:	2970      	cmp	r1, #112	; 0x70
 8004376:	d1dd      	bne.n	8004334 <_printf_i+0x30>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	f043 0320 	orr.w	r3, r3, #32
 800437e:	6023      	str	r3, [r4, #0]
 8004380:	e003      	b.n	800438a <_printf_i+0x86>
 8004382:	2975      	cmp	r1, #117	; 0x75
 8004384:	d017      	beq.n	80043b6 <_printf_i+0xb2>
 8004386:	2978      	cmp	r1, #120	; 0x78
 8004388:	d1d4      	bne.n	8004334 <_printf_i+0x30>
 800438a:	2378      	movs	r3, #120	; 0x78
 800438c:	4865      	ldr	r0, [pc, #404]	; (8004524 <_printf_i+0x220>)
 800438e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004392:	e055      	b.n	8004440 <_printf_i+0x13c>
 8004394:	6813      	ldr	r3, [r2, #0]
 8004396:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800439a:	1d19      	adds	r1, r3, #4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6011      	str	r1, [r2, #0]
 80043a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043a4:	2301      	movs	r3, #1
 80043a6:	e08c      	b.n	80044c2 <_printf_i+0x1be>
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043ae:	6011      	str	r1, [r2, #0]
 80043b0:	bf18      	it	ne
 80043b2:	b21b      	sxthne	r3, r3
 80043b4:	e7cf      	b.n	8004356 <_printf_i+0x52>
 80043b6:	6813      	ldr	r3, [r2, #0]
 80043b8:	6825      	ldr	r5, [r4, #0]
 80043ba:	1d18      	adds	r0, r3, #4
 80043bc:	6010      	str	r0, [r2, #0]
 80043be:	0628      	lsls	r0, r5, #24
 80043c0:	d501      	bpl.n	80043c6 <_printf_i+0xc2>
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	e002      	b.n	80043cc <_printf_i+0xc8>
 80043c6:	0668      	lsls	r0, r5, #25
 80043c8:	d5fb      	bpl.n	80043c2 <_printf_i+0xbe>
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	296f      	cmp	r1, #111	; 0x6f
 80043ce:	bf14      	ite	ne
 80043d0:	220a      	movne	r2, #10
 80043d2:	2208      	moveq	r2, #8
 80043d4:	4852      	ldr	r0, [pc, #328]	; (8004520 <_printf_i+0x21c>)
 80043d6:	2100      	movs	r1, #0
 80043d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80043dc:	6865      	ldr	r5, [r4, #4]
 80043de:	2d00      	cmp	r5, #0
 80043e0:	60a5      	str	r5, [r4, #8]
 80043e2:	f2c0 8095 	blt.w	8004510 <_printf_i+0x20c>
 80043e6:	6821      	ldr	r1, [r4, #0]
 80043e8:	f021 0104 	bic.w	r1, r1, #4
 80043ec:	6021      	str	r1, [r4, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d13d      	bne.n	800446e <_printf_i+0x16a>
 80043f2:	2d00      	cmp	r5, #0
 80043f4:	f040 808e 	bne.w	8004514 <_printf_i+0x210>
 80043f8:	4665      	mov	r5, ip
 80043fa:	2a08      	cmp	r2, #8
 80043fc:	d10b      	bne.n	8004416 <_printf_i+0x112>
 80043fe:	6823      	ldr	r3, [r4, #0]
 8004400:	07db      	lsls	r3, r3, #31
 8004402:	d508      	bpl.n	8004416 <_printf_i+0x112>
 8004404:	6923      	ldr	r3, [r4, #16]
 8004406:	6862      	ldr	r2, [r4, #4]
 8004408:	429a      	cmp	r2, r3
 800440a:	bfde      	ittt	le
 800440c:	2330      	movle	r3, #48	; 0x30
 800440e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004412:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004416:	ebac 0305 	sub.w	r3, ip, r5
 800441a:	6123      	str	r3, [r4, #16]
 800441c:	f8cd 8000 	str.w	r8, [sp]
 8004420:	463b      	mov	r3, r7
 8004422:	aa03      	add	r2, sp, #12
 8004424:	4621      	mov	r1, r4
 8004426:	4630      	mov	r0, r6
 8004428:	f7ff fef6 	bl	8004218 <_printf_common>
 800442c:	3001      	adds	r0, #1
 800442e:	d14d      	bne.n	80044cc <_printf_i+0x1c8>
 8004430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004434:	b005      	add	sp, #20
 8004436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800443a:	4839      	ldr	r0, [pc, #228]	; (8004520 <_printf_i+0x21c>)
 800443c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004440:	6813      	ldr	r3, [r2, #0]
 8004442:	6821      	ldr	r1, [r4, #0]
 8004444:	1d1d      	adds	r5, r3, #4
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6015      	str	r5, [r2, #0]
 800444a:	060a      	lsls	r2, r1, #24
 800444c:	d50b      	bpl.n	8004466 <_printf_i+0x162>
 800444e:	07ca      	lsls	r2, r1, #31
 8004450:	bf44      	itt	mi
 8004452:	f041 0120 	orrmi.w	r1, r1, #32
 8004456:	6021      	strmi	r1, [r4, #0]
 8004458:	b91b      	cbnz	r3, 8004462 <_printf_i+0x15e>
 800445a:	6822      	ldr	r2, [r4, #0]
 800445c:	f022 0220 	bic.w	r2, r2, #32
 8004460:	6022      	str	r2, [r4, #0]
 8004462:	2210      	movs	r2, #16
 8004464:	e7b7      	b.n	80043d6 <_printf_i+0xd2>
 8004466:	064d      	lsls	r5, r1, #25
 8004468:	bf48      	it	mi
 800446a:	b29b      	uxthmi	r3, r3
 800446c:	e7ef      	b.n	800444e <_printf_i+0x14a>
 800446e:	4665      	mov	r5, ip
 8004470:	fbb3 f1f2 	udiv	r1, r3, r2
 8004474:	fb02 3311 	mls	r3, r2, r1, r3
 8004478:	5cc3      	ldrb	r3, [r0, r3]
 800447a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800447e:	460b      	mov	r3, r1
 8004480:	2900      	cmp	r1, #0
 8004482:	d1f5      	bne.n	8004470 <_printf_i+0x16c>
 8004484:	e7b9      	b.n	80043fa <_printf_i+0xf6>
 8004486:	6813      	ldr	r3, [r2, #0]
 8004488:	6825      	ldr	r5, [r4, #0]
 800448a:	1d18      	adds	r0, r3, #4
 800448c:	6961      	ldr	r1, [r4, #20]
 800448e:	6010      	str	r0, [r2, #0]
 8004490:	0628      	lsls	r0, r5, #24
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	d501      	bpl.n	800449a <_printf_i+0x196>
 8004496:	6019      	str	r1, [r3, #0]
 8004498:	e002      	b.n	80044a0 <_printf_i+0x19c>
 800449a:	066a      	lsls	r2, r5, #25
 800449c:	d5fb      	bpl.n	8004496 <_printf_i+0x192>
 800449e:	8019      	strh	r1, [r3, #0]
 80044a0:	2300      	movs	r3, #0
 80044a2:	4665      	mov	r5, ip
 80044a4:	6123      	str	r3, [r4, #16]
 80044a6:	e7b9      	b.n	800441c <_printf_i+0x118>
 80044a8:	6813      	ldr	r3, [r2, #0]
 80044aa:	1d19      	adds	r1, r3, #4
 80044ac:	6011      	str	r1, [r2, #0]
 80044ae:	681d      	ldr	r5, [r3, #0]
 80044b0:	6862      	ldr	r2, [r4, #4]
 80044b2:	2100      	movs	r1, #0
 80044b4:	4628      	mov	r0, r5
 80044b6:	f000 f847 	bl	8004548 <memchr>
 80044ba:	b108      	cbz	r0, 80044c0 <_printf_i+0x1bc>
 80044bc:	1b40      	subs	r0, r0, r5
 80044be:	6060      	str	r0, [r4, #4]
 80044c0:	6863      	ldr	r3, [r4, #4]
 80044c2:	6123      	str	r3, [r4, #16]
 80044c4:	2300      	movs	r3, #0
 80044c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ca:	e7a7      	b.n	800441c <_printf_i+0x118>
 80044cc:	6923      	ldr	r3, [r4, #16]
 80044ce:	462a      	mov	r2, r5
 80044d0:	4639      	mov	r1, r7
 80044d2:	4630      	mov	r0, r6
 80044d4:	47c0      	blx	r8
 80044d6:	3001      	adds	r0, #1
 80044d8:	d0aa      	beq.n	8004430 <_printf_i+0x12c>
 80044da:	6823      	ldr	r3, [r4, #0]
 80044dc:	079b      	lsls	r3, r3, #30
 80044de:	d413      	bmi.n	8004508 <_printf_i+0x204>
 80044e0:	68e0      	ldr	r0, [r4, #12]
 80044e2:	9b03      	ldr	r3, [sp, #12]
 80044e4:	4298      	cmp	r0, r3
 80044e6:	bfb8      	it	lt
 80044e8:	4618      	movlt	r0, r3
 80044ea:	e7a3      	b.n	8004434 <_printf_i+0x130>
 80044ec:	2301      	movs	r3, #1
 80044ee:	464a      	mov	r2, r9
 80044f0:	4639      	mov	r1, r7
 80044f2:	4630      	mov	r0, r6
 80044f4:	47c0      	blx	r8
 80044f6:	3001      	adds	r0, #1
 80044f8:	d09a      	beq.n	8004430 <_printf_i+0x12c>
 80044fa:	3501      	adds	r5, #1
 80044fc:	68e3      	ldr	r3, [r4, #12]
 80044fe:	9a03      	ldr	r2, [sp, #12]
 8004500:	1a9b      	subs	r3, r3, r2
 8004502:	42ab      	cmp	r3, r5
 8004504:	dcf2      	bgt.n	80044ec <_printf_i+0x1e8>
 8004506:	e7eb      	b.n	80044e0 <_printf_i+0x1dc>
 8004508:	2500      	movs	r5, #0
 800450a:	f104 0919 	add.w	r9, r4, #25
 800450e:	e7f5      	b.n	80044fc <_printf_i+0x1f8>
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1ac      	bne.n	800446e <_printf_i+0x16a>
 8004514:	7803      	ldrb	r3, [r0, #0]
 8004516:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800451a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800451e:	e76c      	b.n	80043fa <_printf_i+0xf6>
 8004520:	080046a9 	.word	0x080046a9
 8004524:	080046ba 	.word	0x080046ba

08004528 <_sbrk_r>:
 8004528:	b538      	push	{r3, r4, r5, lr}
 800452a:	2300      	movs	r3, #0
 800452c:	4c05      	ldr	r4, [pc, #20]	; (8004544 <_sbrk_r+0x1c>)
 800452e:	4605      	mov	r5, r0
 8004530:	4608      	mov	r0, r1
 8004532:	6023      	str	r3, [r4, #0]
 8004534:	f7fc fdd0 	bl	80010d8 <_sbrk>
 8004538:	1c43      	adds	r3, r0, #1
 800453a:	d102      	bne.n	8004542 <_sbrk_r+0x1a>
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	b103      	cbz	r3, 8004542 <_sbrk_r+0x1a>
 8004540:	602b      	str	r3, [r5, #0]
 8004542:	bd38      	pop	{r3, r4, r5, pc}
 8004544:	20001620 	.word	0x20001620

08004548 <memchr>:
 8004548:	b510      	push	{r4, lr}
 800454a:	b2c9      	uxtb	r1, r1
 800454c:	4402      	add	r2, r0
 800454e:	4290      	cmp	r0, r2
 8004550:	4603      	mov	r3, r0
 8004552:	d101      	bne.n	8004558 <memchr+0x10>
 8004554:	2300      	movs	r3, #0
 8004556:	e003      	b.n	8004560 <memchr+0x18>
 8004558:	781c      	ldrb	r4, [r3, #0]
 800455a:	3001      	adds	r0, #1
 800455c:	428c      	cmp	r4, r1
 800455e:	d1f6      	bne.n	800454e <memchr+0x6>
 8004560:	4618      	mov	r0, r3
 8004562:	bd10      	pop	{r4, pc}

08004564 <memmove>:
 8004564:	4288      	cmp	r0, r1
 8004566:	b510      	push	{r4, lr}
 8004568:	eb01 0302 	add.w	r3, r1, r2
 800456c:	d807      	bhi.n	800457e <memmove+0x1a>
 800456e:	1e42      	subs	r2, r0, #1
 8004570:	4299      	cmp	r1, r3
 8004572:	d00a      	beq.n	800458a <memmove+0x26>
 8004574:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004578:	f802 4f01 	strb.w	r4, [r2, #1]!
 800457c:	e7f8      	b.n	8004570 <memmove+0xc>
 800457e:	4283      	cmp	r3, r0
 8004580:	d9f5      	bls.n	800456e <memmove+0xa>
 8004582:	1881      	adds	r1, r0, r2
 8004584:	1ad2      	subs	r2, r2, r3
 8004586:	42d3      	cmn	r3, r2
 8004588:	d100      	bne.n	800458c <memmove+0x28>
 800458a:	bd10      	pop	{r4, pc}
 800458c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004590:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004594:	e7f7      	b.n	8004586 <memmove+0x22>

08004596 <__malloc_lock>:
 8004596:	4770      	bx	lr

08004598 <__malloc_unlock>:
 8004598:	4770      	bx	lr

0800459a <_realloc_r>:
 800459a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459c:	4607      	mov	r7, r0
 800459e:	4614      	mov	r4, r2
 80045a0:	460e      	mov	r6, r1
 80045a2:	b921      	cbnz	r1, 80045ae <_realloc_r+0x14>
 80045a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80045a8:	4611      	mov	r1, r2
 80045aa:	f7ff bc89 	b.w	8003ec0 <_malloc_r>
 80045ae:	b922      	cbnz	r2, 80045ba <_realloc_r+0x20>
 80045b0:	f7ff fc3a 	bl	8003e28 <_free_r>
 80045b4:	4625      	mov	r5, r4
 80045b6:	4628      	mov	r0, r5
 80045b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ba:	f000 f814 	bl	80045e6 <_malloc_usable_size_r>
 80045be:	42a0      	cmp	r0, r4
 80045c0:	d20f      	bcs.n	80045e2 <_realloc_r+0x48>
 80045c2:	4621      	mov	r1, r4
 80045c4:	4638      	mov	r0, r7
 80045c6:	f7ff fc7b 	bl	8003ec0 <_malloc_r>
 80045ca:	4605      	mov	r5, r0
 80045cc:	2800      	cmp	r0, #0
 80045ce:	d0f2      	beq.n	80045b6 <_realloc_r+0x1c>
 80045d0:	4631      	mov	r1, r6
 80045d2:	4622      	mov	r2, r4
 80045d4:	f7ff fb50 	bl	8003c78 <memcpy>
 80045d8:	4631      	mov	r1, r6
 80045da:	4638      	mov	r0, r7
 80045dc:	f7ff fc24 	bl	8003e28 <_free_r>
 80045e0:	e7e9      	b.n	80045b6 <_realloc_r+0x1c>
 80045e2:	4635      	mov	r5, r6
 80045e4:	e7e7      	b.n	80045b6 <_realloc_r+0x1c>

080045e6 <_malloc_usable_size_r>:
 80045e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ea:	1f18      	subs	r0, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bfbc      	itt	lt
 80045f0:	580b      	ldrlt	r3, [r1, r0]
 80045f2:	18c0      	addlt	r0, r0, r3
 80045f4:	4770      	bx	lr
	...

080045f8 <_gettimeofday>:
 80045f8:	2258      	movs	r2, #88	; 0x58
 80045fa:	4b02      	ldr	r3, [pc, #8]	; (8004604 <_gettimeofday+0xc>)
 80045fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	4770      	bx	lr
 8004604:	20001620 	.word	0x20001620

08004608 <_init>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	bf00      	nop
 800460c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460e:	bc08      	pop	{r3}
 8004610:	469e      	mov	lr, r3
 8004612:	4770      	bx	lr

08004614 <_fini>:
 8004614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004616:	bf00      	nop
 8004618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800461a:	bc08      	pop	{r3}
 800461c:	469e      	mov	lr, r3
 800461e:	4770      	bx	lr
