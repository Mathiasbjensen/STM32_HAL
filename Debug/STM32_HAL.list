
STM32_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004320  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004430  08004430  00014430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044dc  080044dc  0002013c  2**0
                  CONTENTS
  4 .ARM          00000000  080044dc  080044dc  0002013c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044dc  080044dc  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044dc  080044dc  000144dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044e0  080044e0  000144e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  080044e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014d4  2000013c  08004620  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001610  08004620  00021610  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000115cb  00000000  00000000  00020165  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028a3  00000000  00000000  00031730  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001070  00000000  00000000  00033fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f38  00000000  00000000  00035048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019275  00000000  00000000  00035f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cc12  00000000  00000000  0004f1f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000923ad  00000000  00000000  0005be07  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ee1b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004824  00000000  00000000  000ee230  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  000f2a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000f2a78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000013c 	.word	0x2000013c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004418 	.word	0x08004418

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000140 	.word	0x20000140
 800014c:	08004418 	.word	0x08004418

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000158 	.word	0x20000158
 800018c:	200001ac 	.word	0x200001ac

08000190 <SARA_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void SARA_Init() {
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, SARAate0, strlen(SARAate0), 50);
 8000194:	4833      	ldr	r0, [pc, #204]	; (8000264 <SARA_Init+0xd4>)
 8000196:	f7ff ffdb 	bl	8000150 <strlen>
 800019a:	4603      	mov	r3, r0
 800019c:	b29a      	uxth	r2, r3
 800019e:	2332      	movs	r3, #50	; 0x32
 80001a0:	4930      	ldr	r1, [pc, #192]	; (8000264 <SARA_Init+0xd4>)
 80001a2:	4831      	ldr	r0, [pc, #196]	; (8000268 <SARA_Init+0xd8>)
 80001a4:	f002 f883 	bl	80022ae <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 80001a8:	2364      	movs	r3, #100	; 0x64
 80001aa:	2280      	movs	r2, #128	; 0x80
 80001ac:	492f      	ldr	r1, [pc, #188]	; (800026c <SARA_Init+0xdc>)
 80001ae:	482e      	ldr	r0, [pc, #184]	; (8000268 <SARA_Init+0xd8>)
 80001b0:	f002 f90f 	bl	80023d2 <HAL_UART_Receive>
	osDelay(500);
 80001b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001b8:	f002 faec 	bl	8002794 <osDelay>
	HAL_UART_Transmit(&huart1, SARAumnoprof, strlen(SARAumnoprof), 50);
 80001bc:	482c      	ldr	r0, [pc, #176]	; (8000270 <SARA_Init+0xe0>)
 80001be:	f7ff ffc7 	bl	8000150 <strlen>
 80001c2:	4603      	mov	r3, r0
 80001c4:	b29a      	uxth	r2, r3
 80001c6:	2332      	movs	r3, #50	; 0x32
 80001c8:	4929      	ldr	r1, [pc, #164]	; (8000270 <SARA_Init+0xe0>)
 80001ca:	4827      	ldr	r0, [pc, #156]	; (8000268 <SARA_Init+0xd8>)
 80001cc:	f002 f86f 	bl	80022ae <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 80001d0:	2364      	movs	r3, #100	; 0x64
 80001d2:	2280      	movs	r2, #128	; 0x80
 80001d4:	4925      	ldr	r1, [pc, #148]	; (800026c <SARA_Init+0xdc>)
 80001d6:	4824      	ldr	r0, [pc, #144]	; (8000268 <SARA_Init+0xd8>)
 80001d8:	f002 f8fb 	bl	80023d2 <HAL_UART_Receive>
	osDelay(500);
 80001dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001e0:	f002 fad8 	bl	8002794 <osDelay>
	//HAL_UART_Transmit(&huart1, cereg, strlen(cereg), 10);
	//osDelay(250);
	HAL_UART_Transmit(&huart1, SARAcops, strlen(SARAcops), 50);
 80001e4:	4823      	ldr	r0, [pc, #140]	; (8000274 <SARA_Init+0xe4>)
 80001e6:	f7ff ffb3 	bl	8000150 <strlen>
 80001ea:	4603      	mov	r3, r0
 80001ec:	b29a      	uxth	r2, r3
 80001ee:	2332      	movs	r3, #50	; 0x32
 80001f0:	4920      	ldr	r1, [pc, #128]	; (8000274 <SARA_Init+0xe4>)
 80001f2:	481d      	ldr	r0, [pc, #116]	; (8000268 <SARA_Init+0xd8>)
 80001f4:	f002 f85b 	bl	80022ae <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 80001f8:	2364      	movs	r3, #100	; 0x64
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	491b      	ldr	r1, [pc, #108]	; (800026c <SARA_Init+0xdc>)
 80001fe:	481a      	ldr	r0, [pc, #104]	; (8000268 <SARA_Init+0xd8>)
 8000200:	f002 f8e7 	bl	80023d2 <HAL_UART_Receive>
	osDelay(500);
 8000204:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000208:	f002 fac4 	bl	8002794 <osDelay>
	HAL_UART_Transmit(&huart1, SARAconnLTE, strlen(SARAconnLTE), 50);
 800020c:	481a      	ldr	r0, [pc, #104]	; (8000278 <SARA_Init+0xe8>)
 800020e:	f7ff ff9f 	bl	8000150 <strlen>
 8000212:	4603      	mov	r3, r0
 8000214:	b29a      	uxth	r2, r3
 8000216:	2332      	movs	r3, #50	; 0x32
 8000218:	4917      	ldr	r1, [pc, #92]	; (8000278 <SARA_Init+0xe8>)
 800021a:	4813      	ldr	r0, [pc, #76]	; (8000268 <SARA_Init+0xd8>)
 800021c:	f002 f847 	bl	80022ae <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 8000220:	2364      	movs	r3, #100	; 0x64
 8000222:	2280      	movs	r2, #128	; 0x80
 8000224:	4911      	ldr	r1, [pc, #68]	; (800026c <SARA_Init+0xdc>)
 8000226:	4810      	ldr	r0, [pc, #64]	; (8000268 <SARA_Init+0xd8>)
 8000228:	f002 f8d3 	bl	80023d2 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart1, SARAate0, strlen(SARAate0), 50);
 800022c:	480d      	ldr	r0, [pc, #52]	; (8000264 <SARA_Init+0xd4>)
 800022e:	f7ff ff8f 	bl	8000150 <strlen>
 8000232:	4603      	mov	r3, r0
 8000234:	b29a      	uxth	r2, r3
 8000236:	2332      	movs	r3, #50	; 0x32
 8000238:	490a      	ldr	r1, [pc, #40]	; (8000264 <SARA_Init+0xd4>)
 800023a:	480b      	ldr	r0, [pc, #44]	; (8000268 <SARA_Init+0xd8>)
 800023c:	f002 f837 	bl	80022ae <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 8000240:	2364      	movs	r3, #100	; 0x64
 8000242:	2280      	movs	r2, #128	; 0x80
 8000244:	4909      	ldr	r1, [pc, #36]	; (800026c <SARA_Init+0xdc>)
 8000246:	4808      	ldr	r0, [pc, #32]	; (8000268 <SARA_Init+0xd8>)
 8000248:	f002 f8c3 	bl	80023d2 <HAL_UART_Receive>

	osDelay(500);
 800024c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000250:	f002 faa0 	bl	8002794 <osDelay>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 8000254:	2364      	movs	r3, #100	; 0x64
 8000256:	2280      	movs	r2, #128	; 0x80
 8000258:	4904      	ldr	r1, [pc, #16]	; (800026c <SARA_Init+0xdc>)
 800025a:	4803      	ldr	r0, [pc, #12]	; (8000268 <SARA_Init+0xd8>)
 800025c:	f002 f8b9 	bl	80023d2 <HAL_UART_Receive>

}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000004 	.word	0x20000004
 8000268:	200012a4 	.word	0x200012a4
 800026c:	200011d4 	.word	0x200011d4
 8000270:	2000000c 	.word	0x2000000c
 8000274:	20000020 	.word	0x20000020
 8000278:	20000030 	.word	0x20000030

0800027c <nemeus_Power_Cycle>:

void nemeus_Power_Cycle() {
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000286:	4832      	ldr	r0, [pc, #200]	; (8000350 <nemeus_Power_Cycle+0xd4>)
 8000288:	f001 f8fc 	bl	8001484 <HAL_GPIO_WritePin>
    osDelay(1500);
 800028c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000290:	f002 fa80 	bl	8002794 <osDelay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000294:	2201      	movs	r2, #1
 8000296:	f44f 7180 	mov.w	r1, #256	; 0x100
 800029a:	482d      	ldr	r0, [pc, #180]	; (8000350 <nemeus_Power_Cycle+0xd4>)
 800029c:	f001 f8f2 	bl	8001484 <HAL_GPIO_WritePin>
	//osDelay(150);
    HAL_UART_Receive(&huart3, trash, 128, 150);
 80002a0:	2396      	movs	r3, #150	; 0x96
 80002a2:	2280      	movs	r2, #128	; 0x80
 80002a4:	492b      	ldr	r1, [pc, #172]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 80002a6:	482c      	ldr	r0, [pc, #176]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 80002a8:	f002 f893 	bl	80023d2 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart3, syncLora, strlen(syncLora), 10);
 80002ac:	482b      	ldr	r0, [pc, #172]	; (800035c <nemeus_Power_Cycle+0xe0>)
 80002ae:	f7ff ff4f 	bl	8000150 <strlen>
 80002b2:	4603      	mov	r3, r0
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	230a      	movs	r3, #10
 80002b8:	4928      	ldr	r1, [pc, #160]	; (800035c <nemeus_Power_Cycle+0xe0>)
 80002ba:	4827      	ldr	r0, [pc, #156]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 80002bc:	f001 fff7 	bl	80022ae <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, trash, 128, 100);
 80002c0:	2364      	movs	r3, #100	; 0x64
 80002c2:	2280      	movs	r2, #128	; 0x80
 80002c4:	4923      	ldr	r1, [pc, #140]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 80002c6:	4824      	ldr	r0, [pc, #144]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 80002c8:	f002 f883 	bl	80023d2 <HAL_UART_Receive>
	osDelay(500);
 80002cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002d0:	f002 fa60 	bl	8002794 <osDelay>

	HAL_UART_Transmit(&huart3, beginLora, strlen(beginLora), 10);
 80002d4:	4822      	ldr	r0, [pc, #136]	; (8000360 <nemeus_Power_Cycle+0xe4>)
 80002d6:	f7ff ff3b 	bl	8000150 <strlen>
 80002da:	4603      	mov	r3, r0
 80002dc:	b29a      	uxth	r2, r3
 80002de:	230a      	movs	r3, #10
 80002e0:	491f      	ldr	r1, [pc, #124]	; (8000360 <nemeus_Power_Cycle+0xe4>)
 80002e2:	481d      	ldr	r0, [pc, #116]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 80002e4:	f001 ffe3 	bl	80022ae <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, trash, 128, 100);
 80002e8:	2364      	movs	r3, #100	; 0x64
 80002ea:	2280      	movs	r2, #128	; 0x80
 80002ec:	4919      	ldr	r1, [pc, #100]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 80002ee:	481a      	ldr	r0, [pc, #104]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 80002f0:	f002 f86f 	bl	80023d2 <HAL_UART_Receive>
	//osDelay(1500);
	memset(trash, '\0', 128);
 80002f4:	2280      	movs	r2, #128	; 0x80
 80002f6:	2100      	movs	r1, #0
 80002f8:	4816      	ldr	r0, [pc, #88]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 80002fa:	f003 fbd0 	bl	8003a9e <memset>
	//HAL_UART_Receive(&huart3, trash, 128, 4000);
	HAL_UART_Receive(&huart3, trash, 10, 40000);
 80002fe:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000302:	220a      	movs	r2, #10
 8000304:	4913      	ldr	r1, [pc, #76]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 8000306:	4814      	ldr	r0, [pc, #80]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 8000308:	f002 f863 	bl	80023d2 <HAL_UART_Receive>
	HAL_UART_Receive(&huart3, trash, 128, 100);
 800030c:	2364      	movs	r3, #100	; 0x64
 800030e:	2280      	movs	r2, #128	; 0x80
 8000310:	4910      	ldr	r1, [pc, #64]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 8000312:	4811      	ldr	r0, [pc, #68]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 8000314:	f002 f85d 	bl	80023d2 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart3, beginSigfox, strlen(beginSigfox), 10);
 8000318:	4812      	ldr	r0, [pc, #72]	; (8000364 <nemeus_Power_Cycle+0xe8>)
 800031a:	f7ff ff19 	bl	8000150 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	b29a      	uxth	r2, r3
 8000322:	230a      	movs	r3, #10
 8000324:	490f      	ldr	r1, [pc, #60]	; (8000364 <nemeus_Power_Cycle+0xe8>)
 8000326:	480c      	ldr	r0, [pc, #48]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 8000328:	f001 ffc1 	bl	80022ae <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, trash, 128, 100);
 800032c:	2364      	movs	r3, #100	; 0x64
 800032e:	2280      	movs	r2, #128	; 0x80
 8000330:	4908      	ldr	r1, [pc, #32]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 8000332:	4809      	ldr	r0, [pc, #36]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 8000334:	f002 f84d 	bl	80023d2 <HAL_UART_Receive>
	osDelay(50);
 8000338:	2032      	movs	r0, #50	; 0x32
 800033a:	f002 fa2b 	bl	8002794 <osDelay>
	HAL_UART_Receive(&huart3, trash, 128, 100);
 800033e:	2364      	movs	r3, #100	; 0x64
 8000340:	2280      	movs	r2, #128	; 0x80
 8000342:	4904      	ldr	r1, [pc, #16]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 8000344:	4804      	ldr	r0, [pc, #16]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 8000346:	f002 f844 	bl	80023d2 <HAL_UART_Receive>


}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40010800 	.word	0x40010800
 8000354:	200011d4 	.word	0x200011d4
 8000358:	2000118c 	.word	0x2000118c
 800035c:	20000074 	.word	0x20000074
 8000360:	20000080 	.word	0x20000080
 8000364:	200000a4 	.word	0x200000a4

08000368 <SARA_ChangeTech>:
	HAL_UART_Transmit(&huart1, cmd, strlen(cmd), 10);
	HAL_UART_Receive(&huart1, SARAresult, 128, 100);
}


void SARA_ChangeTech(uint8_t tech){ //tech should be 9 for NB
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
	uint8_t lpwanTechnology[12];
	if(tech == '7'){
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	2b37      	cmp	r3, #55	; 0x37
 8000376:	d106      	bne.n	8000386 <SARA_ChangeTech+0x1e>
		strcpy(lpwanTechnology,SARAconnLTE);
 8000378:	f107 030c 	add.w	r3, r7, #12
 800037c:	4937      	ldr	r1, [pc, #220]	; (800045c <SARA_ChangeTech+0xf4>)
 800037e:	4618      	mov	r0, r3
 8000380:	f003 fc1d 	bl	8003bbe <strcpy>
 8000384:	e008      	b.n	8000398 <SARA_ChangeTech+0x30>
	}
	else if (tech == '9') {
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	2b39      	cmp	r3, #57	; 0x39
 800038a:	d105      	bne.n	8000398 <SARA_ChangeTech+0x30>
		strcpy(lpwanTechnology,SARAconnNB);
 800038c:	f107 030c 	add.w	r3, r7, #12
 8000390:	4933      	ldr	r1, [pc, #204]	; (8000460 <SARA_ChangeTech+0xf8>)
 8000392:	4618      	mov	r0, r3
 8000394:	f003 fc13 	bl	8003bbe <strcpy>
	}
	HAL_UART_Transmit(&huart1, lpwanTechnology, strlen(lpwanTechnology), 50);
 8000398:	f107 030c 	add.w	r3, r7, #12
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff fed7 	bl	8000150 <strlen>
 80003a2:	4603      	mov	r3, r0
 80003a4:	b29a      	uxth	r2, r3
 80003a6:	f107 010c 	add.w	r1, r7, #12
 80003aa:	2332      	movs	r3, #50	; 0x32
 80003ac:	482d      	ldr	r0, [pc, #180]	; (8000464 <SARA_ChangeTech+0xfc>)
 80003ae:	f001 ff7e 	bl	80022ae <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 80003b2:	2364      	movs	r3, #100	; 0x64
 80003b4:	2280      	movs	r2, #128	; 0x80
 80003b6:	492c      	ldr	r1, [pc, #176]	; (8000468 <SARA_ChangeTech+0x100>)
 80003b8:	482a      	ldr	r0, [pc, #168]	; (8000464 <SARA_ChangeTech+0xfc>)
 80003ba:	f002 f80a 	bl	80023d2 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart1, SARAcfun15, strlen(SARAcfun15), 50);
 80003be:	482b      	ldr	r0, [pc, #172]	; (800046c <SARA_ChangeTech+0x104>)
 80003c0:	f7ff fec6 	bl	8000150 <strlen>
 80003c4:	4603      	mov	r3, r0
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	2332      	movs	r3, #50	; 0x32
 80003ca:	4928      	ldr	r1, [pc, #160]	; (800046c <SARA_ChangeTech+0x104>)
 80003cc:	4825      	ldr	r0, [pc, #148]	; (8000464 <SARA_ChangeTech+0xfc>)
 80003ce:	f001 ff6e 	bl	80022ae <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 80003d2:	2364      	movs	r3, #100	; 0x64
 80003d4:	2280      	movs	r2, #128	; 0x80
 80003d6:	4924      	ldr	r1, [pc, #144]	; (8000468 <SARA_ChangeTech+0x100>)
 80003d8:	4822      	ldr	r0, [pc, #136]	; (8000464 <SARA_ChangeTech+0xfc>)
 80003da:	f001 fffa 	bl	80023d2 <HAL_UART_Receive>

	// Wait for device to restart and
	osDelay(5000);
 80003de:	f241 3088 	movw	r0, #5000	; 0x1388
 80003e2:	f002 f9d7 	bl	8002794 <osDelay>
	HAL_UART_Transmit(&huart1, SARAate0, strlen(SARAate0), 50);
 80003e6:	4822      	ldr	r0, [pc, #136]	; (8000470 <SARA_ChangeTech+0x108>)
 80003e8:	f7ff feb2 	bl	8000150 <strlen>
 80003ec:	4603      	mov	r3, r0
 80003ee:	b29a      	uxth	r2, r3
 80003f0:	2332      	movs	r3, #50	; 0x32
 80003f2:	491f      	ldr	r1, [pc, #124]	; (8000470 <SARA_ChangeTech+0x108>)
 80003f4:	481b      	ldr	r0, [pc, #108]	; (8000464 <SARA_ChangeTech+0xfc>)
 80003f6:	f001 ff5a 	bl	80022ae <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	2280      	movs	r2, #128	; 0x80
 80003fe:	491a      	ldr	r1, [pc, #104]	; (8000468 <SARA_ChangeTech+0x100>)
 8000400:	4818      	ldr	r0, [pc, #96]	; (8000464 <SARA_ChangeTech+0xfc>)
 8000402:	f001 ffe6 	bl	80023d2 <HAL_UART_Receive>
	if (tech == '9'){
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	2b39      	cmp	r3, #57	; 0x39
 800040a:	d103      	bne.n	8000414 <SARA_ChangeTech+0xac>
		osDelay(3000);
 800040c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000410:	f002 f9c0 	bl	8002794 <osDelay>
	}
	int i = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	61fb      	str	r3, [r7, #28]
	int msgLength;
	do {
		SARA_CheckTech();
 8000418:	f000 f830 	bl	800047c <SARA_CheckTech>
		msgLength = strlen(SARAtech);
 800041c:	4815      	ldr	r0, [pc, #84]	; (8000474 <SARA_ChangeTech+0x10c>)
 800041e:	f7ff fe97 	bl	8000150 <strlen>
 8000422:	4603      	mov	r3, r0
 8000424:	61bb      	str	r3, [r7, #24]
		getResultParameterURAT(3, SARAtech, msgLength);
 8000426:	69ba      	ldr	r2, [r7, #24]
 8000428:	4912      	ldr	r1, [pc, #72]	; (8000474 <SARA_ChangeTech+0x10c>)
 800042a:	2003      	movs	r0, #3
 800042c:	f000 f84a 	bl	80004c4 <getResultParameterURAT>
		sendToESP(SARATechnology);
 8000430:	4811      	ldr	r0, [pc, #68]	; (8000478 <SARA_ChangeTech+0x110>)
 8000432:	f000 fb05 	bl	8000a40 <sendToESP>
		osDelay(1500);
 8000436:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800043a:	f002 f9ab 	bl	8002794 <osDelay>
		i++;
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	3301      	adds	r3, #1
 8000442:	61fb      	str	r3, [r7, #28]
	} while (SARATechnology[0] != tech && i < 5);
 8000444:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <SARA_ChangeTech+0x110>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	79fa      	ldrb	r2, [r7, #7]
 800044a:	429a      	cmp	r2, r3
 800044c:	d002      	beq.n	8000454 <SARA_ChangeTech+0xec>
 800044e:	69fb      	ldr	r3, [r7, #28]
 8000450:	2b04      	cmp	r3, #4
 8000452:	dde1      	ble.n	8000418 <SARA_ChangeTech+0xb0>

}
 8000454:	bf00      	nop
 8000456:	3720      	adds	r7, #32
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}
 800045c:	20000030 	.word	0x20000030
 8000460:	2000003c 	.word	0x2000003c
 8000464:	200012a4 	.word	0x200012a4
 8000468:	200011d4 	.word	0x200011d4
 800046c:	20000054 	.word	0x20000054
 8000470:	20000004 	.word	0x20000004
 8000474:	20001530 	.word	0x20001530
 8000478:	200012a0 	.word	0x200012a0

0800047c <SARA_CheckTech>:

void SARA_CheckTech(){
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	memset(SARAtech,'\0',50);
 8000480:	2232      	movs	r2, #50	; 0x32
 8000482:	2100      	movs	r1, #0
 8000484:	480c      	ldr	r0, [pc, #48]	; (80004b8 <SARA_CheckTech+0x3c>)
 8000486:	f003 fb0a 	bl	8003a9e <memset>
	HAL_UART_Transmit(&huart1, SARAcopsCheck, strlen(SARAcopsCheck), 10);
 800048a:	480c      	ldr	r0, [pc, #48]	; (80004bc <SARA_CheckTech+0x40>)
 800048c:	f7ff fe60 	bl	8000150 <strlen>
 8000490:	4603      	mov	r3, r0
 8000492:	b29a      	uxth	r2, r3
 8000494:	230a      	movs	r3, #10
 8000496:	4909      	ldr	r1, [pc, #36]	; (80004bc <SARA_CheckTech+0x40>)
 8000498:	4809      	ldr	r0, [pc, #36]	; (80004c0 <SARA_CheckTech+0x44>)
 800049a:	f001 ff08 	bl	80022ae <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, SARAtech, 50, 1500);
 800049e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80004a2:	2232      	movs	r2, #50	; 0x32
 80004a4:	4904      	ldr	r1, [pc, #16]	; (80004b8 <SARA_CheckTech+0x3c>)
 80004a6:	4806      	ldr	r0, [pc, #24]	; (80004c0 <SARA_CheckTech+0x44>)
 80004a8:	f001 ff93 	bl	80023d2 <HAL_UART_Receive>
	sendToESP(SARAtech);
 80004ac:	4802      	ldr	r0, [pc, #8]	; (80004b8 <SARA_CheckTech+0x3c>)
 80004ae:	f000 fac7 	bl	8000a40 <sendToESP>
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20001530 	.word	0x20001530
 80004bc:	20000048 	.word	0x20000048
 80004c0:	200012a4 	.word	0x200012a4

080004c4 <getResultParameterURAT>:

void getResultParameterURAT(int nParam, uint8_t * msg, int msgLength){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
	memset(SARATechnology,'\0',1);
 80004d0:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <getResultParameterURAT+0x80>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
	int commaCnt = 0;
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]
	int i = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	613b      	str	r3, [r7, #16]
	while (msg[i] != '\0' && i < msgLength){
 80004de:	e024      	b.n	800052a <getResultParameterURAT+0x66>
		osDelay(50);
 80004e0:	2032      	movs	r0, #50	; 0x32
 80004e2:	f002 f957 	bl	8002794 <osDelay>
		if(msg[i] == ',' && commaCnt == nParam-1){
 80004e6:	693b      	ldr	r3, [r7, #16]
 80004e8:	68ba      	ldr	r2, [r7, #8]
 80004ea:	4413      	add	r3, r2
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b2c      	cmp	r3, #44	; 0x2c
 80004f0:	d10f      	bne.n	8000512 <getResultParameterURAT+0x4e>
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	3b01      	subs	r3, #1
 80004f6:	697a      	ldr	r2, [r7, #20]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d10a      	bne.n	8000512 <getResultParameterURAT+0x4e>
			memset(SARATechnology,'\0',1);
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <getResultParameterURAT+0x80>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
			SARATechnology[0] = msg[i+1];
 8000502:	693b      	ldr	r3, [r7, #16]
 8000504:	3301      	adds	r3, #1
 8000506:	68ba      	ldr	r2, [r7, #8]
 8000508:	4413      	add	r3, r2
 800050a:	781a      	ldrb	r2, [r3, #0]
 800050c:	4b0d      	ldr	r3, [pc, #52]	; (8000544 <getResultParameterURAT+0x80>)
 800050e:	701a      	strb	r2, [r3, #0]
			return;
 8000510:	e015      	b.n	800053e <getResultParameterURAT+0x7a>
		} else if(msg[i] == ','){
 8000512:	693b      	ldr	r3, [r7, #16]
 8000514:	68ba      	ldr	r2, [r7, #8]
 8000516:	4413      	add	r3, r2
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b2c      	cmp	r3, #44	; 0x2c
 800051c:	d102      	bne.n	8000524 <getResultParameterURAT+0x60>
			commaCnt++;
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	3301      	adds	r3, #1
 8000522:	617b      	str	r3, [r7, #20]
		}
		i++;
 8000524:	693b      	ldr	r3, [r7, #16]
 8000526:	3301      	adds	r3, #1
 8000528:	613b      	str	r3, [r7, #16]
	while (msg[i] != '\0' && i < msgLength){
 800052a:	693b      	ldr	r3, [r7, #16]
 800052c:	68ba      	ldr	r2, [r7, #8]
 800052e:	4413      	add	r3, r2
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d003      	beq.n	800053e <getResultParameterURAT+0x7a>
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	429a      	cmp	r2, r3
 800053c:	dbd0      	blt.n	80004e0 <getResultParameterURAT+0x1c>
	}
}
 800053e:	3718      	adds	r7, #24
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	200012a0 	.word	0x200012a0

08000548 <getGPSCoordinates>:
		i++;
		j++;
	}
}

void getGPSCoordinates(){
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	//memset(currentGPSCoords,'\0',80);
	HAL_UART_Receive(&huart1, trash, 128, 200);
 800054c:	23c8      	movs	r3, #200	; 0xc8
 800054e:	2280      	movs	r2, #128	; 0x80
 8000550:	491f      	ldr	r1, [pc, #124]	; (80005d0 <getGPSCoordinates+0x88>)
 8000552:	4820      	ldr	r0, [pc, #128]	; (80005d4 <getGPSCoordinates+0x8c>)
 8000554:	f001 ff3d 	bl	80023d2 <HAL_UART_Receive>
    HAL_UART_Transmit(&huart1, getGPSCoordsCommand, strlen(getGPSCoordsCommand), 10);
 8000558:	481f      	ldr	r0, [pc, #124]	; (80005d8 <getGPSCoordinates+0x90>)
 800055a:	f7ff fdf9 	bl	8000150 <strlen>
 800055e:	4603      	mov	r3, r0
 8000560:	b29a      	uxth	r2, r3
 8000562:	230a      	movs	r3, #10
 8000564:	491c      	ldr	r1, [pc, #112]	; (80005d8 <getGPSCoordinates+0x90>)
 8000566:	481b      	ldr	r0, [pc, #108]	; (80005d4 <getGPSCoordinates+0x8c>)
 8000568:	f001 fea1 	bl	80022ae <HAL_UART_Transmit>
    HAL_UART_Receive(&huart1, currentGPSCoords, 80, 1500);
 800056c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000570:	2250      	movs	r2, #80	; 0x50
 8000572:	491a      	ldr	r1, [pc, #104]	; (80005dc <getGPSCoordinates+0x94>)
 8000574:	4817      	ldr	r0, [pc, #92]	; (80005d4 <getGPSCoordinates+0x8c>)
 8000576:	f001 ff2c 	bl	80023d2 <HAL_UART_Receive>

    if (strlen(currentGPSCoords) < 5){ //arbitrary number, should be tweaked.
 800057a:	4818      	ldr	r0, [pc, #96]	; (80005dc <getGPSCoordinates+0x94>)
 800057c:	f7ff fde8 	bl	8000150 <strlen>
 8000580:	4603      	mov	r3, r0
 8000582:	2b04      	cmp	r3, #4
 8000584:	d822      	bhi.n	80005cc <getGPSCoordinates+0x84>
    	sendToESP(testing);
 8000586:	4816      	ldr	r0, [pc, #88]	; (80005e0 <getGPSCoordinates+0x98>)
 8000588:	f000 fa5a 	bl	8000a40 <sendToESP>
    	memset(currentGPSCoords,'\0',80);
 800058c:	2250      	movs	r2, #80	; 0x50
 800058e:	2100      	movs	r1, #0
 8000590:	4812      	ldr	r0, [pc, #72]	; (80005dc <getGPSCoordinates+0x94>)
 8000592:	f003 fa84 	bl	8003a9e <memset>
    	osDelay(400);
 8000596:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800059a:	f002 f8fb 	bl	8002794 <osDelay>
    	HAL_UART_Receive(&huart1, trash, 128, 200);
 800059e:	23c8      	movs	r3, #200	; 0xc8
 80005a0:	2280      	movs	r2, #128	; 0x80
 80005a2:	490b      	ldr	r1, [pc, #44]	; (80005d0 <getGPSCoordinates+0x88>)
 80005a4:	480b      	ldr	r0, [pc, #44]	; (80005d4 <getGPSCoordinates+0x8c>)
 80005a6:	f001 ff14 	bl	80023d2 <HAL_UART_Receive>
        HAL_UART_Transmit(&huart1, getGPSCoordsCommand, strlen(getGPSCoordsCommand), 10);
 80005aa:	480b      	ldr	r0, [pc, #44]	; (80005d8 <getGPSCoordinates+0x90>)
 80005ac:	f7ff fdd0 	bl	8000150 <strlen>
 80005b0:	4603      	mov	r3, r0
 80005b2:	b29a      	uxth	r2, r3
 80005b4:	230a      	movs	r3, #10
 80005b6:	4908      	ldr	r1, [pc, #32]	; (80005d8 <getGPSCoordinates+0x90>)
 80005b8:	4806      	ldr	r0, [pc, #24]	; (80005d4 <getGPSCoordinates+0x8c>)
 80005ba:	f001 fe78 	bl	80022ae <HAL_UART_Transmit>
        HAL_UART_Receive(&huart1, currentGPSCoords, 80, 1500);
 80005be:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80005c2:	2250      	movs	r2, #80	; 0x50
 80005c4:	4905      	ldr	r1, [pc, #20]	; (80005dc <getGPSCoordinates+0x94>)
 80005c6:	4803      	ldr	r0, [pc, #12]	; (80005d4 <getGPSCoordinates+0x8c>)
 80005c8:	f001 ff03 	bl	80023d2 <HAL_UART_Receive>
    }
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200011d4 	.word	0x200011d4
 80005d4:	200012a4 	.word	0x200012a4
 80005d8:	200000b0 	.word	0x200000b0
 80005dc:	20001564 	.word	0x20001564
 80005e0:	20000000 	.word	0x20000000

080005e4 <prepareSaraMeasurement>:

void prepareSaraMeasurement(int technology){
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	memset(SaraMeasurements,'\0',128);
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	2100      	movs	r1, #0
 80005f0:	4822      	ldr	r0, [pc, #136]	; (800067c <prepareSaraMeasurement+0x98>)
 80005f2:	f003 fa54 	bl	8003a9e <memset>
	if (technology == SARA_LTEM){
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	2b07      	cmp	r3, #7
 80005fa:	d103      	bne.n	8000604 <prepareSaraMeasurement+0x20>
		strcpy(SaraMeasurements,LTEMTechName);
 80005fc:	4920      	ldr	r1, [pc, #128]	; (8000680 <prepareSaraMeasurement+0x9c>)
 80005fe:	481f      	ldr	r0, [pc, #124]	; (800067c <prepareSaraMeasurement+0x98>)
 8000600:	f003 fadd 	bl	8003bbe <strcpy>
	}
	if (technology == SARA_NBIOT){
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b08      	cmp	r3, #8
 8000608:	d103      	bne.n	8000612 <prepareSaraMeasurement+0x2e>
		strcpy(SaraMeasurements,NBIoTTechName);
 800060a:	491e      	ldr	r1, [pc, #120]	; (8000684 <prepareSaraMeasurement+0xa0>)
 800060c:	481b      	ldr	r0, [pc, #108]	; (800067c <prepareSaraMeasurement+0x98>)
 800060e:	f003 fad6 	bl	8003bbe <strcpy>
	}

	strcat(SaraMeasurements,currentGPSCoords);
 8000612:	491d      	ldr	r1, [pc, #116]	; (8000688 <prepareSaraMeasurement+0xa4>)
 8000614:	4819      	ldr	r0, [pc, #100]	; (800067c <prepareSaraMeasurement+0x98>)
 8000616:	f003 fac3 	bl	8003ba0 <strcat>
	strcat(SaraMeasurements,SARARsrpRsrq);
 800061a:	491c      	ldr	r1, [pc, #112]	; (800068c <prepareSaraMeasurement+0xa8>)
 800061c:	4817      	ldr	r0, [pc, #92]	; (800067c <prepareSaraMeasurement+0x98>)
 800061e:	f003 fabf 	bl	8003ba0 <strcat>
	strcat(SaraMeasurements,",");
 8000622:	4816      	ldr	r0, [pc, #88]	; (800067c <prepareSaraMeasurement+0x98>)
 8000624:	f7ff fd94 	bl	8000150 <strlen>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <prepareSaraMeasurement+0x98>)
 800062e:	4413      	add	r3, r2
 8000630:	4917      	ldr	r1, [pc, #92]	; (8000690 <prepareSaraMeasurement+0xac>)
 8000632:	461a      	mov	r2, r3
 8000634:	460b      	mov	r3, r1
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	8013      	strh	r3, [r2, #0]
	strcat(SaraMeasurements,SARAcsqResult);
 800063a:	4916      	ldr	r1, [pc, #88]	; (8000694 <prepareSaraMeasurement+0xb0>)
 800063c:	480f      	ldr	r0, [pc, #60]	; (800067c <prepareSaraMeasurement+0x98>)
 800063e:	f003 faaf 	bl	8003ba0 <strcat>

	memset(currentGPSCoords,'\0',80);
 8000642:	2250      	movs	r2, #80	; 0x50
 8000644:	2100      	movs	r1, #0
 8000646:	4810      	ldr	r0, [pc, #64]	; (8000688 <prepareSaraMeasurement+0xa4>)
 8000648:	f003 fa29 	bl	8003a9e <memset>
	memset(SARARsrpRsrq,'\0',6);
 800064c:	2206      	movs	r2, #6
 800064e:	2100      	movs	r1, #0
 8000650:	480e      	ldr	r0, [pc, #56]	; (800068c <prepareSaraMeasurement+0xa8>)
 8000652:	f003 fa24 	bl	8003a9e <memset>
	memset(SARAcsqResult,'\0',4);
 8000656:	2204      	movs	r2, #4
 8000658:	2100      	movs	r1, #0
 800065a:	480e      	ldr	r0, [pc, #56]	; (8000694 <prepareSaraMeasurement+0xb0>)
 800065c:	f003 fa1f 	bl	8003a9e <memset>

	memset(saraCESQmessage,'\0',70);
 8000660:	2246      	movs	r2, #70	; 0x46
 8000662:	2100      	movs	r1, #0
 8000664:	480c      	ldr	r0, [pc, #48]	; (8000698 <prepareSaraMeasurement+0xb4>)
 8000666:	f003 fa1a 	bl	8003a9e <memset>
	memset(saraCSQmessage,'\0',50);
 800066a:	2232      	movs	r2, #50	; 0x32
 800066c:	2100      	movs	r1, #0
 800066e:	480b      	ldr	r0, [pc, #44]	; (800069c <prepareSaraMeasurement+0xb8>)
 8000670:	f003 fa15 	bl	8003a9e <memset>
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200012e8 	.word	0x200012e8
 8000680:	20000064 	.word	0x20000064
 8000684:	2000006c 	.word	0x2000006c
 8000688:	20001564 	.word	0x20001564
 800068c:	200015b4 	.word	0x200015b4
 8000690:	08004430 	.word	0x08004430
 8000694:	20001430 	.word	0x20001430
 8000698:	20001368 	.word	0x20001368
 800069c:	200014fc 	.word	0x200014fc

080006a0 <NEMEUS_Extract_Lora_Measurements>:

void NEMEUS_Extract_Lora_Measurements(uint8_t * cmd){
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
	int i = 8; // start after '+MAC: ' also contains 2 more of some ascii stuff???
 80006a8:	2308      	movs	r3, #8
 80006aa:	60fb      	str	r3, [r7, #12]
	int j = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]

	while(i < 69 && cmd[i] != '\n' && cmd[i] != '\0' && cmd[i] != '\r'){
 80006b0:	e00e      	b.n	80006d0 <NEMEUS_Extract_Lora_Measurements+0x30>
		currentLoraSignalQuality[j] = cmd[i];
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	4413      	add	r3, r2
 80006b8:	7819      	ldrb	r1, [r3, #0]
 80006ba:	4a12      	ldr	r2, [pc, #72]	; (8000704 <NEMEUS_Extract_Lora_Measurements+0x64>)
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	4413      	add	r3, r2
 80006c0:	460a      	mov	r2, r1
 80006c2:	701a      	strb	r2, [r3, #0]
		i++;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	3301      	adds	r3, #1
 80006c8:	60fb      	str	r3, [r7, #12]
		j++;
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	3301      	adds	r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
	while(i < 69 && cmd[i] != '\n' && cmd[i] != '\0' && cmd[i] != '\r'){
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	2b44      	cmp	r3, #68	; 0x44
 80006d4:	dc11      	bgt.n	80006fa <NEMEUS_Extract_Lora_Measurements+0x5a>
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	4413      	add	r3, r2
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b0a      	cmp	r3, #10
 80006e0:	d00b      	beq.n	80006fa <NEMEUS_Extract_Lora_Measurements+0x5a>
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	4413      	add	r3, r2
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d005      	beq.n	80006fa <NEMEUS_Extract_Lora_Measurements+0x5a>
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	687a      	ldr	r2, [r7, #4]
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b0d      	cmp	r3, #13
 80006f8:	d1db      	bne.n	80006b2 <NEMEUS_Extract_Lora_Measurements+0x12>
	}
}
 80006fa:	bf00      	nop
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr
 8000704:	20001258 	.word	0x20001258

08000708 <NEMEUS_Prepare_Lora_Measurements>:

void NEMEUS_Prepare_Lora_Measurements(){
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0

	strcpy(loraMeasurements,loraTechName);
 800070c:	4909      	ldr	r1, [pc, #36]	; (8000734 <NEMEUS_Prepare_Lora_Measurements+0x2c>)
 800070e:	480a      	ldr	r0, [pc, #40]	; (8000738 <NEMEUS_Prepare_Lora_Measurements+0x30>)
 8000710:	f003 fa55 	bl	8003bbe <strcpy>
	strcat(loraMeasurements,currentGPSCoords);
 8000714:	4909      	ldr	r1, [pc, #36]	; (800073c <NEMEUS_Prepare_Lora_Measurements+0x34>)
 8000716:	4808      	ldr	r0, [pc, #32]	; (8000738 <NEMEUS_Prepare_Lora_Measurements+0x30>)
 8000718:	f003 fa42 	bl	8003ba0 <strcat>
	strcat(loraMeasurements,currentLoraSignalQuality);
 800071c:	4908      	ldr	r1, [pc, #32]	; (8000740 <NEMEUS_Prepare_Lora_Measurements+0x38>)
 800071e:	4806      	ldr	r0, [pc, #24]	; (8000738 <NEMEUS_Prepare_Lora_Measurements+0x30>)
 8000720:	f003 fa3e 	bl	8003ba0 <strcat>

	memset(currentGPSCoords,'\0',80);
 8000724:	2250      	movs	r2, #80	; 0x50
 8000726:	2100      	movs	r1, #0
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <NEMEUS_Prepare_Lora_Measurements+0x34>)
 800072a:	f003 f9b8 	bl	8003a9e <memset>
}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200000b8 	.word	0x200000b8
 8000738:	200013b0 	.word	0x200013b0
 800073c:	20001564 	.word	0x20001564
 8000740:	20001258 	.word	0x20001258

08000744 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000744:	b5b0      	push	{r4, r5, r7, lr}
 8000746:	b08a      	sub	sp, #40	; 0x28
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800074a:	f000 fc2f 	bl	8000fac <HAL_Init>

  /* USER CODE BEGIN Init */

  srand(time(0));
 800074e:	2000      	movs	r0, #0
 8000750:	f003 fa3e 	bl	8003bd0 <time>
 8000754:	4603      	mov	r3, r0
 8000756:	460c      	mov	r4, r1
 8000758:	4618      	mov	r0, r3
 800075a:	4621      	mov	r1, r4
 800075c:	f003 f9a8 	bl	8003ab0 <srand>
  int x = rand();
 8000760:	f003 f9ca 	bl	8003af8 <rand>
 8000764:	6278      	str	r0, [r7, #36]	; 0x24
  int y = rand();
 8000766:	f003 f9c7 	bl	8003af8 <rand>
 800076a:	6238      	str	r0, [r7, #32]
  sprintf(randSeq, "%X", x%16);
 800076c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800076e:	425a      	negs	r2, r3
 8000770:	f003 030f 	and.w	r3, r3, #15
 8000774:	f002 020f 	and.w	r2, r2, #15
 8000778:	bf58      	it	pl
 800077a:	4253      	negpl	r3, r2
 800077c:	461a      	mov	r2, r3
 800077e:	491c      	ldr	r1, [pc, #112]	; (80007f0 <main+0xac>)
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <main+0xb0>)
 8000782:	f003 f9ed 	bl	8003b60 <siprintf>
  sprintf(stry, "%X", y%16);
 8000786:	6a3b      	ldr	r3, [r7, #32]
 8000788:	425a      	negs	r2, r3
 800078a:	f003 030f 	and.w	r3, r3, #15
 800078e:	f002 020f 	and.w	r2, r2, #15
 8000792:	bf58      	it	pl
 8000794:	4253      	negpl	r3, r2
 8000796:	461a      	mov	r2, r3
 8000798:	4915      	ldr	r1, [pc, #84]	; (80007f0 <main+0xac>)
 800079a:	4817      	ldr	r0, [pc, #92]	; (80007f8 <main+0xb4>)
 800079c:	f003 f9e0 	bl	8003b60 <siprintf>
  strcat(randSeq, stry);
 80007a0:	4915      	ldr	r1, [pc, #84]	; (80007f8 <main+0xb4>)
 80007a2:	4814      	ldr	r0, [pc, #80]	; (80007f4 <main+0xb0>)
 80007a4:	f003 f9fc 	bl	8003ba0 <strcat>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a8:	f000 f82e 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ac:	f000 f8e6 	bl	800097c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80007b0:	f000 f866 	bl	8000880 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80007b4:	f000 f88e 	bl	80008d4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80007b8:	f000 f8b6 	bl	8000928 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c2:	480e      	ldr	r0, [pc, #56]	; (80007fc <main+0xb8>)
 80007c4:	f000 fe5e 	bl	8001484 <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <main+0xbc>)
 80007ca:	1d3c      	adds	r4, r7, #4
 80007cc:	461d      	mov	r5, r3
 80007ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f001 ff8c 	bl	80026fc <osThreadCreate>
 80007e4:	4602      	mov	r2, r0
 80007e6:	4b07      	ldr	r3, [pc, #28]	; (8000804 <main+0xc0>)
 80007e8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007ea:	f001 ff80 	bl	80026ee <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <main+0xaa>
 80007f0:	08004434 	.word	0x08004434
 80007f4:	200015bc 	.word	0x200015bc
 80007f8:	20001438 	.word	0x20001438
 80007fc:	40010800 	.word	0x40010800
 8000800:	08004444 	.word	0x08004444
 8000804:	20001188 	.word	0x20001188

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b090      	sub	sp, #64	; 0x40
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0318 	add.w	r3, r7, #24
 8000812:	2228      	movs	r2, #40	; 0x28
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f003 f941 	bl	8003a9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800082a:	2302      	movs	r3, #2
 800082c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082e:	2301      	movs	r3, #1
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000832:	2310      	movs	r3, #16
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000836:	2300      	movs	r3, #0
 8000838:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	4618      	mov	r0, r3
 8000840:	f000 fe52 	bl	80014e8 <HAL_RCC_OscConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800084a:	f000 f9db 	bl	8000c04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084e:	230f      	movs	r3, #15
 8000850:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000852:	2300      	movs	r3, #0
 8000854:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800085a:	2300      	movs	r3, #0
 800085c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f001 f8be 	bl	80019e8 <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000872:	f000 f9c7 	bl	8000c04 <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3740      	adds	r7, #64	; 0x40
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000884:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 8000886:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <MX_USART1_UART_Init+0x50>)
 8000888:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800088a:	4b10      	ldr	r3, [pc, #64]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 800088c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000890:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 800089a:	2200      	movs	r2, #0
 800089c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089e:	4b0b      	ldr	r3, [pc, #44]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a4:	4b09      	ldr	r3, [pc, #36]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008a6:	220c      	movs	r2, #12
 80008a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008aa:	4b08      	ldr	r3, [pc, #32]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_USART1_UART_Init+0x4c>)
 80008b8:	f001 fcac 	bl	8002214 <HAL_UART_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008c2:	f000 f99f 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200012a4 	.word	0x200012a4
 80008d0:	40013800 	.word	0x40013800

080008d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d8:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008da:	4a12      	ldr	r2, [pc, #72]	; (8000924 <MX_USART2_UART_Init+0x50>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008e0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80008e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_USART2_UART_Init+0x4c>)
 800090c:	f001 fc82 	bl	8002214 <HAL_UART_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000916:	f000 f975 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	200014bc 	.word	0x200014bc
 8000924:	40004400 	.word	0x40004400

08000928 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_USART3_UART_Init+0x4c>)
 800092e:	4a12      	ldr	r2, [pc, #72]	; (8000978 <MX_USART3_UART_Init+0x50>)
 8000930:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000932:	4b10      	ldr	r3, [pc, #64]	; (8000974 <MX_USART3_UART_Init+0x4c>)
 8000934:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000938:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_USART3_UART_Init+0x4c>)
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_USART3_UART_Init+0x4c>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_USART3_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_USART3_UART_Init+0x4c>)
 800094e:	220c      	movs	r2, #12
 8000950:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_USART3_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_USART3_UART_Init+0x4c>)
 800095a:	2200      	movs	r2, #0
 800095c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_USART3_UART_Init+0x4c>)
 8000960:	f001 fc58 	bl	8002214 <HAL_UART_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800096a:	f000 f94b 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000118c 	.word	0x2000118c
 8000978:	40004800 	.word	0x40004800

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b088      	sub	sp, #32
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000990:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <MX_GPIO_Init+0xb8>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	4a27      	ldr	r2, [pc, #156]	; (8000a34 <MX_GPIO_Init+0xb8>)
 8000996:	f043 0310 	orr.w	r3, r3, #16
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <MX_GPIO_Init+0xb8>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0310 	and.w	r3, r3, #16
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_GPIO_Init+0xb8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	4a21      	ldr	r2, [pc, #132]	; (8000a34 <MX_GPIO_Init+0xb8>)
 80009ae:	f043 0304 	orr.w	r3, r3, #4
 80009b2:	6193      	str	r3, [r2, #24]
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_GPIO_Init+0xb8>)
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	f003 0304 	and.w	r3, r3, #4
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c0:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_GPIO_Init+0xb8>)
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	4a1b      	ldr	r2, [pc, #108]	; (8000a34 <MX_GPIO_Init+0xb8>)
 80009c6:	f043 0308 	orr.w	r3, r3, #8
 80009ca:	6193      	str	r3, [r2, #24]
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_GPIO_Init+0xb8>)
 80009ce:	699b      	ldr	r3, [r3, #24]
 80009d0:	f003 0308 	and.w	r3, r3, #8
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009de:	4816      	ldr	r0, [pc, #88]	; (8000a38 <MX_GPIO_Init+0xbc>)
 80009e0:	f000 fd50 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ea:	4814      	ldr	r0, [pc, #80]	; (8000a3c <MX_GPIO_Init+0xc0>)
 80009ec:	f000 fd4a 	bl	8001484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a02:	f107 0310 	add.w	r3, r7, #16
 8000a06:	4619      	mov	r1, r3
 8000a08:	480b      	ldr	r0, [pc, #44]	; (8000a38 <MX_GPIO_Init+0xbc>)
 8000a0a:	f000 fbe1 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4619      	mov	r1, r3
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_GPIO_Init+0xc0>)
 8000a28:	f000 fbd2 	bl	80011d0 <HAL_GPIO_Init>

}
 8000a2c:	bf00      	nop
 8000a2e:	3720      	adds	r7, #32
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40011000 	.word	0x40011000
 8000a3c:	40010800 	.word	0x40010800

08000a40 <sendToESP>:

/* USER CODE BEGIN 4 */

void sendToESP(uint8_t * msg) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, beginDelim, 1, 50);
 8000a48:	2332      	movs	r3, #50	; 0x32
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	490b      	ldr	r1, [pc, #44]	; (8000a7c <sendToESP+0x3c>)
 8000a4e:	480c      	ldr	r0, [pc, #48]	; (8000a80 <sendToESP+0x40>)
 8000a50:	f001 fc2d 	bl	80022ae <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, msg, strlen(msg), 50);
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff fb7b 	bl	8000150 <strlen>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	b29a      	uxth	r2, r3
 8000a5e:	2332      	movs	r3, #50	; 0x32
 8000a60:	6879      	ldr	r1, [r7, #4]
 8000a62:	4807      	ldr	r0, [pc, #28]	; (8000a80 <sendToESP+0x40>)
 8000a64:	f001 fc23 	bl	80022ae <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, endDelim, 1, 50);
 8000a68:	2332      	movs	r3, #50	; 0x32
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4905      	ldr	r1, [pc, #20]	; (8000a84 <sendToESP+0x44>)
 8000a6e:	4804      	ldr	r0, [pc, #16]	; (8000a80 <sendToESP+0x40>)
 8000a70:	f001 fc1d 	bl	80022ae <HAL_UART_Transmit>
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200000c0 	.word	0x200000c0
 8000a80:	200014bc 	.word	0x200014bc
 8000a84:	200000c4 	.word	0x200000c4

08000a88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b0b3      	sub	sp, #204	; 0xcc
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  uint8_t debugTest[] = "AT+DEBUG=ME?";
 8000a90:	4b47      	ldr	r3, [pc, #284]	; (8000bb0 <StartDefaultTask+0x128>)
 8000a92:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8000a96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a98:	c407      	stmia	r4!, {r0, r1, r2}
 8000a9a:	7023      	strb	r3, [r4, #0]
  sendToESP(debugTest);
 8000a9c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff ffcd 	bl	8000a40 <sendToESP>

  osDelay(4500);
 8000aa6:	f241 1094 	movw	r0, #4500	; 0x1194
 8000aaa:	f001 fe73 	bl	8002794 <osDelay>
  SARA_Init();
 8000aae:	f7ff fb6f 	bl	8000190 <SARA_Init>
  nemeus_Power_Cycle();
 8000ab2:	f7ff fbe3 	bl	800027c <nemeus_Power_Cycle>
  uint8_t LoRaMessage[69];
  uint8_t SigFoxMessage[69];

  for(;;)
  {
    osDelay(1000);
 8000ab6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aba:	f001 fe6b 	bl	8002794 <osDelay>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ac2:	483c      	ldr	r0, [pc, #240]	; (8000bb4 <StartDefaultTask+0x12c>)
 8000ac4:	f000 fcf6 	bl	80014b4 <HAL_GPIO_TogglePin>

    // **** SARA STUFF ****
    // ********************

    SARA_ChangeTech('7');
 8000ac8:	2037      	movs	r0, #55	; 0x37
 8000aca:	f7ff fc4d 	bl	8000368 <SARA_ChangeTech>
    osDelay(150);
 8000ace:	2096      	movs	r0, #150	; 0x96
 8000ad0:	f001 fe60 	bl	8002794 <osDelay>

    getGPSCoordinates();
 8000ad4:	f7ff fd38 	bl	8000548 <getGPSCoordinates>
    prepareSaraMeasurement(SARA_LTEM);
 8000ad8:	2007      	movs	r0, #7
 8000ada:	f7ff fd83 	bl	80005e4 <prepareSaraMeasurement>
    sendToESP(SaraMeasurements);
 8000ade:	4836      	ldr	r0, [pc, #216]	; (8000bb8 <StartDefaultTask+0x130>)
 8000ae0:	f7ff ffae 	bl	8000a40 <sendToESP>

	SARA_ChangeTech('9');
 8000ae4:	2039      	movs	r0, #57	; 0x39
 8000ae6:	f7ff fc3f 	bl	8000368 <SARA_ChangeTech>

    getGPSCoordinates();
 8000aea:	f7ff fd2d 	bl	8000548 <getGPSCoordinates>
    prepareSaraMeasurement(SARA_NBIOT);
 8000aee:	2008      	movs	r0, #8
 8000af0:	f7ff fd78 	bl	80005e4 <prepareSaraMeasurement>
    sendToESP(SaraMeasurements);
 8000af4:	4830      	ldr	r0, [pc, #192]	; (8000bb8 <StartDefaultTask+0x130>)
 8000af6:	f7ff ffa3 	bl	8000a40 <sendToESP>


    // **** NEMEUS STUFF ****
    // **********************

    HAL_UART_Transmit(&huart3, getLoraLCR, strlen(getLoraLCR), 50);
 8000afa:	4830      	ldr	r0, [pc, #192]	; (8000bbc <StartDefaultTask+0x134>)
 8000afc:	f7ff fb28 	bl	8000150 <strlen>
 8000b00:	4603      	mov	r3, r0
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	2332      	movs	r3, #50	; 0x32
 8000b06:	492d      	ldr	r1, [pc, #180]	; (8000bbc <StartDefaultTask+0x134>)
 8000b08:	482d      	ldr	r0, [pc, #180]	; (8000bc0 <StartDefaultTask+0x138>)
 8000b0a:	f001 fbd0 	bl	80022ae <HAL_UART_Transmit>
    HAL_UART_Receive(&huart3, LoRaMessage, 69, 10000);
 8000b0e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000b12:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b16:	2245      	movs	r2, #69	; 0x45
 8000b18:	4829      	ldr	r0, [pc, #164]	; (8000bc0 <StartDefaultTask+0x138>)
 8000b1a:	f001 fc5a 	bl	80023d2 <HAL_UART_Receive>
    NEMEUS_Extract_Lora_Measurements(LoRaMessage);
 8000b1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fdbc 	bl	80006a0 <NEMEUS_Extract_Lora_Measurements>

    getGPSCoordinates();
 8000b28:	f7ff fd0e 	bl	8000548 <getGPSCoordinates>
    osDelay(500);
 8000b2c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b30:	f001 fe30 	bl	8002794 <osDelay>

    NEMEUS_Prepare_Lora_Measurements();
 8000b34:	f7ff fde8 	bl	8000708 <NEMEUS_Prepare_Lora_Measurements>

    sendToESP(loraMeasurements);
 8000b38:	4822      	ldr	r0, [pc, #136]	; (8000bc4 <StartDefaultTask+0x13c>)
 8000b3a:	f7ff ff81 	bl	8000a40 <sendToESP>

    HAL_UART_Transmit(&huart2, crlf, strlen(crlf), 50);
 8000b3e:	2332      	movs	r3, #50	; 0x32
 8000b40:	2202      	movs	r2, #2
 8000b42:	4921      	ldr	r1, [pc, #132]	; (8000bc8 <StartDefaultTask+0x140>)
 8000b44:	4821      	ldr	r0, [pc, #132]	; (8000bcc <StartDefaultTask+0x144>)
 8000b46:	f001 fbb2 	bl	80022ae <HAL_UART_Transmit>

	osDelay(50);
 8000b4a:	2032      	movs	r0, #50	; 0x32
 8000b4c:	f001 fe22 	bl	8002794 <osDelay>
    //memset(saraMSG,'\0', 69);
	memset(SigFoxMessage, '\0', 69);
 8000b50:	f107 0308 	add.w	r3, r7, #8
 8000b54:	2245      	movs	r2, #69	; 0x45
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f002 ffa0 	bl	8003a9e <memset>
	memset(LoRaMessage, '\0', 69);
 8000b5e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000b62:	2245      	movs	r2, #69	; 0x45
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f002 ff99 	bl	8003a9e <memset>
	memset(currentGPSCoords,'\0',80);
 8000b6c:	2250      	movs	r2, #80	; 0x50
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4817      	ldr	r0, [pc, #92]	; (8000bd0 <StartDefaultTask+0x148>)
 8000b72:	f002 ff94 	bl	8003a9e <memset>
	memset(currentLoraSignalQuality,'\0',69);
 8000b76:	2245      	movs	r2, #69	; 0x45
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4816      	ldr	r0, [pc, #88]	; (8000bd4 <StartDefaultTask+0x14c>)
 8000b7c:	f002 ff8f 	bl	8003a9e <memset>
	memset(loraMeasurements,'\0',128);
 8000b80:	2280      	movs	r2, #128	; 0x80
 8000b82:	2100      	movs	r1, #0
 8000b84:	480f      	ldr	r0, [pc, #60]	; (8000bc4 <StartDefaultTask+0x13c>)
 8000b86:	f002 ff8a 	bl	8003a9e <memset>
	memset(sigfoxMeasurements,'\0',128);
 8000b8a:	2280      	movs	r2, #128	; 0x80
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4812      	ldr	r0, [pc, #72]	; (8000bd8 <StartDefaultTask+0x150>)
 8000b90:	f002 ff85 	bl	8003a9e <memset>
	memset(sigfoxSend,'\0',30);
 8000b94:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b98:	221e      	movs	r2, #30
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f002 ff7e 	bl	8003a9e <memset>
	sigFoxSeq++;
 8000ba2:	4b0e      	ldr	r3, [pc, #56]	; (8000bdc <StartDefaultTask+0x154>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	; (8000bdc <StartDefaultTask+0x154>)
 8000baa:	6013      	str	r3, [r2, #0]
    osDelay(1000);
 8000bac:	e783      	b.n	8000ab6 <StartDefaultTask+0x2e>
 8000bae:	bf00      	nop
 8000bb0:	08004460 	.word	0x08004460
 8000bb4:	40011000 	.word	0x40011000
 8000bb8:	200012e8 	.word	0x200012e8
 8000bbc:	20000094 	.word	0x20000094
 8000bc0:	2000118c 	.word	0x2000118c
 8000bc4:	200013b0 	.word	0x200013b0
 8000bc8:	0800448c 	.word	0x0800448c
 8000bcc:	200014bc 	.word	0x200014bc
 8000bd0:	20001564 	.word	0x20001564
 8000bd4:	20001258 	.word	0x20001258
 8000bd8:	2000143c 	.word	0x2000143c
 8000bdc:	200003ac 	.word	0x200003ac

08000be0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d101      	bne.n	8000bf6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bf2:	f000 f9f1 	bl	8000fd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40012c00 	.word	0x40012c00

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <Error_Handler+0x6>

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c12:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <HAL_MspInit+0x68>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <HAL_MspInit+0x68>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6193      	str	r3, [r2, #24]
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <HAL_MspInit+0x68>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <HAL_MspInit+0x68>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <HAL_MspInit+0x68>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	61d3      	str	r3, [r2, #28]
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <HAL_MspInit+0x68>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	210f      	movs	r1, #15
 8000c46:	f06f 0001 	mvn.w	r0, #1
 8000c4a:	f000 fa96 	bl	800117a <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000c4e:	4b0a      	ldr	r3, [pc, #40]	; (8000c78 <HAL_MspInit+0x6c>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_MspInit+0x6c>)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	40010000 	.word	0x40010000

08000c7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08c      	sub	sp, #48	; 0x30
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0320 	add.w	r3, r7, #32
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a53      	ldr	r2, [pc, #332]	; (8000de4 <HAL_UART_MspInit+0x168>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d132      	bne.n	8000d02 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c9c:	4b52      	ldr	r3, [pc, #328]	; (8000de8 <HAL_UART_MspInit+0x16c>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a51      	ldr	r2, [pc, #324]	; (8000de8 <HAL_UART_MspInit+0x16c>)
 8000ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca6:	6193      	str	r3, [r2, #24]
 8000ca8:	4b4f      	ldr	r3, [pc, #316]	; (8000de8 <HAL_UART_MspInit+0x16c>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb0:	61fb      	str	r3, [r7, #28]
 8000cb2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb4:	4b4c      	ldr	r3, [pc, #304]	; (8000de8 <HAL_UART_MspInit+0x16c>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a4b      	ldr	r2, [pc, #300]	; (8000de8 <HAL_UART_MspInit+0x16c>)
 8000cba:	f043 0304 	orr.w	r3, r3, #4
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b49      	ldr	r3, [pc, #292]	; (8000de8 <HAL_UART_MspInit+0x16c>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0304 	and.w	r3, r3, #4
 8000cc8:	61bb      	str	r3, [r7, #24]
 8000cca:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cda:	f107 0320 	add.w	r3, r7, #32
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4842      	ldr	r0, [pc, #264]	; (8000dec <HAL_UART_MspInit+0x170>)
 8000ce2:	f000 fa75 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ce6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0320 	add.w	r3, r7, #32
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	483c      	ldr	r0, [pc, #240]	; (8000dec <HAL_UART_MspInit+0x170>)
 8000cfc:	f000 fa68 	bl	80011d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d00:	e06c      	b.n	8000ddc <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a3a      	ldr	r2, [pc, #232]	; (8000df0 <HAL_UART_MspInit+0x174>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d130      	bne.n	8000d6e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d0c:	4b36      	ldr	r3, [pc, #216]	; (8000de8 <HAL_UART_MspInit+0x16c>)
 8000d0e:	69db      	ldr	r3, [r3, #28]
 8000d10:	4a35      	ldr	r2, [pc, #212]	; (8000de8 <HAL_UART_MspInit+0x16c>)
 8000d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d16:	61d3      	str	r3, [r2, #28]
 8000d18:	4b33      	ldr	r3, [pc, #204]	; (8000de8 <HAL_UART_MspInit+0x16c>)
 8000d1a:	69db      	ldr	r3, [r3, #28]
 8000d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b30      	ldr	r3, [pc, #192]	; (8000de8 <HAL_UART_MspInit+0x16c>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a2f      	ldr	r2, [pc, #188]	; (8000de8 <HAL_UART_MspInit+0x16c>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b2d      	ldr	r3, [pc, #180]	; (8000de8 <HAL_UART_MspInit+0x16c>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d40:	2302      	movs	r3, #2
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d48:	f107 0320 	add.w	r3, r7, #32
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4827      	ldr	r0, [pc, #156]	; (8000dec <HAL_UART_MspInit+0x170>)
 8000d50:	f000 fa3e 	bl	80011d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d54:	2308      	movs	r3, #8
 8000d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 0320 	add.w	r3, r7, #32
 8000d64:	4619      	mov	r1, r3
 8000d66:	4821      	ldr	r0, [pc, #132]	; (8000dec <HAL_UART_MspInit+0x170>)
 8000d68:	f000 fa32 	bl	80011d0 <HAL_GPIO_Init>
}
 8000d6c:	e036      	b.n	8000ddc <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a20      	ldr	r2, [pc, #128]	; (8000df4 <HAL_UART_MspInit+0x178>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d131      	bne.n	8000ddc <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d78:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <HAL_UART_MspInit+0x16c>)
 8000d7a:	69db      	ldr	r3, [r3, #28]
 8000d7c:	4a1a      	ldr	r2, [pc, #104]	; (8000de8 <HAL_UART_MspInit+0x16c>)
 8000d7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d82:	61d3      	str	r3, [r2, #28]
 8000d84:	4b18      	ldr	r3, [pc, #96]	; (8000de8 <HAL_UART_MspInit+0x16c>)
 8000d86:	69db      	ldr	r3, [r3, #28]
 8000d88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d90:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_UART_MspInit+0x16c>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <HAL_UART_MspInit+0x16c>)
 8000d96:	f043 0308 	orr.w	r3, r3, #8
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_UART_MspInit+0x16c>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0308 	and.w	r3, r3, #8
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000db2:	2303      	movs	r3, #3
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db6:	f107 0320 	add.w	r3, r7, #32
 8000dba:	4619      	mov	r1, r3
 8000dbc:	480e      	ldr	r0, [pc, #56]	; (8000df8 <HAL_UART_MspInit+0x17c>)
 8000dbe:	f000 fa07 	bl	80011d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000dc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd0:	f107 0320 	add.w	r3, r7, #32
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4808      	ldr	r0, [pc, #32]	; (8000df8 <HAL_UART_MspInit+0x17c>)
 8000dd8:	f000 f9fa 	bl	80011d0 <HAL_GPIO_Init>
}
 8000ddc:	bf00      	nop
 8000dde:	3730      	adds	r7, #48	; 0x30
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40013800 	.word	0x40013800
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40010800 	.word	0x40010800
 8000df0:	40004400 	.word	0x40004400
 8000df4:	40004800 	.word	0x40004800
 8000df8:	40010c00 	.word	0x40010c00

08000dfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08c      	sub	sp, #48	; 0x30
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	2019      	movs	r0, #25
 8000e12:	f000 f9b2 	bl	800117a <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000e16:	2019      	movs	r0, #25
 8000e18:	f000 f9cb 	bl	80011b2 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000e1c:	4b1e      	ldr	r3, [pc, #120]	; (8000e98 <HAL_InitTick+0x9c>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a1d      	ldr	r2, [pc, #116]	; (8000e98 <HAL_InitTick+0x9c>)
 8000e22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e26:	6193      	str	r3, [r2, #24]
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <HAL_InitTick+0x9c>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e34:	f107 0210 	add.w	r2, r7, #16
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 ff50 	bl	8001ce4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000e44:	f000 ff3a 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 8000e48:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4c:	4a13      	ldr	r2, [pc, #76]	; (8000e9c <HAL_InitTick+0xa0>)
 8000e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e52:	0c9b      	lsrs	r3, r3, #18
 8000e54:	3b01      	subs	r3, #1
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_InitTick+0xa4>)
 8000e5a:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <HAL_InitTick+0xa8>)
 8000e5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <HAL_InitTick+0xa4>)
 8000e60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e64:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000e66:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <HAL_InitTick+0xa4>)
 8000e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <HAL_InitTick+0xa4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e72:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_InitTick+0xa4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000e78:	4809      	ldr	r0, [pc, #36]	; (8000ea0 <HAL_InitTick+0xa4>)
 8000e7a:	f000 ff81 	bl	8001d80 <HAL_TIM_Base_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d104      	bne.n	8000e8e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000e84:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <HAL_InitTick+0xa4>)
 8000e86:	f000 ffd3 	bl	8001e30 <HAL_TIM_Base_Start_IT>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3730      	adds	r7, #48	; 0x30
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	431bde83 	.word	0x431bde83
 8000ea0:	200015c0 	.word	0x200015c0
 8000ea4:	40012c00 	.word	0x40012c00

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
	...

08000ed4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <TIM1_UP_IRQHandler+0x10>)
 8000eda:	f000 fffb 	bl	8001ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200015c0 	.word	0x200015c0

08000ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef0:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <_sbrk+0x5c>)
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <_sbrk+0x60>)
 8000ef4:	1ad3      	subs	r3, r2, r3
 8000ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <_sbrk+0x64>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d102      	bne.n	8000f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f04:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <_sbrk+0x64>)
 8000f06:	4a12      	ldr	r2, [pc, #72]	; (8000f50 <_sbrk+0x68>)
 8000f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f0a:	4b10      	ldr	r3, [pc, #64]	; (8000f4c <_sbrk+0x64>)
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d207      	bcs.n	8000f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f18:	f002 fd8c 	bl	8003a34 <__errno>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	230c      	movs	r3, #12
 8000f20:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f26:	e009      	b.n	8000f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <_sbrk+0x64>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <_sbrk+0x64>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4413      	add	r3, r2
 8000f36:	4a05      	ldr	r2, [pc, #20]	; (8000f4c <_sbrk+0x64>)
 8000f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20005000 	.word	0x20005000
 8000f48:	00000400 	.word	0x00000400
 8000f4c:	200003b0 	.word	0x200003b0
 8000f50:	20001610 	.word	0x20001610

08000f54 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f60:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f62:	e003      	b.n	8000f6c <LoopCopyDataInit>

08000f64 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000f66:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f68:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f6a:	3104      	adds	r1, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f6c:	480a      	ldr	r0, [pc, #40]	; (8000f98 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000f70:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f72:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f74:	d3f6      	bcc.n	8000f64 <CopyDataInit>
  ldr r2, =_sbss
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000f78:	e002      	b.n	8000f80 <LoopFillZerobss>

08000f7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000f7c:	f842 3b04 	str.w	r3, [r2], #4

08000f80 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000f82:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f84:	d3f9      	bcc.n	8000f7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f86:	f7ff ffe5 	bl	8000f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f8a:	f002 fd59 	bl	8003a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f8e:	f7ff fbd9 	bl	8000744 <main>
  bx lr
 8000f92:	4770      	bx	lr
  ldr r3, =_sidata
 8000f94:	080044e4 	.word	0x080044e4
  ldr r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f9c:	2000013c 	.word	0x2000013c
  ldr r2, =_sbss
 8000fa0:	2000013c 	.word	0x2000013c
  ldr r3, = _ebss
 8000fa4:	20001610 	.word	0x20001610

08000fa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC1_2_IRQHandler>
	...

08000fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_Init+0x28>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <HAL_Init+0x28>)
 8000fb6:	f043 0310 	orr.w	r3, r3, #16
 8000fba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fbc:	2003      	movs	r0, #3
 8000fbe:	f000 f8d1 	bl	8001164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f7ff ff1a 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc8:	f7ff fe20 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40022000 	.word	0x40022000

08000fd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fdc:	4b05      	ldr	r3, [pc, #20]	; (8000ff4 <HAL_IncTick+0x1c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_IncTick+0x20>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a03      	ldr	r2, [pc, #12]	; (8000ff8 <HAL_IncTick+0x20>)
 8000fea:	6013      	str	r3, [r2, #0]
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr
 8000ff4:	200000d0 	.word	0x200000d0
 8000ff8:	20001608 	.word	0x20001608

08000ffc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b02      	ldr	r3, [pc, #8]	; (800100c <HAL_GetTick+0x10>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	4618      	mov	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	20001608 	.word	0x20001608

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001038:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001042:	4a04      	ldr	r2, [pc, #16]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	60d3      	str	r3, [r2, #12]
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4906      	ldr	r1, [pc, #24]	; (80010a8 <__NVIC_EnableIRQ+0x34>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100

080010ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	6039      	str	r1, [r7, #0]
 80010b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	db0a      	blt.n	80010d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	490c      	ldr	r1, [pc, #48]	; (80010f8 <__NVIC_SetPriority+0x4c>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	b2d2      	uxtb	r2, r2
 80010ce:	440b      	add	r3, r1
 80010d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d4:	e00a      	b.n	80010ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	4908      	ldr	r1, [pc, #32]	; (80010fc <__NVIC_SetPriority+0x50>)
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	f003 030f 	and.w	r3, r3, #15
 80010e2:	3b04      	subs	r3, #4
 80010e4:	0112      	lsls	r2, r2, #4
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	440b      	add	r3, r1
 80010ea:	761a      	strb	r2, [r3, #24]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	f1c3 0307 	rsb	r3, r3, #7
 800111a:	2b04      	cmp	r3, #4
 800111c:	bf28      	it	cs
 800111e:	2304      	movcs	r3, #4
 8001120:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	3304      	adds	r3, #4
 8001126:	2b06      	cmp	r3, #6
 8001128:	d902      	bls.n	8001130 <NVIC_EncodePriority+0x30>
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	3b03      	subs	r3, #3
 800112e:	e000      	b.n	8001132 <NVIC_EncodePriority+0x32>
 8001130:	2300      	movs	r3, #0
 8001132:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	401a      	ands	r2, r3
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001148:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	fa01 f303 	lsl.w	r3, r1, r3
 8001152:	43d9      	mvns	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001158:	4313      	orrs	r3, r2
         );
}
 800115a:	4618      	mov	r0, r3
 800115c:	3724      	adds	r7, #36	; 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff4f 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800118c:	f7ff ff64 	bl	8001058 <__NVIC_GetPriorityGrouping>
 8001190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff ffb2 	bl	8001100 <NVIC_EncodePriority>
 800119c:	4602      	mov	r2, r0
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff81 	bl	80010ac <__NVIC_SetPriority>
}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff57 	bl	8001074 <__NVIC_EnableIRQ>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b08b      	sub	sp, #44	; 0x2c
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011da:	2300      	movs	r3, #0
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011de:	2300      	movs	r3, #0
 80011e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011e2:	e127      	b.n	8001434 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011e4:	2201      	movs	r2, #1
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	69fa      	ldr	r2, [r7, #28]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	f040 8116 	bne.w	800142e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b12      	cmp	r3, #18
 8001208:	d034      	beq.n	8001274 <HAL_GPIO_Init+0xa4>
 800120a:	2b12      	cmp	r3, #18
 800120c:	d80d      	bhi.n	800122a <HAL_GPIO_Init+0x5a>
 800120e:	2b02      	cmp	r3, #2
 8001210:	d02b      	beq.n	800126a <HAL_GPIO_Init+0x9a>
 8001212:	2b02      	cmp	r3, #2
 8001214:	d804      	bhi.n	8001220 <HAL_GPIO_Init+0x50>
 8001216:	2b00      	cmp	r3, #0
 8001218:	d031      	beq.n	800127e <HAL_GPIO_Init+0xae>
 800121a:	2b01      	cmp	r3, #1
 800121c:	d01c      	beq.n	8001258 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800121e:	e048      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001220:	2b03      	cmp	r3, #3
 8001222:	d043      	beq.n	80012ac <HAL_GPIO_Init+0xdc>
 8001224:	2b11      	cmp	r3, #17
 8001226:	d01b      	beq.n	8001260 <HAL_GPIO_Init+0x90>
          break;
 8001228:	e043      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800122a:	4a89      	ldr	r2, [pc, #548]	; (8001450 <HAL_GPIO_Init+0x280>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d026      	beq.n	800127e <HAL_GPIO_Init+0xae>
 8001230:	4a87      	ldr	r2, [pc, #540]	; (8001450 <HAL_GPIO_Init+0x280>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d806      	bhi.n	8001244 <HAL_GPIO_Init+0x74>
 8001236:	4a87      	ldr	r2, [pc, #540]	; (8001454 <HAL_GPIO_Init+0x284>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d020      	beq.n	800127e <HAL_GPIO_Init+0xae>
 800123c:	4a86      	ldr	r2, [pc, #536]	; (8001458 <HAL_GPIO_Init+0x288>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d01d      	beq.n	800127e <HAL_GPIO_Init+0xae>
          break;
 8001242:	e036      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001244:	4a85      	ldr	r2, [pc, #532]	; (800145c <HAL_GPIO_Init+0x28c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d019      	beq.n	800127e <HAL_GPIO_Init+0xae>
 800124a:	4a85      	ldr	r2, [pc, #532]	; (8001460 <HAL_GPIO_Init+0x290>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d016      	beq.n	800127e <HAL_GPIO_Init+0xae>
 8001250:	4a84      	ldr	r2, [pc, #528]	; (8001464 <HAL_GPIO_Init+0x294>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d013      	beq.n	800127e <HAL_GPIO_Init+0xae>
          break;
 8001256:	e02c      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	623b      	str	r3, [r7, #32]
          break;
 800125e:	e028      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	3304      	adds	r3, #4
 8001266:	623b      	str	r3, [r7, #32]
          break;
 8001268:	e023      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	3308      	adds	r3, #8
 8001270:	623b      	str	r3, [r7, #32]
          break;
 8001272:	e01e      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	330c      	adds	r3, #12
 800127a:	623b      	str	r3, [r7, #32]
          break;
 800127c:	e019      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d102      	bne.n	800128c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001286:	2304      	movs	r3, #4
 8001288:	623b      	str	r3, [r7, #32]
          break;
 800128a:	e012      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d105      	bne.n	80012a0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001294:	2308      	movs	r3, #8
 8001296:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	611a      	str	r2, [r3, #16]
          break;
 800129e:	e008      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012a0:	2308      	movs	r3, #8
 80012a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	615a      	str	r2, [r3, #20]
          break;
 80012aa:	e002      	b.n	80012b2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
          break;
 80012b0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	2bff      	cmp	r3, #255	; 0xff
 80012b6:	d801      	bhi.n	80012bc <HAL_GPIO_Init+0xec>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	e001      	b.n	80012c0 <HAL_GPIO_Init+0xf0>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3304      	adds	r3, #4
 80012c0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2bff      	cmp	r3, #255	; 0xff
 80012c6:	d802      	bhi.n	80012ce <HAL_GPIO_Init+0xfe>
 80012c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	e002      	b.n	80012d4 <HAL_GPIO_Init+0x104>
 80012ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d0:	3b08      	subs	r3, #8
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	210f      	movs	r1, #15
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	401a      	ands	r2, r3
 80012e6:	6a39      	ldr	r1, [r7, #32]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	431a      	orrs	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 8096 	beq.w	800142e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001302:	4b59      	ldr	r3, [pc, #356]	; (8001468 <HAL_GPIO_Init+0x298>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	4a58      	ldr	r2, [pc, #352]	; (8001468 <HAL_GPIO_Init+0x298>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6193      	str	r3, [r2, #24]
 800130e:	4b56      	ldr	r3, [pc, #344]	; (8001468 <HAL_GPIO_Init+0x298>)
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800131a:	4a54      	ldr	r2, [pc, #336]	; (800146c <HAL_GPIO_Init+0x29c>)
 800131c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131e:	089b      	lsrs	r3, r3, #2
 8001320:	3302      	adds	r3, #2
 8001322:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001326:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132a:	f003 0303 	and.w	r3, r3, #3
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	220f      	movs	r2, #15
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4013      	ands	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4b      	ldr	r2, [pc, #300]	; (8001470 <HAL_GPIO_Init+0x2a0>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d013      	beq.n	800136e <HAL_GPIO_Init+0x19e>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4a      	ldr	r2, [pc, #296]	; (8001474 <HAL_GPIO_Init+0x2a4>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d00d      	beq.n	800136a <HAL_GPIO_Init+0x19a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a49      	ldr	r2, [pc, #292]	; (8001478 <HAL_GPIO_Init+0x2a8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d007      	beq.n	8001366 <HAL_GPIO_Init+0x196>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a48      	ldr	r2, [pc, #288]	; (800147c <HAL_GPIO_Init+0x2ac>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_GPIO_Init+0x192>
 800135e:	2303      	movs	r3, #3
 8001360:	e006      	b.n	8001370 <HAL_GPIO_Init+0x1a0>
 8001362:	2304      	movs	r3, #4
 8001364:	e004      	b.n	8001370 <HAL_GPIO_Init+0x1a0>
 8001366:	2302      	movs	r3, #2
 8001368:	e002      	b.n	8001370 <HAL_GPIO_Init+0x1a0>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_GPIO_Init+0x1a0>
 800136e:	2300      	movs	r3, #0
 8001370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001372:	f002 0203 	and.w	r2, r2, #3
 8001376:	0092      	lsls	r2, r2, #2
 8001378:	4093      	lsls	r3, r2
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	4313      	orrs	r3, r2
 800137e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001380:	493a      	ldr	r1, [pc, #232]	; (800146c <HAL_GPIO_Init+0x29c>)
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	089b      	lsrs	r3, r3, #2
 8001386:	3302      	adds	r3, #2
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d006      	beq.n	80013a8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800139a:	4b39      	ldr	r3, [pc, #228]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4938      	ldr	r1, [pc, #224]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
 80013a6:	e006      	b.n	80013b6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013a8:	4b35      	ldr	r3, [pc, #212]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	4933      	ldr	r1, [pc, #204]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 80013b2:	4013      	ands	r3, r2
 80013b4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d006      	beq.n	80013d0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013c2:	4b2f      	ldr	r3, [pc, #188]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	492e      	ldr	r1, [pc, #184]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	604b      	str	r3, [r1, #4]
 80013ce:	e006      	b.n	80013de <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013d0:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	4929      	ldr	r1, [pc, #164]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 80013da:	4013      	ands	r3, r2
 80013dc:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013ea:	4b25      	ldr	r3, [pc, #148]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	4924      	ldr	r1, [pc, #144]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	608b      	str	r3, [r1, #8]
 80013f6:	e006      	b.n	8001406 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013f8:	4b21      	ldr	r3, [pc, #132]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	43db      	mvns	r3, r3
 8001400:	491f      	ldr	r1, [pc, #124]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 8001402:	4013      	ands	r3, r2
 8001404:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001412:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 8001414:	68da      	ldr	r2, [r3, #12]
 8001416:	491a      	ldr	r1, [pc, #104]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	4313      	orrs	r3, r2
 800141c:	60cb      	str	r3, [r1, #12]
 800141e:	e006      	b.n	800142e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 8001422:	68da      	ldr	r2, [r3, #12]
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	43db      	mvns	r3, r3
 8001428:	4915      	ldr	r1, [pc, #84]	; (8001480 <HAL_GPIO_Init+0x2b0>)
 800142a:	4013      	ands	r3, r2
 800142c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	3301      	adds	r3, #1
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143a:	fa22 f303 	lsr.w	r3, r2, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	f47f aed0 	bne.w	80011e4 <HAL_GPIO_Init+0x14>
  }
}
 8001444:	bf00      	nop
 8001446:	372c      	adds	r7, #44	; 0x2c
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	10210000 	.word	0x10210000
 8001454:	10110000 	.word	0x10110000
 8001458:	10120000 	.word	0x10120000
 800145c:	10310000 	.word	0x10310000
 8001460:	10320000 	.word	0x10320000
 8001464:	10220000 	.word	0x10220000
 8001468:	40021000 	.word	0x40021000
 800146c:	40010000 	.word	0x40010000
 8001470:	40010800 	.word	0x40010800
 8001474:	40010c00 	.word	0x40010c00
 8001478:	40011000 	.word	0x40011000
 800147c:	40011400 	.word	0x40011400
 8001480:	40010400 	.word	0x40010400

08001484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	807b      	strh	r3, [r7, #2]
 8001490:	4613      	mov	r3, r2
 8001492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001494:	787b      	ldrb	r3, [r7, #1]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149a:	887a      	ldrh	r2, [r7, #2]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014a0:	e003      	b.n	80014aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014a2:	887b      	ldrh	r3, [r7, #2]
 80014a4:	041a      	lsls	r2, r3, #16
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	611a      	str	r2, [r3, #16]
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr

080014b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014c6:	887a      	ldrh	r2, [r7, #2]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4013      	ands	r3, r2
 80014cc:	041a      	lsls	r2, r3, #16
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	43d9      	mvns	r1, r3
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	400b      	ands	r3, r1
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	611a      	str	r2, [r3, #16]
}
 80014dc:	bf00      	nop
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
	...

080014e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d101      	bne.n	80014fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e26c      	b.n	80019d4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b00      	cmp	r3, #0
 8001504:	f000 8087 	beq.w	8001616 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001508:	4b92      	ldr	r3, [pc, #584]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 030c 	and.w	r3, r3, #12
 8001510:	2b04      	cmp	r3, #4
 8001512:	d00c      	beq.n	800152e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001514:	4b8f      	ldr	r3, [pc, #572]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 030c 	and.w	r3, r3, #12
 800151c:	2b08      	cmp	r3, #8
 800151e:	d112      	bne.n	8001546 <HAL_RCC_OscConfig+0x5e>
 8001520:	4b8c      	ldr	r3, [pc, #560]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152c:	d10b      	bne.n	8001546 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152e:	4b89      	ldr	r3, [pc, #548]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d06c      	beq.n	8001614 <HAL_RCC_OscConfig+0x12c>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d168      	bne.n	8001614 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e246      	b.n	80019d4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800154e:	d106      	bne.n	800155e <HAL_RCC_OscConfig+0x76>
 8001550:	4b80      	ldr	r3, [pc, #512]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a7f      	ldr	r2, [pc, #508]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	e02e      	b.n	80015bc <HAL_RCC_OscConfig+0xd4>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d10c      	bne.n	8001580 <HAL_RCC_OscConfig+0x98>
 8001566:	4b7b      	ldr	r3, [pc, #492]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a7a      	ldr	r2, [pc, #488]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 800156c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	4b78      	ldr	r3, [pc, #480]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a77      	ldr	r2, [pc, #476]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001578:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	e01d      	b.n	80015bc <HAL_RCC_OscConfig+0xd4>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001588:	d10c      	bne.n	80015a4 <HAL_RCC_OscConfig+0xbc>
 800158a:	4b72      	ldr	r3, [pc, #456]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a71      	ldr	r2, [pc, #452]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	4b6f      	ldr	r3, [pc, #444]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a6e      	ldr	r2, [pc, #440]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 800159c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e00b      	b.n	80015bc <HAL_RCC_OscConfig+0xd4>
 80015a4:	4b6b      	ldr	r3, [pc, #428]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a6a      	ldr	r2, [pc, #424]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	4b68      	ldr	r3, [pc, #416]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a67      	ldr	r2, [pc, #412]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 80015b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d013      	beq.n	80015ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c4:	f7ff fd1a 	bl	8000ffc <HAL_GetTick>
 80015c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015cc:	f7ff fd16 	bl	8000ffc <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b64      	cmp	r3, #100	; 0x64
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e1fa      	b.n	80019d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015de:	4b5d      	ldr	r3, [pc, #372]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f0      	beq.n	80015cc <HAL_RCC_OscConfig+0xe4>
 80015ea:	e014      	b.n	8001616 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fd06 	bl	8000ffc <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f4:	f7ff fd02 	bl	8000ffc <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b64      	cmp	r3, #100	; 0x64
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e1e6      	b.n	80019d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001606:	4b53      	ldr	r3, [pc, #332]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x10c>
 8001612:	e000      	b.n	8001616 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001614:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d063      	beq.n	80016ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001622:	4b4c      	ldr	r3, [pc, #304]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f003 030c 	and.w	r3, r3, #12
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00b      	beq.n	8001646 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800162e:	4b49      	ldr	r3, [pc, #292]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	2b08      	cmp	r3, #8
 8001638:	d11c      	bne.n	8001674 <HAL_RCC_OscConfig+0x18c>
 800163a:	4b46      	ldr	r3, [pc, #280]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d116      	bne.n	8001674 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001646:	4b43      	ldr	r3, [pc, #268]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d005      	beq.n	800165e <HAL_RCC_OscConfig+0x176>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	691b      	ldr	r3, [r3, #16]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d001      	beq.n	800165e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e1ba      	b.n	80019d4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165e:	4b3d      	ldr	r3, [pc, #244]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	4939      	ldr	r1, [pc, #228]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001672:	e03a      	b.n	80016ea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d020      	beq.n	80016be <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800167c:	4b36      	ldr	r3, [pc, #216]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 800167e:	2201      	movs	r2, #1
 8001680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001682:	f7ff fcbb 	bl	8000ffc <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168a:	f7ff fcb7 	bl	8000ffc <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e19b      	b.n	80019d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169c:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a8:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	695b      	ldr	r3, [r3, #20]
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4927      	ldr	r1, [pc, #156]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	600b      	str	r3, [r1, #0]
 80016bc:	e015      	b.n	80016ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016be:	4b26      	ldr	r3, [pc, #152]	; (8001758 <HAL_RCC_OscConfig+0x270>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fc9a 	bl	8000ffc <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016cc:	f7ff fc96 	bl	8000ffc <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e17a      	b.n	80019d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016de:	4b1d      	ldr	r3, [pc, #116]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d03a      	beq.n	800176c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d019      	beq.n	8001732 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001700:	2201      	movs	r2, #1
 8001702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001704:	f7ff fc7a 	bl	8000ffc <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170c:	f7ff fc76 	bl	8000ffc <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e15a      	b.n	80019d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <HAL_RCC_OscConfig+0x26c>)
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800172a:	2001      	movs	r0, #1
 800172c:	f000 fb0a 	bl	8001d44 <RCC_Delay>
 8001730:	e01c      	b.n	800176c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <HAL_RCC_OscConfig+0x274>)
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001738:	f7ff fc60 	bl	8000ffc <HAL_GetTick>
 800173c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800173e:	e00f      	b.n	8001760 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001740:	f7ff fc5c 	bl	8000ffc <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d908      	bls.n	8001760 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e140      	b.n	80019d4 <HAL_RCC_OscConfig+0x4ec>
 8001752:	bf00      	nop
 8001754:	40021000 	.word	0x40021000
 8001758:	42420000 	.word	0x42420000
 800175c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001760:	4b9e      	ldr	r3, [pc, #632]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1e9      	bne.n	8001740 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 80a6 	beq.w	80018c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800177e:	4b97      	ldr	r3, [pc, #604]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10d      	bne.n	80017a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	4b94      	ldr	r3, [pc, #592]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	4a93      	ldr	r2, [pc, #588]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 8001790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001794:	61d3      	str	r3, [r2, #28]
 8001796:	4b91      	ldr	r3, [pc, #580]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 8001798:	69db      	ldr	r3, [r3, #28]
 800179a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017a2:	2301      	movs	r3, #1
 80017a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a6:	4b8e      	ldr	r3, [pc, #568]	; (80019e0 <HAL_RCC_OscConfig+0x4f8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d118      	bne.n	80017e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017b2:	4b8b      	ldr	r3, [pc, #556]	; (80019e0 <HAL_RCC_OscConfig+0x4f8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a8a      	ldr	r2, [pc, #552]	; (80019e0 <HAL_RCC_OscConfig+0x4f8>)
 80017b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017be:	f7ff fc1d 	bl	8000ffc <HAL_GetTick>
 80017c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c6:	f7ff fc19 	bl	8000ffc <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b64      	cmp	r3, #100	; 0x64
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e0fd      	b.n	80019d4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d8:	4b81      	ldr	r3, [pc, #516]	; (80019e0 <HAL_RCC_OscConfig+0x4f8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d106      	bne.n	80017fa <HAL_RCC_OscConfig+0x312>
 80017ec:	4b7b      	ldr	r3, [pc, #492]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4a7a      	ldr	r2, [pc, #488]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6213      	str	r3, [r2, #32]
 80017f8:	e02d      	b.n	8001856 <HAL_RCC_OscConfig+0x36e>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d10c      	bne.n	800181c <HAL_RCC_OscConfig+0x334>
 8001802:	4b76      	ldr	r3, [pc, #472]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	4a75      	ldr	r2, [pc, #468]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 8001808:	f023 0301 	bic.w	r3, r3, #1
 800180c:	6213      	str	r3, [r2, #32]
 800180e:	4b73      	ldr	r3, [pc, #460]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	4a72      	ldr	r2, [pc, #456]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 8001814:	f023 0304 	bic.w	r3, r3, #4
 8001818:	6213      	str	r3, [r2, #32]
 800181a:	e01c      	b.n	8001856 <HAL_RCC_OscConfig+0x36e>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	2b05      	cmp	r3, #5
 8001822:	d10c      	bne.n	800183e <HAL_RCC_OscConfig+0x356>
 8001824:	4b6d      	ldr	r3, [pc, #436]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4a6c      	ldr	r2, [pc, #432]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 800182a:	f043 0304 	orr.w	r3, r3, #4
 800182e:	6213      	str	r3, [r2, #32]
 8001830:	4b6a      	ldr	r3, [pc, #424]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	4a69      	ldr	r2, [pc, #420]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6213      	str	r3, [r2, #32]
 800183c:	e00b      	b.n	8001856 <HAL_RCC_OscConfig+0x36e>
 800183e:	4b67      	ldr	r3, [pc, #412]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	4a66      	ldr	r2, [pc, #408]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 8001844:	f023 0301 	bic.w	r3, r3, #1
 8001848:	6213      	str	r3, [r2, #32]
 800184a:	4b64      	ldr	r3, [pc, #400]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 800184c:	6a1b      	ldr	r3, [r3, #32]
 800184e:	4a63      	ldr	r2, [pc, #396]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 8001850:	f023 0304 	bic.w	r3, r3, #4
 8001854:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d015      	beq.n	800188a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185e:	f7ff fbcd 	bl	8000ffc <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001864:	e00a      	b.n	800187c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001866:	f7ff fbc9 	bl	8000ffc <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f241 3288 	movw	r2, #5000	; 0x1388
 8001874:	4293      	cmp	r3, r2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e0ab      	b.n	80019d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187c:	4b57      	ldr	r3, [pc, #348]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 800187e:	6a1b      	ldr	r3, [r3, #32]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0ee      	beq.n	8001866 <HAL_RCC_OscConfig+0x37e>
 8001888:	e014      	b.n	80018b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188a:	f7ff fbb7 	bl	8000ffc <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001890:	e00a      	b.n	80018a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001892:	f7ff fbb3 	bl	8000ffc <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	f241 3288 	movw	r2, #5000	; 0x1388
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e095      	b.n	80019d4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a8:	4b4c      	ldr	r3, [pc, #304]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1ee      	bne.n	8001892 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018b4:	7dfb      	ldrb	r3, [r7, #23]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d105      	bne.n	80018c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ba:	4b48      	ldr	r3, [pc, #288]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	4a47      	ldr	r2, [pc, #284]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 80018c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69db      	ldr	r3, [r3, #28]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 8081 	beq.w	80019d2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d0:	4b42      	ldr	r3, [pc, #264]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 030c 	and.w	r3, r3, #12
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d061      	beq.n	80019a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d146      	bne.n	8001972 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018e4:	4b3f      	ldr	r3, [pc, #252]	; (80019e4 <HAL_RCC_OscConfig+0x4fc>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ea:	f7ff fb87 	bl	8000ffc <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f2:	f7ff fb83 	bl	8000ffc <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e067      	b.n	80019d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001904:	4b35      	ldr	r3, [pc, #212]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1f0      	bne.n	80018f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001918:	d108      	bne.n	800192c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800191a:	4b30      	ldr	r3, [pc, #192]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	492d      	ldr	r1, [pc, #180]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800192c:	4b2b      	ldr	r3, [pc, #172]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a19      	ldr	r1, [r3, #32]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800193c:	430b      	orrs	r3, r1
 800193e:	4927      	ldr	r1, [pc, #156]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001944:	4b27      	ldr	r3, [pc, #156]	; (80019e4 <HAL_RCC_OscConfig+0x4fc>)
 8001946:	2201      	movs	r2, #1
 8001948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194a:	f7ff fb57 	bl	8000ffc <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001952:	f7ff fb53 	bl	8000ffc <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e037      	b.n	80019d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001964:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x46a>
 8001970:	e02f      	b.n	80019d2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001972:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <HAL_RCC_OscConfig+0x4fc>)
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff fb40 	bl	8000ffc <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001980:	f7ff fb3c 	bl	8000ffc <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e020      	b.n	80019d4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x498>
 800199e:	e018      	b.n	80019d2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69db      	ldr	r3, [r3, #28]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e013      	b.n	80019d4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_RCC_OscConfig+0x4f4>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d106      	bne.n	80019ce <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d001      	beq.n	80019d2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40007000 	.word	0x40007000
 80019e4:	42420060 	.word	0x42420060

080019e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e0d0      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019fc:	4b6a      	ldr	r3, [pc, #424]	; (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d910      	bls.n	8001a2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a0a:	4b67      	ldr	r3, [pc, #412]	; (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 0207 	bic.w	r2, r3, #7
 8001a12:	4965      	ldr	r1, [pc, #404]	; (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1a:	4b63      	ldr	r3, [pc, #396]	; (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0b8      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d020      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a44:	4b59      	ldr	r3, [pc, #356]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	4a58      	ldr	r2, [pc, #352]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001a4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a4e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a5c:	4b53      	ldr	r3, [pc, #332]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	4a52      	ldr	r2, [pc, #328]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a66:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a68:	4b50      	ldr	r3, [pc, #320]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	494d      	ldr	r1, [pc, #308]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d040      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	4b47      	ldr	r3, [pc, #284]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d115      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e07f      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa6:	4b41      	ldr	r3, [pc, #260]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d109      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e073      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e06b      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ac6:	4b39      	ldr	r3, [pc, #228]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f023 0203 	bic.w	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4936      	ldr	r1, [pc, #216]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad8:	f7ff fa90 	bl	8000ffc <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae0:	f7ff fa8c 	bl	8000ffc <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e053      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af6:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 020c 	and.w	r2, r3, #12
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d1eb      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b08:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0307 	and.w	r3, r3, #7
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d210      	bcs.n	8001b38 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b16:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 0207 	bic.w	r2, r3, #7
 8001b1e:	4922      	ldr	r1, [pc, #136]	; (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e032      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	4916      	ldr	r1, [pc, #88]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d009      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	490e      	ldr	r1, [pc, #56]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b76:	f000 f821 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8001b7a:	4601      	mov	r1, r0
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_RCC_ClockConfig+0x1c4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	4a0a      	ldr	r2, [pc, #40]	; (8001bb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b88:	5cd3      	ldrb	r3, [r2, r3]
 8001b8a:	fa21 f303 	lsr.w	r3, r1, r3
 8001b8e:	4a09      	ldr	r2, [pc, #36]	; (8001bb4 <HAL_RCC_ClockConfig+0x1cc>)
 8001b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <HAL_RCC_ClockConfig+0x1d0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff f930 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40022000 	.word	0x40022000
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	08004490 	.word	0x08004490
 8001bb4:	200000c8 	.word	0x200000c8
 8001bb8:	200000cc 	.word	0x200000cc

08001bbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bbc:	b490      	push	{r4, r7}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bc2:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bc4:	1d3c      	adds	r4, r7, #4
 8001bc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001bcc:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61bb      	str	r3, [r7, #24]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001be6:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d002      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x40>
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d003      	beq.n	8001c02 <HAL_RCC_GetSysClockFreq+0x46>
 8001bfa:	e02d      	b.n	8001c58 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bfe:	623b      	str	r3, [r7, #32]
      break;
 8001c00:	e02d      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	0c9b      	lsrs	r3, r3, #18
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c0e:	4413      	add	r3, r2
 8001c10:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c14:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d013      	beq.n	8001c48 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	0c5b      	lsrs	r3, r3, #17
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c2e:	4413      	add	r3, r2
 8001c30:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c34:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	4a0f      	ldr	r2, [pc, #60]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c3a:	fb02 f203 	mul.w	r2, r2, r3
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
 8001c46:	e004      	b.n	8001c52 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	4a0c      	ldr	r2, [pc, #48]	; (8001c7c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c4c:	fb02 f303 	mul.w	r3, r2, r3
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	623b      	str	r3, [r7, #32]
      break;
 8001c56:	e002      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c58:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c5a:	623b      	str	r3, [r7, #32]
      break;
 8001c5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c5e:	6a3b      	ldr	r3, [r7, #32]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3728      	adds	r7, #40	; 0x28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc90      	pop	{r4, r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	08004470 	.word	0x08004470
 8001c70:	08004480 	.word	0x08004480
 8001c74:	40021000 	.word	0x40021000
 8001c78:	007a1200 	.word	0x007a1200
 8001c7c:	003d0900 	.word	0x003d0900

08001c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c84:	4b02      	ldr	r3, [pc, #8]	; (8001c90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c86:	681b      	ldr	r3, [r3, #0]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	200000c8 	.word	0x200000c8

08001c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c98:	f7ff fff2 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001c9c:	4601      	mov	r1, r0
 8001c9e:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	0a1b      	lsrs	r3, r3, #8
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	4a03      	ldr	r2, [pc, #12]	; (8001cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001caa:	5cd3      	ldrb	r3, [r2, r3]
 8001cac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	080044a0 	.word	0x080044a0

08001cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cc0:	f7ff ffde 	bl	8001c80 <HAL_RCC_GetHCLKFreq>
 8001cc4:	4601      	mov	r1, r0
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	0adb      	lsrs	r3, r3, #11
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	4a03      	ldr	r2, [pc, #12]	; (8001ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd2:	5cd3      	ldrb	r3, [r2, r3]
 8001cd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	080044a0 	.word	0x080044a0

08001ce4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	220f      	movs	r2, #15
 8001cf2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <HAL_RCC_GetClockConfig+0x58>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0203 	and.w	r2, r3, #3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d00:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <HAL_RCC_GetClockConfig+0x58>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_RCC_GetClockConfig+0x58>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d18:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <HAL_RCC_GetClockConfig+0x58>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	08db      	lsrs	r3, r3, #3
 8001d1e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_RCC_GetClockConfig+0x5c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0207 	and.w	r2, r3, #7
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40022000 	.word	0x40022000

08001d44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d4c:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <RCC_Delay+0x34>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <RCC_Delay+0x38>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	0a5b      	lsrs	r3, r3, #9
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	fb02 f303 	mul.w	r3, r2, r3
 8001d5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d60:	bf00      	nop
  }
  while (Delay --);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	1e5a      	subs	r2, r3, #1
 8001d66:	60fa      	str	r2, [r7, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f9      	bne.n	8001d60 <RCC_Delay+0x1c>
}
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	200000c8 	.word	0x200000c8
 8001d7c:	10624dd3 	.word	0x10624dd3

08001d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e041      	b.n	8001e16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d106      	bne.n	8001dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f839 	bl	8001e1e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2202      	movs	r2, #2
 8001db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3304      	adds	r3, #4
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	f000 f9b4 	bl	800212c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d001      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e03a      	b.n	8001ebe <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <HAL_TIM_Base_Start_IT+0x98>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00e      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x58>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e72:	d009      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x58>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <HAL_TIM_Base_Start_IT+0x9c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d004      	beq.n	8001e88 <HAL_TIM_Base_Start_IT+0x58>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a13      	ldr	r2, [pc, #76]	; (8001ed0 <HAL_TIM_Base_Start_IT+0xa0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d111      	bne.n	8001eac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b06      	cmp	r3, #6
 8001e98:	d010      	beq.n	8001ebc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f042 0201 	orr.w	r2, r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eaa:	e007      	b.n	8001ebc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0201 	orr.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	40012c00 	.word	0x40012c00
 8001ecc:	40000400 	.word	0x40000400
 8001ed0:	40000800 	.word	0x40000800

08001ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d122      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d11b      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0202 	mvn.w	r2, #2
 8001f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8ed 	bl	80020f6 <HAL_TIM_IC_CaptureCallback>
 8001f1c:	e005      	b.n	8001f2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8e0 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f8ef 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d122      	bne.n	8001f84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d11b      	bne.n	8001f84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0204 	mvn.w	r2, #4
 8001f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8c3 	bl	80020f6 <HAL_TIM_IC_CaptureCallback>
 8001f70:	e005      	b.n	8001f7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8b6 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f8c5 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d122      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0208 	mvn.w	r2, #8
 8001fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2204      	movs	r2, #4
 8001fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f899 	bl	80020f6 <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f88c 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f89b 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b10      	cmp	r3, #16
 8001fe4:	d122      	bne.n	800202c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b10      	cmp	r3, #16
 8001ff2:	d11b      	bne.n	800202c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0210 	mvn.w	r2, #16
 8001ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2208      	movs	r2, #8
 8002002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f86f 	bl	80020f6 <HAL_TIM_IC_CaptureCallback>
 8002018:	e005      	b.n	8002026 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f862 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f871 	bl	8002108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	d10e      	bne.n	8002058 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b01      	cmp	r3, #1
 8002046:	d107      	bne.n	8002058 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0201 	mvn.w	r2, #1
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7fe fdc4 	bl	8000be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002062:	2b80      	cmp	r3, #128	; 0x80
 8002064:	d10e      	bne.n	8002084 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002070:	2b80      	cmp	r3, #128	; 0x80
 8002072:	d107      	bne.n	8002084 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f8bf 	bl	8002202 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208e:	2b40      	cmp	r3, #64	; 0x40
 8002090:	d10e      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209c:	2b40      	cmp	r3, #64	; 0x40
 800209e:	d107      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f835 	bl	800211a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	d10e      	bne.n	80020dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d107      	bne.n	80020dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0220 	mvn.w	r2, #32
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f88a 	bl	80021f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bc80      	pop	{r7}
 80020f4:	4770      	bx	lr

080020f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800211a:	b480      	push	{r7}
 800211c:	b083      	sub	sp, #12
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4a29      	ldr	r2, [pc, #164]	; (80021e4 <TIM_Base_SetConfig+0xb8>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d00b      	beq.n	800215c <TIM_Base_SetConfig+0x30>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800214a:	d007      	beq.n	800215c <TIM_Base_SetConfig+0x30>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a26      	ldr	r2, [pc, #152]	; (80021e8 <TIM_Base_SetConfig+0xbc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d003      	beq.n	800215c <TIM_Base_SetConfig+0x30>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a25      	ldr	r2, [pc, #148]	; (80021ec <TIM_Base_SetConfig+0xc0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d108      	bne.n	800216e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	68fa      	ldr	r2, [r7, #12]
 800216a:	4313      	orrs	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <TIM_Base_SetConfig+0xb8>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00b      	beq.n	800218e <TIM_Base_SetConfig+0x62>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800217c:	d007      	beq.n	800218e <TIM_Base_SetConfig+0x62>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a19      	ldr	r2, [pc, #100]	; (80021e8 <TIM_Base_SetConfig+0xbc>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d003      	beq.n	800218e <TIM_Base_SetConfig+0x62>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a18      	ldr	r2, [pc, #96]	; (80021ec <TIM_Base_SetConfig+0xc0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d108      	bne.n	80021a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	4313      	orrs	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <TIM_Base_SetConfig+0xb8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d103      	bne.n	80021d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	615a      	str	r2, [r3, #20]
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	40012c00 	.word	0x40012c00
 80021e8:	40000400 	.word	0x40000400
 80021ec:	40000800 	.word	0x40000800

080021f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr

08002214 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e03f      	b.n	80022a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d106      	bne.n	8002240 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7fe fd1e 	bl	8000c7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2224      	movs	r2, #36	; 0x24
 8002244:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002256:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f000 f9a3 	bl	80025a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800226c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	695a      	ldr	r2, [r3, #20]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800227c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800228c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2220      	movs	r2, #32
 80022a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b08a      	sub	sp, #40	; 0x28
 80022b2:	af02      	add	r7, sp, #8
 80022b4:	60f8      	str	r0, [r7, #12]
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	4613      	mov	r3, r2
 80022bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b20      	cmp	r3, #32
 80022cc:	d17c      	bne.n	80023c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <HAL_UART_Transmit+0x2c>
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e075      	b.n	80023ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d101      	bne.n	80022ec <HAL_UART_Transmit+0x3e>
 80022e8:	2302      	movs	r3, #2
 80022ea:	e06e      	b.n	80023ca <HAL_UART_Transmit+0x11c>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2221      	movs	r2, #33	; 0x21
 80022fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002302:	f7fe fe7b 	bl	8000ffc <HAL_GetTick>
 8002306:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	88fa      	ldrh	r2, [r7, #6]
 800230c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	88fa      	ldrh	r2, [r7, #6]
 8002312:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800231c:	d108      	bne.n	8002330 <HAL_UART_Transmit+0x82>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d104      	bne.n	8002330 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002326:	2300      	movs	r3, #0
 8002328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	61bb      	str	r3, [r7, #24]
 800232e:	e003      	b.n	8002338 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002334:	2300      	movs	r3, #0
 8002336:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002340:	e02a      	b.n	8002398 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2200      	movs	r2, #0
 800234a:	2180      	movs	r1, #128	; 0x80
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f8df 	bl	8002510 <UART_WaitOnFlagUntilTimeout>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e036      	b.n	80023ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10b      	bne.n	800237a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002370:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	3302      	adds	r3, #2
 8002376:	61bb      	str	r3, [r7, #24]
 8002378:	e007      	b.n	800238a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	781a      	ldrb	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	3301      	adds	r3, #1
 8002388:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b01      	subs	r3, #1
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800239c:	b29b      	uxth	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1cf      	bne.n	8002342 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	2200      	movs	r2, #0
 80023aa:	2140      	movs	r1, #64	; 0x40
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 f8af 	bl	8002510 <UART_WaitOnFlagUntilTimeout>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e006      	b.n	80023ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80023c4:	2300      	movs	r3, #0
 80023c6:	e000      	b.n	80023ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80023c8:	2302      	movs	r3, #2
  }
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3720      	adds	r7, #32
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b08a      	sub	sp, #40	; 0x28
 80023d6:	af02      	add	r7, sp, #8
 80023d8:	60f8      	str	r0, [r7, #12]
 80023da:	60b9      	str	r1, [r7, #8]
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	4613      	mov	r3, r2
 80023e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b20      	cmp	r3, #32
 80023f0:	f040 8089 	bne.w	8002506 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <HAL_UART_Receive+0x2e>
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e081      	b.n	8002508 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_UART_Receive+0x40>
 800240e:	2302      	movs	r3, #2
 8002410:	e07a      	b.n	8002508 <HAL_UART_Receive+0x136>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2222      	movs	r2, #34	; 0x22
 8002424:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002428:	f7fe fde8 	bl	8000ffc <HAL_GetTick>
 800242c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	88fa      	ldrh	r2, [r7, #6]
 8002432:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	88fa      	ldrh	r2, [r7, #6]
 8002438:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002442:	d108      	bne.n	8002456 <HAL_UART_Receive+0x84>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d104      	bne.n	8002456 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 800244c:	2300      	movs	r3, #0
 800244e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	61bb      	str	r3, [r7, #24]
 8002454:	e003      	b.n	800245e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002466:	e043      	b.n	80024f0 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2200      	movs	r2, #0
 8002470:	2120      	movs	r1, #32
 8002472:	68f8      	ldr	r0, [r7, #12]
 8002474:	f000 f84c 	bl	8002510 <UART_WaitOnFlagUntilTimeout>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e042      	b.n	8002508 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10c      	bne.n	80024a2 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	b29b      	uxth	r3, r3
 8002490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002494:	b29a      	uxth	r2, r3
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	3302      	adds	r3, #2
 800249e:	61bb      	str	r3, [r7, #24]
 80024a0:	e01f      	b.n	80024e2 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024aa:	d007      	beq.n	80024bc <HAL_UART_Receive+0xea>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10a      	bne.n	80024ca <HAL_UART_Receive+0xf8>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d106      	bne.n	80024ca <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	701a      	strb	r2, [r3, #0]
 80024c8:	e008      	b.n	80024dc <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	3301      	adds	r3, #1
 80024e0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1b6      	bne.n	8002468 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2220      	movs	r2, #32
 80024fe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e000      	b.n	8002508 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002506:	2302      	movs	r3, #2
  }
}
 8002508:	4618      	mov	r0, r3
 800250a:	3720      	adds	r7, #32
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	4613      	mov	r3, r2
 800251e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002520:	e02c      	b.n	800257c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002528:	d028      	beq.n	800257c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <UART_WaitOnFlagUntilTimeout+0x30>
 8002530:	f7fe fd64 	bl	8000ffc <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	429a      	cmp	r2, r3
 800253e:	d21d      	bcs.n	800257c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800254e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0201 	bic.w	r2, r2, #1
 800255e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2220      	movs	r2, #32
 8002564:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e00f      	b.n	800259c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	4013      	ands	r3, r2
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	429a      	cmp	r2, r3
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	79fb      	ldrb	r3, [r7, #7]
 8002596:	429a      	cmp	r2, r3
 8002598:	d0c3      	beq.n	8002522 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	68da      	ldr	r2, [r3, #12]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025de:	f023 030c 	bic.w	r3, r3, #12
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6812      	ldr	r2, [r2, #0]
 80025e6:	68b9      	ldr	r1, [r7, #8]
 80025e8:	430b      	orrs	r3, r1
 80025ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699a      	ldr	r2, [r3, #24]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	430a      	orrs	r2, r1
 8002600:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a2c      	ldr	r2, [pc, #176]	; (80026b8 <UART_SetConfig+0x114>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d103      	bne.n	8002614 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800260c:	f7ff fb56 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	e002      	b.n	800261a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002614:	f7ff fb3e 	bl	8001c94 <HAL_RCC_GetPCLK1Freq>
 8002618:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	4613      	mov	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	4413      	add	r3, r2
 8002622:	009a      	lsls	r2, r3, #2
 8002624:	441a      	add	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	4a22      	ldr	r2, [pc, #136]	; (80026bc <UART_SetConfig+0x118>)
 8002632:	fba2 2303 	umull	r2, r3, r2, r3
 8002636:	095b      	lsrs	r3, r3, #5
 8002638:	0119      	lsls	r1, r3, #4
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	009a      	lsls	r2, r3, #2
 8002644:	441a      	add	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002650:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <UART_SetConfig+0x118>)
 8002652:	fba3 0302 	umull	r0, r3, r3, r2
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	2064      	movs	r0, #100	; 0x64
 800265a:	fb00 f303 	mul.w	r3, r0, r3
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	011b      	lsls	r3, r3, #4
 8002662:	3332      	adds	r3, #50	; 0x32
 8002664:	4a15      	ldr	r2, [pc, #84]	; (80026bc <UART_SetConfig+0x118>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	095b      	lsrs	r3, r3, #5
 800266c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002670:	4419      	add	r1, r3
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4613      	mov	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	009a      	lsls	r2, r3, #2
 800267c:	441a      	add	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	fbb2 f2f3 	udiv	r2, r2, r3
 8002688:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <UART_SetConfig+0x118>)
 800268a:	fba3 0302 	umull	r0, r3, r3, r2
 800268e:	095b      	lsrs	r3, r3, #5
 8002690:	2064      	movs	r0, #100	; 0x64
 8002692:	fb00 f303 	mul.w	r3, r0, r3
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	3332      	adds	r3, #50	; 0x32
 800269c:	4a07      	ldr	r2, [pc, #28]	; (80026bc <UART_SetConfig+0x118>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	f003 020f 	and.w	r2, r3, #15
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	440a      	add	r2, r1
 80026ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80026b0:	bf00      	nop
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40013800 	.word	0x40013800
 80026bc:	51eb851f 	.word	0x51eb851f

080026c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80026ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026d2:	2b84      	cmp	r3, #132	; 0x84
 80026d4:	d005      	beq.n	80026e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80026d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4413      	add	r3, r2
 80026de:	3303      	adds	r3, #3
 80026e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80026e2:	68fb      	ldr	r3, [r7, #12]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3714      	adds	r7, #20
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80026f2:	f000 facd 	bl	8002c90 <vTaskStartScheduler>
  
  return osOK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	bd80      	pop	{r7, pc}

080026fc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80026fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026fe:	b089      	sub	sp, #36	; 0x24
 8002700:	af04      	add	r7, sp, #16
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d020      	beq.n	8002750 <osThreadCreate+0x54>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d01c      	beq.n	8002750 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685c      	ldr	r4, [r3, #4]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681d      	ldr	r5, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691e      	ldr	r6, [r3, #16]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ffc9 	bl	80026c0 <makeFreeRtosPriority>
 800272e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002738:	9202      	str	r2, [sp, #8]
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	9100      	str	r1, [sp, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	4632      	mov	r2, r6
 8002742:	4629      	mov	r1, r5
 8002744:	4620      	mov	r0, r4
 8002746:	f000 f8e8 	bl	800291a <xTaskCreateStatic>
 800274a:	4603      	mov	r3, r0
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	e01c      	b.n	800278a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685c      	ldr	r4, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800275c:	b29e      	uxth	r6, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ffab 	bl	80026c0 <makeFreeRtosPriority>
 800276a:	4602      	mov	r2, r0
 800276c:	f107 030c 	add.w	r3, r7, #12
 8002770:	9301      	str	r3, [sp, #4]
 8002772:	9200      	str	r2, [sp, #0]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	4632      	mov	r2, r6
 8002778:	4629      	mov	r1, r5
 800277a:	4620      	mov	r0, r4
 800277c:	f000 f926 	bl	80029cc <xTaskCreate>
 8002780:	4603      	mov	r3, r0
 8002782:	2b01      	cmp	r3, #1
 8002784:	d001      	beq.n	800278a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002786:	2300      	movs	r3, #0
 8002788:	e000      	b.n	800278c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800278a:	68fb      	ldr	r3, [r7, #12]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002794 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <osDelay+0x16>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	e000      	b.n	80027ac <osDelay+0x18>
 80027aa:	2301      	movs	r3, #1
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fa3b 	bl	8002c28 <vTaskDelay>
  
  return osOK;
 80027b2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f103 0208 	add.w	r2, r3, #8
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f103 0208 	add.w	r2, r3, #8
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f103 0208 	add.w	r2, r3, #8
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002812:	b480      	push	{r7}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	601a      	str	r2, [r3, #0]
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800286e:	d103      	bne.n	8002878 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	e00c      	b.n	8002892 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3308      	adds	r3, #8
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	e002      	b.n	8002886 <vListInsert+0x2e>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	429a      	cmp	r2, r3
 8002890:	d2f6      	bcs.n	8002880 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	601a      	str	r2, [r3, #0]
}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6892      	ldr	r2, [r2, #8]
 80028de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6852      	ldr	r2, [r2, #4]
 80028e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d103      	bne.n	80028fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	1e5a      	subs	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr

0800291a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800291a:	b580      	push	{r7, lr}
 800291c:	b08e      	sub	sp, #56	; 0x38
 800291e:	af04      	add	r7, sp, #16
 8002920:	60f8      	str	r0, [r7, #12]
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292a:	2b00      	cmp	r3, #0
 800292c:	d109      	bne.n	8002942 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800292e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002932:	f383 8811 	msr	BASEPRI, r3
 8002936:	f3bf 8f6f 	isb	sy
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	623b      	str	r3, [r7, #32]
 8002940:	e7fe      	b.n	8002940 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002944:	2b00      	cmp	r3, #0
 8002946:	d109      	bne.n	800295c <xTaskCreateStatic+0x42>
 8002948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294c:	f383 8811 	msr	BASEPRI, r3
 8002950:	f3bf 8f6f 	isb	sy
 8002954:	f3bf 8f4f 	dsb	sy
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	e7fe      	b.n	800295a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800295c:	2354      	movs	r3, #84	; 0x54
 800295e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	2b54      	cmp	r3, #84	; 0x54
 8002964:	d009      	beq.n	800297a <xTaskCreateStatic+0x60>
 8002966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296a:	f383 8811 	msr	BASEPRI, r3
 800296e:	f3bf 8f6f 	isb	sy
 8002972:	f3bf 8f4f 	dsb	sy
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	e7fe      	b.n	8002978 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800297a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800297c:	2b00      	cmp	r3, #0
 800297e:	d01e      	beq.n	80029be <xTaskCreateStatic+0xa4>
 8002980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002982:	2b00      	cmp	r3, #0
 8002984:	d01b      	beq.n	80029be <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800298e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002992:	2202      	movs	r2, #2
 8002994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002998:	2300      	movs	r3, #0
 800299a:	9303      	str	r3, [sp, #12]
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f850 	bl	8002a56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029b6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029b8:	f000 f8cc 	bl	8002b54 <prvAddNewTaskToReadyList>
 80029bc:	e001      	b.n	80029c2 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80029c2:	697b      	ldr	r3, [r7, #20]
	}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3728      	adds	r7, #40	; 0x28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08c      	sub	sp, #48	; 0x30
 80029d0:	af04      	add	r7, sp, #16
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 fe53 	bl	800368c <pvPortMalloc>
 80029e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00e      	beq.n	8002a0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80029ee:	2054      	movs	r0, #84	; 0x54
 80029f0:	f000 fe4c 	bl	800368c <pvPortMalloc>
 80029f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	631a      	str	r2, [r3, #48]	; 0x30
 8002a02:	e005      	b.n	8002a10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a04:	6978      	ldr	r0, [r7, #20]
 8002a06:	f000 ff03 	bl	8003810 <vPortFree>
 8002a0a:	e001      	b.n	8002a10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d017      	beq.n	8002a46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a1e:	88fa      	ldrh	r2, [r7, #6]
 8002a20:	2300      	movs	r3, #0
 8002a22:	9303      	str	r3, [sp, #12]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	9302      	str	r3, [sp, #8]
 8002a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 f80e 	bl	8002a56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a3a:	69f8      	ldr	r0, [r7, #28]
 8002a3c:	f000 f88a 	bl	8002b54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a40:	2301      	movs	r3, #1
 8002a42:	61bb      	str	r3, [r7, #24]
 8002a44:	e002      	b.n	8002a4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a4c:	69bb      	ldr	r3, [r7, #24]
	}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3720      	adds	r7, #32
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b088      	sub	sp, #32
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	f023 0307 	bic.w	r3, r3, #7
 8002a7c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d009      	beq.n	8002a9c <prvInitialiseNewTask+0x46>
 8002a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8c:	f383 8811 	msr	BASEPRI, r3
 8002a90:	f3bf 8f6f 	isb	sy
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	e7fe      	b.n	8002a9a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	e012      	b.n	8002ac8 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	7819      	ldrb	r1, [r3, #0]
 8002aaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	4413      	add	r3, r2
 8002ab0:	3334      	adds	r3, #52	; 0x34
 8002ab2:	460a      	mov	r2, r1
 8002ab4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	4413      	add	r3, r2
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d006      	beq.n	8002ad0 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	61fb      	str	r3, [r7, #28]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	2b0f      	cmp	r3, #15
 8002acc:	d9e9      	bls.n	8002aa2 <prvInitialiseNewTask+0x4c>
 8002ace:	e000      	b.n	8002ad2 <prvInitialiseNewTask+0x7c>
		{
			break;
 8002ad0:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002adc:	2b06      	cmp	r3, #6
 8002ade:	d901      	bls.n	8002ae4 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ae0:	2306      	movs	r3, #6
 8002ae2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ae8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002aee:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	2200      	movs	r2, #0
 8002af4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	3304      	adds	r3, #4
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7ff fe7d 	bl	80027fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b02:	3318      	adds	r3, #24
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fe78 	bl	80027fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b12:	f1c3 0207 	rsb	r2, r3, #7
 8002b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	2200      	movs	r2, #0
 8002b24:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	68f9      	ldr	r1, [r7, #12]
 8002b32:	69b8      	ldr	r0, [r7, #24]
 8002b34:	f000 fc06 	bl	8003344 <pxPortInitialiseStack>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d002      	beq.n	8002b4a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b4a:	bf00      	nop
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
	...

08002b54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b5c:	f000 fcdc 	bl	8003518 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b60:	4b2a      	ldr	r3, [pc, #168]	; (8002c0c <prvAddNewTaskToReadyList+0xb8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3301      	adds	r3, #1
 8002b66:	4a29      	ldr	r2, [pc, #164]	; (8002c0c <prvAddNewTaskToReadyList+0xb8>)
 8002b68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b6a:	4b29      	ldr	r3, [pc, #164]	; (8002c10 <prvAddNewTaskToReadyList+0xbc>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d109      	bne.n	8002b86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b72:	4a27      	ldr	r2, [pc, #156]	; (8002c10 <prvAddNewTaskToReadyList+0xbc>)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b78:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <prvAddNewTaskToReadyList+0xb8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d110      	bne.n	8002ba2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b80:	f000 fabc 	bl	80030fc <prvInitialiseTaskLists>
 8002b84:	e00d      	b.n	8002ba2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b86:	4b23      	ldr	r3, [pc, #140]	; (8002c14 <prvAddNewTaskToReadyList+0xc0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <prvAddNewTaskToReadyList+0xbc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d802      	bhi.n	8002ba2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b9c:	4a1c      	ldr	r2, [pc, #112]	; (8002c10 <prvAddNewTaskToReadyList+0xbc>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002ba2:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <prvAddNewTaskToReadyList+0xc4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	4a1b      	ldr	r2, [pc, #108]	; (8002c18 <prvAddNewTaskToReadyList+0xc4>)
 8002baa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <prvAddNewTaskToReadyList+0xc8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	4a18      	ldr	r2, [pc, #96]	; (8002c1c <prvAddNewTaskToReadyList+0xc8>)
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4a15      	ldr	r2, [pc, #84]	; (8002c20 <prvAddNewTaskToReadyList+0xcc>)
 8002bcc:	441a      	add	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	f7ff fe1c 	bl	8002812 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002bda:	f000 fccb 	bl	8003574 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002bde:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <prvAddNewTaskToReadyList+0xc0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00e      	beq.n	8002c04 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <prvAddNewTaskToReadyList+0xbc>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d207      	bcs.n	8002c04 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <prvAddNewTaskToReadyList+0xd0>)
 8002bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	200004b4 	.word	0x200004b4
 8002c10:	200003b4 	.word	0x200003b4
 8002c14:	200004c0 	.word	0x200004c0
 8002c18:	200004d0 	.word	0x200004d0
 8002c1c:	200004bc 	.word	0x200004bc
 8002c20:	200003b8 	.word	0x200003b8
 8002c24:	e000ed04 	.word	0xe000ed04

08002c28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d016      	beq.n	8002c68 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c3a:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <vTaskDelay+0x60>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <vTaskDelay+0x2e>
 8002c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c46:	f383 8811 	msr	BASEPRI, r3
 8002c4a:	f3bf 8f6f 	isb	sy
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	e7fe      	b.n	8002c54 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002c56:	f000 f879 	bl	8002d4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 fb0b 	bl	8003278 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c62:	f000 f881 	bl	8002d68 <xTaskResumeAll>
 8002c66:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d107      	bne.n	8002c7e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002c6e:	4b07      	ldr	r3, [pc, #28]	; (8002c8c <vTaskDelay+0x64>)
 8002c70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c7e:	bf00      	nop
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	200004dc 	.word	0x200004dc
 8002c8c:	e000ed04 	.word	0xe000ed04

08002c90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002c9e:	463a      	mov	r2, r7
 8002ca0:	1d39      	adds	r1, r7, #4
 8002ca2:	f107 0308 	add.w	r3, r7, #8
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fa5a 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002cac:	6839      	ldr	r1, [r7, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	9202      	str	r2, [sp, #8]
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	460a      	mov	r2, r1
 8002cbe:	491d      	ldr	r1, [pc, #116]	; (8002d34 <vTaskStartScheduler+0xa4>)
 8002cc0:	481d      	ldr	r0, [pc, #116]	; (8002d38 <vTaskStartScheduler+0xa8>)
 8002cc2:	f7ff fe2a 	bl	800291a <xTaskCreateStatic>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <vTaskStartScheduler+0xac>)
 8002cca:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ccc:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <vTaskStartScheduler+0xac>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	e001      	b.n	8002cde <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d115      	bne.n	8002d10 <vTaskStartScheduler+0x80>
 8002ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002cf6:	4b12      	ldr	r3, [pc, #72]	; (8002d40 <vTaskStartScheduler+0xb0>)
 8002cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cfc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <vTaskStartScheduler+0xb4>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002d04:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <vTaskStartScheduler+0xb8>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d0a:	f000 fb95 	bl	8003438 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d0e:	e00d      	b.n	8002d2c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d16:	d109      	bne.n	8002d2c <vTaskStartScheduler+0x9c>
 8002d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d1c:	f383 8811 	msr	BASEPRI, r3
 8002d20:	f3bf 8f6f 	isb	sy
 8002d24:	f3bf 8f4f 	dsb	sy
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	e7fe      	b.n	8002d2a <vTaskStartScheduler+0x9a>
}
 8002d2c:	bf00      	nop
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	08004484 	.word	0x08004484
 8002d38:	080030cd 	.word	0x080030cd
 8002d3c:	200004d8 	.word	0x200004d8
 8002d40:	200004d4 	.word	0x200004d4
 8002d44:	200004c0 	.word	0x200004c0
 8002d48:	200004b8 	.word	0x200004b8

08002d4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002d50:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <vTaskSuspendAll+0x18>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3301      	adds	r3, #1
 8002d56:	4a03      	ldr	r2, [pc, #12]	; (8002d64 <vTaskSuspendAll+0x18>)
 8002d58:	6013      	str	r3, [r2, #0]
}
 8002d5a:	bf00      	nop
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	200004dc 	.word	0x200004dc

08002d68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d76:	4b41      	ldr	r3, [pc, #260]	; (8002e7c <xTaskResumeAll+0x114>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <xTaskResumeAll+0x2a>
 8002d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	f3bf 8f6f 	isb	sy
 8002d8a:	f3bf 8f4f 	dsb	sy
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	e7fe      	b.n	8002d90 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d92:	f000 fbc1 	bl	8003518 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d96:	4b39      	ldr	r3, [pc, #228]	; (8002e7c <xTaskResumeAll+0x114>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	4a37      	ldr	r2, [pc, #220]	; (8002e7c <xTaskResumeAll+0x114>)
 8002d9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002da0:	4b36      	ldr	r3, [pc, #216]	; (8002e7c <xTaskResumeAll+0x114>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d161      	bne.n	8002e6c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002da8:	4b35      	ldr	r3, [pc, #212]	; (8002e80 <xTaskResumeAll+0x118>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d05d      	beq.n	8002e6c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002db0:	e02e      	b.n	8002e10 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002db2:	4b34      	ldr	r3, [pc, #208]	; (8002e84 <xTaskResumeAll+0x11c>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	3318      	adds	r3, #24
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fd82 	bl	80028c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fd7d 	bl	80028c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	4b2c      	ldr	r3, [pc, #176]	; (8002e88 <xTaskResumeAll+0x120>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	4a2a      	ldr	r2, [pc, #168]	; (8002e88 <xTaskResumeAll+0x120>)
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4a27      	ldr	r2, [pc, #156]	; (8002e8c <xTaskResumeAll+0x124>)
 8002dee:	441a      	add	r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	3304      	adds	r3, #4
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f7ff fd0b 	bl	8002812 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e00:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <xTaskResumeAll+0x128>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d302      	bcc.n	8002e10 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8002e0a:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <xTaskResumeAll+0x12c>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e10:	4b1c      	ldr	r3, [pc, #112]	; (8002e84 <xTaskResumeAll+0x11c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1cc      	bne.n	8002db2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e1e:	f000 fa07 	bl	8003230 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002e22:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <xTaskResumeAll+0x130>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d010      	beq.n	8002e50 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e2e:	f000 f837 	bl	8002ea0 <xTaskIncrementTick>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8002e38:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <xTaskResumeAll+0x12c>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3b01      	subs	r3, #1
 8002e42:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d1f1      	bne.n	8002e2e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8002e4a:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <xTaskResumeAll+0x130>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e50:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <xTaskResumeAll+0x12c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d009      	beq.n	8002e6c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <xTaskResumeAll+0x134>)
 8002e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e6c:	f000 fb82 	bl	8003574 <vPortExitCritical>

	return xAlreadyYielded;
 8002e70:	68bb      	ldr	r3, [r7, #8]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	200004dc 	.word	0x200004dc
 8002e80:	200004b4 	.word	0x200004b4
 8002e84:	20000474 	.word	0x20000474
 8002e88:	200004bc 	.word	0x200004bc
 8002e8c:	200003b8 	.word	0x200003b8
 8002e90:	200003b4 	.word	0x200003b4
 8002e94:	200004c8 	.word	0x200004c8
 8002e98:	200004c4 	.word	0x200004c4
 8002e9c:	e000ed04 	.word	0xe000ed04

08002ea0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002eaa:	4b50      	ldr	r3, [pc, #320]	; (8002fec <xTaskIncrementTick+0x14c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f040 808c 	bne.w	8002fcc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002eb4:	4b4e      	ldr	r3, [pc, #312]	; (8002ff0 <xTaskIncrementTick+0x150>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002ebc:	4a4c      	ldr	r2, [pc, #304]	; (8002ff0 <xTaskIncrementTick+0x150>)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d11f      	bne.n	8002f08 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ec8:	4b4a      	ldr	r3, [pc, #296]	; (8002ff4 <xTaskIncrementTick+0x154>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <xTaskIncrementTick+0x46>
 8002ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed6:	f383 8811 	msr	BASEPRI, r3
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	e7fe      	b.n	8002ee4 <xTaskIncrementTick+0x44>
 8002ee6:	4b43      	ldr	r3, [pc, #268]	; (8002ff4 <xTaskIncrementTick+0x154>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	4b42      	ldr	r3, [pc, #264]	; (8002ff8 <xTaskIncrementTick+0x158>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a40      	ldr	r2, [pc, #256]	; (8002ff4 <xTaskIncrementTick+0x154>)
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	4a40      	ldr	r2, [pc, #256]	; (8002ff8 <xTaskIncrementTick+0x158>)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b40      	ldr	r3, [pc, #256]	; (8002ffc <xTaskIncrementTick+0x15c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	3301      	adds	r3, #1
 8002f00:	4a3e      	ldr	r2, [pc, #248]	; (8002ffc <xTaskIncrementTick+0x15c>)
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	f000 f994 	bl	8003230 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f08:	4b3d      	ldr	r3, [pc, #244]	; (8003000 <xTaskIncrementTick+0x160>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d34d      	bcc.n	8002fae <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f12:	4b38      	ldr	r3, [pc, #224]	; (8002ff4 <xTaskIncrementTick+0x154>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <xTaskIncrementTick+0x80>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e000      	b.n	8002f22 <xTaskIncrementTick+0x82>
 8002f20:	2300      	movs	r3, #0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d004      	beq.n	8002f30 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f26:	4b36      	ldr	r3, [pc, #216]	; (8003000 <xTaskIncrementTick+0x160>)
 8002f28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f2c:	601a      	str	r2, [r3, #0]
					break;
 8002f2e:	e03e      	b.n	8002fae <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f30:	4b30      	ldr	r3, [pc, #192]	; (8002ff4 <xTaskIncrementTick+0x154>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d203      	bcs.n	8002f50 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f48:	4a2d      	ldr	r2, [pc, #180]	; (8003000 <xTaskIncrementTick+0x160>)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6013      	str	r3, [r2, #0]
						break;
 8002f4e:	e02e      	b.n	8002fae <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	3304      	adds	r3, #4
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff fcb7 	bl	80028c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d004      	beq.n	8002f6c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	3318      	adds	r3, #24
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff fcae 	bl	80028c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	2201      	movs	r2, #1
 8002f72:	409a      	lsls	r2, r3
 8002f74:	4b23      	ldr	r3, [pc, #140]	; (8003004 <xTaskIncrementTick+0x164>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	4a22      	ldr	r2, [pc, #136]	; (8003004 <xTaskIncrementTick+0x164>)
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4a1f      	ldr	r2, [pc, #124]	; (8003008 <xTaskIncrementTick+0x168>)
 8002f8c:	441a      	add	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	3304      	adds	r3, #4
 8002f92:	4619      	mov	r1, r3
 8002f94:	4610      	mov	r0, r2
 8002f96:	f7ff fc3c 	bl	8002812 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9e:	4b1b      	ldr	r3, [pc, #108]	; (800300c <xTaskIncrementTick+0x16c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d3b4      	bcc.n	8002f12 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fac:	e7b1      	b.n	8002f12 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002fae:	4b17      	ldr	r3, [pc, #92]	; (800300c <xTaskIncrementTick+0x16c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb4:	4914      	ldr	r1, [pc, #80]	; (8003008 <xTaskIncrementTick+0x168>)
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d907      	bls.n	8002fd6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	e004      	b.n	8002fd6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002fcc:	4b10      	ldr	r3, [pc, #64]	; (8003010 <xTaskIncrementTick+0x170>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	4a0f      	ldr	r2, [pc, #60]	; (8003010 <xTaskIncrementTick+0x170>)
 8002fd4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002fd6:	4b0f      	ldr	r3, [pc, #60]	; (8003014 <xTaskIncrementTick+0x174>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002fe2:	697b      	ldr	r3, [r7, #20]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3718      	adds	r7, #24
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	200004dc 	.word	0x200004dc
 8002ff0:	200004b8 	.word	0x200004b8
 8002ff4:	2000046c 	.word	0x2000046c
 8002ff8:	20000470 	.word	0x20000470
 8002ffc:	200004cc 	.word	0x200004cc
 8003000:	200004d4 	.word	0x200004d4
 8003004:	200004bc 	.word	0x200004bc
 8003008:	200003b8 	.word	0x200003b8
 800300c:	200003b4 	.word	0x200003b4
 8003010:	200004c4 	.word	0x200004c4
 8003014:	200004c8 	.word	0x200004c8

08003018 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800301e:	4b26      	ldr	r3, [pc, #152]	; (80030b8 <vTaskSwitchContext+0xa0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003026:	4b25      	ldr	r3, [pc, #148]	; (80030bc <vTaskSwitchContext+0xa4>)
 8003028:	2201      	movs	r2, #1
 800302a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800302c:	e03e      	b.n	80030ac <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800302e:	4b23      	ldr	r3, [pc, #140]	; (80030bc <vTaskSwitchContext+0xa4>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003034:	4b22      	ldr	r3, [pc, #136]	; (80030c0 <vTaskSwitchContext+0xa8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	fab3 f383 	clz	r3, r3
 8003040:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003042:	7afb      	ldrb	r3, [r7, #11]
 8003044:	f1c3 031f 	rsb	r3, r3, #31
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	491e      	ldr	r1, [pc, #120]	; (80030c4 <vTaskSwitchContext+0xac>)
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <vTaskSwitchContext+0x5a>
	__asm volatile
 800305e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003062:	f383 8811 	msr	BASEPRI, r3
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	607b      	str	r3, [r7, #4]
 8003070:	e7fe      	b.n	8003070 <vTaskSwitchContext+0x58>
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4613      	mov	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4a11      	ldr	r2, [pc, #68]	; (80030c4 <vTaskSwitchContext+0xac>)
 800307e:	4413      	add	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	3308      	adds	r3, #8
 8003094:	429a      	cmp	r2, r3
 8003096:	d104      	bne.n	80030a2 <vTaskSwitchContext+0x8a>
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	685a      	ldr	r2, [r3, #4]
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4a07      	ldr	r2, [pc, #28]	; (80030c8 <vTaskSwitchContext+0xb0>)
 80030aa:	6013      	str	r3, [r2, #0]
}
 80030ac:	bf00      	nop
 80030ae:	371c      	adds	r7, #28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	200004dc 	.word	0x200004dc
 80030bc:	200004c8 	.word	0x200004c8
 80030c0:	200004bc 	.word	0x200004bc
 80030c4:	200003b8 	.word	0x200003b8
 80030c8:	200003b4 	.word	0x200003b4

080030cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80030d4:	f000 f852 	bl	800317c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80030d8:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <prvIdleTask+0x28>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d9f9      	bls.n	80030d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <prvIdleTask+0x2c>)
 80030e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030e6:	601a      	str	r2, [r3, #0]
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80030f0:	e7f0      	b.n	80030d4 <prvIdleTask+0x8>
 80030f2:	bf00      	nop
 80030f4:	200003b8 	.word	0x200003b8
 80030f8:	e000ed04 	.word	0xe000ed04

080030fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003102:	2300      	movs	r3, #0
 8003104:	607b      	str	r3, [r7, #4]
 8003106:	e00c      	b.n	8003122 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4a12      	ldr	r2, [pc, #72]	; (800315c <prvInitialiseTaskLists+0x60>)
 8003114:	4413      	add	r3, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff fb50 	bl	80027bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3301      	adds	r3, #1
 8003120:	607b      	str	r3, [r7, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b06      	cmp	r3, #6
 8003126:	d9ef      	bls.n	8003108 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003128:	480d      	ldr	r0, [pc, #52]	; (8003160 <prvInitialiseTaskLists+0x64>)
 800312a:	f7ff fb47 	bl	80027bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800312e:	480d      	ldr	r0, [pc, #52]	; (8003164 <prvInitialiseTaskLists+0x68>)
 8003130:	f7ff fb44 	bl	80027bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003134:	480c      	ldr	r0, [pc, #48]	; (8003168 <prvInitialiseTaskLists+0x6c>)
 8003136:	f7ff fb41 	bl	80027bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800313a:	480c      	ldr	r0, [pc, #48]	; (800316c <prvInitialiseTaskLists+0x70>)
 800313c:	f7ff fb3e 	bl	80027bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003140:	480b      	ldr	r0, [pc, #44]	; (8003170 <prvInitialiseTaskLists+0x74>)
 8003142:	f7ff fb3b 	bl	80027bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003146:	4b0b      	ldr	r3, [pc, #44]	; (8003174 <prvInitialiseTaskLists+0x78>)
 8003148:	4a05      	ldr	r2, [pc, #20]	; (8003160 <prvInitialiseTaskLists+0x64>)
 800314a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800314c:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <prvInitialiseTaskLists+0x7c>)
 800314e:	4a05      	ldr	r2, [pc, #20]	; (8003164 <prvInitialiseTaskLists+0x68>)
 8003150:	601a      	str	r2, [r3, #0]
}
 8003152:	bf00      	nop
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	200003b8 	.word	0x200003b8
 8003160:	20000444 	.word	0x20000444
 8003164:	20000458 	.word	0x20000458
 8003168:	20000474 	.word	0x20000474
 800316c:	20000488 	.word	0x20000488
 8003170:	200004a0 	.word	0x200004a0
 8003174:	2000046c 	.word	0x2000046c
 8003178:	20000470 	.word	0x20000470

0800317c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003182:	e019      	b.n	80031b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003184:	f000 f9c8 	bl	8003518 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003188:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <prvCheckTasksWaitingTermination+0x4c>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3304      	adds	r3, #4
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fb97 	bl	80028c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800319a:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <prvCheckTasksWaitingTermination+0x50>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3b01      	subs	r3, #1
 80031a0:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <prvCheckTasksWaitingTermination+0x50>)
 80031a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80031a4:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <prvCheckTasksWaitingTermination+0x54>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	4a09      	ldr	r2, [pc, #36]	; (80031d0 <prvCheckTasksWaitingTermination+0x54>)
 80031ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80031ae:	f000 f9e1 	bl	8003574 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f80e 	bl	80031d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <prvCheckTasksWaitingTermination+0x54>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1e1      	bne.n	8003184 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20000488 	.word	0x20000488
 80031cc:	200004b4 	.word	0x200004b4
 80031d0:	2000049c 	.word	0x2000049c

080031d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d108      	bne.n	80031f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fb10 	bl	8003810 <vPortFree>
				vPortFree( pxTCB );
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 fb0d 	bl	8003810 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80031f6:	e017      	b.n	8003228 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d103      	bne.n	800320a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 fb04 	bl	8003810 <vPortFree>
	}
 8003208:	e00e      	b.n	8003228 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003210:	2b02      	cmp	r3, #2
 8003212:	d009      	beq.n	8003228 <prvDeleteTCB+0x54>
 8003214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	e7fe      	b.n	8003226 <prvDeleteTCB+0x52>
	}
 8003228:	bf00      	nop
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003236:	4b0e      	ldr	r3, [pc, #56]	; (8003270 <prvResetNextTaskUnblockTime+0x40>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <prvResetNextTaskUnblockTime+0x14>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <prvResetNextTaskUnblockTime+0x16>
 8003244:	2300      	movs	r3, #0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <prvResetNextTaskUnblockTime+0x44>)
 800324c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003250:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003252:	e008      	b.n	8003266 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <prvResetNextTaskUnblockTime+0x40>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4a04      	ldr	r2, [pc, #16]	; (8003274 <prvResetNextTaskUnblockTime+0x44>)
 8003264:	6013      	str	r3, [r2, #0]
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	bc80      	pop	{r7}
 800326e:	4770      	bx	lr
 8003270:	2000046c 	.word	0x2000046c
 8003274:	200004d4 	.word	0x200004d4

08003278 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003282:	4b29      	ldr	r3, [pc, #164]	; (8003328 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003288:	4b28      	ldr	r3, [pc, #160]	; (800332c <prvAddCurrentTaskToDelayedList+0xb4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3304      	adds	r3, #4
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fb1a 	bl	80028c8 <uxListRemove>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10b      	bne.n	80032b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800329a:	4b24      	ldr	r3, [pc, #144]	; (800332c <prvAddCurrentTaskToDelayedList+0xb4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	2201      	movs	r2, #1
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43da      	mvns	r2, r3
 80032a8:	4b21      	ldr	r3, [pc, #132]	; (8003330 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4013      	ands	r3, r2
 80032ae:	4a20      	ldr	r2, [pc, #128]	; (8003330 <prvAddCurrentTaskToDelayedList+0xb8>)
 80032b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032b8:	d10a      	bne.n	80032d0 <prvAddCurrentTaskToDelayedList+0x58>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d007      	beq.n	80032d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032c0:	4b1a      	ldr	r3, [pc, #104]	; (800332c <prvAddCurrentTaskToDelayedList+0xb4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3304      	adds	r3, #4
 80032c6:	4619      	mov	r1, r3
 80032c8:	481a      	ldr	r0, [pc, #104]	; (8003334 <prvAddCurrentTaskToDelayedList+0xbc>)
 80032ca:	f7ff faa2 	bl	8002812 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80032ce:	e026      	b.n	800331e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4413      	add	r3, r2
 80032d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <prvAddCurrentTaskToDelayedList+0xb4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d209      	bcs.n	80032fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032e8:	4b13      	ldr	r3, [pc, #76]	; (8003338 <prvAddCurrentTaskToDelayedList+0xc0>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	4b0f      	ldr	r3, [pc, #60]	; (800332c <prvAddCurrentTaskToDelayedList+0xb4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3304      	adds	r3, #4
 80032f2:	4619      	mov	r1, r3
 80032f4:	4610      	mov	r0, r2
 80032f6:	f7ff faaf 	bl	8002858 <vListInsert>
}
 80032fa:	e010      	b.n	800331e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80032fc:	4b0f      	ldr	r3, [pc, #60]	; (800333c <prvAddCurrentTaskToDelayedList+0xc4>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	3304      	adds	r3, #4
 8003306:	4619      	mov	r1, r3
 8003308:	4610      	mov	r0, r2
 800330a:	f7ff faa5 	bl	8002858 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800330e:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	429a      	cmp	r2, r3
 8003316:	d202      	bcs.n	800331e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003318:	4a09      	ldr	r2, [pc, #36]	; (8003340 <prvAddCurrentTaskToDelayedList+0xc8>)
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	6013      	str	r3, [r2, #0]
}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	200004b8 	.word	0x200004b8
 800332c:	200003b4 	.word	0x200003b4
 8003330:	200004bc 	.word	0x200004bc
 8003334:	200004a0 	.word	0x200004a0
 8003338:	20000470 	.word	0x20000470
 800333c:	2000046c 	.word	0x2000046c
 8003340:	200004d4 	.word	0x200004d4

08003344 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	3b04      	subs	r3, #4
 8003354:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800335c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	3b04      	subs	r3, #4
 8003362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f023 0201 	bic.w	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	3b04      	subs	r3, #4
 8003372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003374:	4a08      	ldr	r2, [pc, #32]	; (8003398 <pxPortInitialiseStack+0x54>)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	3b14      	subs	r3, #20
 800337e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3b20      	subs	r3, #32
 800338a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800338c:	68fb      	ldr	r3, [r7, #12]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3714      	adds	r7, #20
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr
 8003398:	0800339d 	.word	0x0800339d

0800339c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80033a6:	4b10      	ldr	r3, [pc, #64]	; (80033e8 <prvTaskExitError+0x4c>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033ae:	d009      	beq.n	80033c4 <prvTaskExitError+0x28>
 80033b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	e7fe      	b.n	80033c2 <prvTaskExitError+0x26>
 80033c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80033d6:	bf00      	nop
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0fc      	beq.n	80033d8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80033de:	bf00      	nop
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bc80      	pop	{r7}
 80033e6:	4770      	bx	lr
 80033e8:	200000d4 	.word	0x200000d4
 80033ec:	00000000 	.word	0x00000000

080033f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80033f0:	4b07      	ldr	r3, [pc, #28]	; (8003410 <pxCurrentTCBConst2>)
 80033f2:	6819      	ldr	r1, [r3, #0]
 80033f4:	6808      	ldr	r0, [r1, #0]
 80033f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80033fa:	f380 8809 	msr	PSP, r0
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f04f 0000 	mov.w	r0, #0
 8003406:	f380 8811 	msr	BASEPRI, r0
 800340a:	f04e 0e0d 	orr.w	lr, lr, #13
 800340e:	4770      	bx	lr

08003410 <pxCurrentTCBConst2>:
 8003410:	200003b4 	.word	0x200003b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003414:	bf00      	nop
 8003416:	bf00      	nop

08003418 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003418:	4806      	ldr	r0, [pc, #24]	; (8003434 <prvPortStartFirstTask+0x1c>)
 800341a:	6800      	ldr	r0, [r0, #0]
 800341c:	6800      	ldr	r0, [r0, #0]
 800341e:	f380 8808 	msr	MSP, r0
 8003422:	b662      	cpsie	i
 8003424:	b661      	cpsie	f
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	df00      	svc	0
 8003430:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003432:	bf00      	nop
 8003434:	e000ed08 	.word	0xe000ed08

08003438 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800343e:	4b31      	ldr	r3, [pc, #196]	; (8003504 <xPortStartScheduler+0xcc>)
 8003440:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	b2db      	uxtb	r3, r3
 8003448:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	22ff      	movs	r2, #255	; 0xff
 800344e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003460:	b2da      	uxtb	r2, r3
 8003462:	4b29      	ldr	r3, [pc, #164]	; (8003508 <xPortStartScheduler+0xd0>)
 8003464:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003466:	4b29      	ldr	r3, [pc, #164]	; (800350c <xPortStartScheduler+0xd4>)
 8003468:	2207      	movs	r2, #7
 800346a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800346c:	e009      	b.n	8003482 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800346e:	4b27      	ldr	r3, [pc, #156]	; (800350c <xPortStartScheduler+0xd4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3b01      	subs	r3, #1
 8003474:	4a25      	ldr	r2, [pc, #148]	; (800350c <xPortStartScheduler+0xd4>)
 8003476:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	b2db      	uxtb	r3, r3
 8003480:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	b2db      	uxtb	r3, r3
 8003486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348a:	2b80      	cmp	r3, #128	; 0x80
 800348c:	d0ef      	beq.n	800346e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800348e:	4b1f      	ldr	r3, [pc, #124]	; (800350c <xPortStartScheduler+0xd4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f1c3 0307 	rsb	r3, r3, #7
 8003496:	2b04      	cmp	r3, #4
 8003498:	d009      	beq.n	80034ae <xPortStartScheduler+0x76>
 800349a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349e:	f383 8811 	msr	BASEPRI, r3
 80034a2:	f3bf 8f6f 	isb	sy
 80034a6:	f3bf 8f4f 	dsb	sy
 80034aa:	60bb      	str	r3, [r7, #8]
 80034ac:	e7fe      	b.n	80034ac <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80034ae:	4b17      	ldr	r3, [pc, #92]	; (800350c <xPortStartScheduler+0xd4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	021b      	lsls	r3, r3, #8
 80034b4:	4a15      	ldr	r2, [pc, #84]	; (800350c <xPortStartScheduler+0xd4>)
 80034b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80034b8:	4b14      	ldr	r3, [pc, #80]	; (800350c <xPortStartScheduler+0xd4>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034c0:	4a12      	ldr	r2, [pc, #72]	; (800350c <xPortStartScheduler+0xd4>)
 80034c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80034cc:	4b10      	ldr	r3, [pc, #64]	; (8003510 <xPortStartScheduler+0xd8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a0f      	ldr	r2, [pc, #60]	; (8003510 <xPortStartScheduler+0xd8>)
 80034d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80034d8:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <xPortStartScheduler+0xd8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a0c      	ldr	r2, [pc, #48]	; (8003510 <xPortStartScheduler+0xd8>)
 80034de:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80034e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80034e4:	f000 f8b0 	bl	8003648 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80034e8:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <xPortStartScheduler+0xdc>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80034ee:	f7ff ff93 	bl	8003418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80034f2:	f7ff fd91 	bl	8003018 <vTaskSwitchContext>
	prvTaskExitError();
 80034f6:	f7ff ff51 	bl	800339c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	e000e400 	.word	0xe000e400
 8003508:	200004e0 	.word	0x200004e0
 800350c:	200004e4 	.word	0x200004e4
 8003510:	e000ed20 	.word	0xe000ed20
 8003514:	200000d4 	.word	0x200000d4

08003518 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003522:	f383 8811 	msr	BASEPRI, r3
 8003526:	f3bf 8f6f 	isb	sy
 800352a:	f3bf 8f4f 	dsb	sy
 800352e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003530:	4b0e      	ldr	r3, [pc, #56]	; (800356c <vPortEnterCritical+0x54>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3301      	adds	r3, #1
 8003536:	4a0d      	ldr	r2, [pc, #52]	; (800356c <vPortEnterCritical+0x54>)
 8003538:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800353a:	4b0c      	ldr	r3, [pc, #48]	; (800356c <vPortEnterCritical+0x54>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d10e      	bne.n	8003560 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003542:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <vPortEnterCritical+0x58>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d009      	beq.n	8003560 <vPortEnterCritical+0x48>
 800354c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	e7fe      	b.n	800355e <vPortEnterCritical+0x46>
	}
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	200000d4 	.word	0x200000d4
 8003570:	e000ed04 	.word	0xe000ed04

08003574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800357a:	4b10      	ldr	r3, [pc, #64]	; (80035bc <vPortExitCritical+0x48>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d109      	bne.n	8003596 <vPortExitCritical+0x22>
 8003582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003586:	f383 8811 	msr	BASEPRI, r3
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	607b      	str	r3, [r7, #4]
 8003594:	e7fe      	b.n	8003594 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003596:	4b09      	ldr	r3, [pc, #36]	; (80035bc <vPortExitCritical+0x48>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3b01      	subs	r3, #1
 800359c:	4a07      	ldr	r2, [pc, #28]	; (80035bc <vPortExitCritical+0x48>)
 800359e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <vPortExitCritical+0x48>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d104      	bne.n	80035b2 <vPortExitCritical+0x3e>
 80035a8:	2300      	movs	r3, #0
 80035aa:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80035b2:	bf00      	nop
 80035b4:	370c      	adds	r7, #12
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bc80      	pop	{r7}
 80035ba:	4770      	bx	lr
 80035bc:	200000d4 	.word	0x200000d4

080035c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80035c0:	f3ef 8009 	mrs	r0, PSP
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	4b0d      	ldr	r3, [pc, #52]	; (8003600 <pxCurrentTCBConst>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80035d0:	6010      	str	r0, [r2, #0]
 80035d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80035d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80035da:	f380 8811 	msr	BASEPRI, r0
 80035de:	f7ff fd1b 	bl	8003018 <vTaskSwitchContext>
 80035e2:	f04f 0000 	mov.w	r0, #0
 80035e6:	f380 8811 	msr	BASEPRI, r0
 80035ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80035ee:	6819      	ldr	r1, [r3, #0]
 80035f0:	6808      	ldr	r0, [r1, #0]
 80035f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80035f6:	f380 8809 	msr	PSP, r0
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	4770      	bx	lr

08003600 <pxCurrentTCBConst>:
 8003600:	200003b4 	.word	0x200003b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop

08003608 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
	__asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003620:	f7ff fc3e 	bl	8002ea0 <xTaskIncrementTick>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800362a:	4b06      	ldr	r3, [pc, #24]	; (8003644 <SysTick_Handler+0x3c>)
 800362c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	2300      	movs	r3, #0
 8003634:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	e000ed04 	.word	0xe000ed04

08003648 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <vPortSetupTimerInterrupt+0x30>)
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003652:	4b0a      	ldr	r3, [pc, #40]	; (800367c <vPortSetupTimerInterrupt+0x34>)
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003658:	4b09      	ldr	r3, [pc, #36]	; (8003680 <vPortSetupTimerInterrupt+0x38>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a09      	ldr	r2, [pc, #36]	; (8003684 <vPortSetupTimerInterrupt+0x3c>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	099b      	lsrs	r3, r3, #6
 8003664:	4a08      	ldr	r2, [pc, #32]	; (8003688 <vPortSetupTimerInterrupt+0x40>)
 8003666:	3b01      	subs	r3, #1
 8003668:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800366a:	4b03      	ldr	r3, [pc, #12]	; (8003678 <vPortSetupTimerInterrupt+0x30>)
 800366c:	2207      	movs	r2, #7
 800366e:	601a      	str	r2, [r3, #0]
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr
 8003678:	e000e010 	.word	0xe000e010
 800367c:	e000e018 	.word	0xe000e018
 8003680:	200000c8 	.word	0x200000c8
 8003684:	10624dd3 	.word	0x10624dd3
 8003688:	e000e014 	.word	0xe000e014

0800368c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b08a      	sub	sp, #40	; 0x28
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003694:	2300      	movs	r3, #0
 8003696:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003698:	f7ff fb58 	bl	8002d4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800369c:	4b57      	ldr	r3, [pc, #348]	; (80037fc <pvPortMalloc+0x170>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80036a4:	f000 f90c 	bl	80038c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80036a8:	4b55      	ldr	r3, [pc, #340]	; (8003800 <pvPortMalloc+0x174>)
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f040 808c 	bne.w	80037ce <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01c      	beq.n	80036f6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80036bc:	2208      	movs	r2, #8
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4413      	add	r3, r2
 80036c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d013      	beq.n	80036f6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f023 0307 	bic.w	r3, r3, #7
 80036d4:	3308      	adds	r3, #8
 80036d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <pvPortMalloc+0x6a>
	__asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	617b      	str	r3, [r7, #20]
 80036f4:	e7fe      	b.n	80036f4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d068      	beq.n	80037ce <pvPortMalloc+0x142>
 80036fc:	4b41      	ldr	r3, [pc, #260]	; (8003804 <pvPortMalloc+0x178>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	429a      	cmp	r2, r3
 8003704:	d863      	bhi.n	80037ce <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003706:	4b40      	ldr	r3, [pc, #256]	; (8003808 <pvPortMalloc+0x17c>)
 8003708:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800370a:	4b3f      	ldr	r3, [pc, #252]	; (8003808 <pvPortMalloc+0x17c>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003710:	e004      	b.n	800371c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8003712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003714:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	429a      	cmp	r2, r3
 8003724:	d903      	bls.n	800372e <pvPortMalloc+0xa2>
 8003726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f1      	bne.n	8003712 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800372e:	4b33      	ldr	r3, [pc, #204]	; (80037fc <pvPortMalloc+0x170>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003734:	429a      	cmp	r2, r3
 8003736:	d04a      	beq.n	80037ce <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2208      	movs	r2, #8
 800373e:	4413      	add	r3, r2
 8003740:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	1ad2      	subs	r2, r2, r3
 8003752:	2308      	movs	r3, #8
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	429a      	cmp	r2, r3
 8003758:	d91e      	bls.n	8003798 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800375a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4413      	add	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	2b00      	cmp	r3, #0
 800376a:	d009      	beq.n	8003780 <pvPortMalloc+0xf4>
 800376c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003770:	f383 8811 	msr	BASEPRI, r3
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	613b      	str	r3, [r7, #16]
 800377e:	e7fe      	b.n	800377e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	1ad2      	subs	r2, r2, r3
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003792:	69b8      	ldr	r0, [r7, #24]
 8003794:	f000 f8f6 	bl	8003984 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003798:	4b1a      	ldr	r3, [pc, #104]	; (8003804 <pvPortMalloc+0x178>)
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	4a18      	ldr	r2, [pc, #96]	; (8003804 <pvPortMalloc+0x178>)
 80037a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80037a6:	4b17      	ldr	r3, [pc, #92]	; (8003804 <pvPortMalloc+0x178>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4b18      	ldr	r3, [pc, #96]	; (800380c <pvPortMalloc+0x180>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d203      	bcs.n	80037ba <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80037b2:	4b14      	ldr	r3, [pc, #80]	; (8003804 <pvPortMalloc+0x178>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a15      	ldr	r2, [pc, #84]	; (800380c <pvPortMalloc+0x180>)
 80037b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	4b10      	ldr	r3, [pc, #64]	; (8003800 <pvPortMalloc+0x174>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80037c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80037ce:	f7ff facb 	bl	8002d68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d009      	beq.n	80037f0 <pvPortMalloc+0x164>
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	e7fe      	b.n	80037ee <pvPortMalloc+0x162>
	return pvReturn;
 80037f0:	69fb      	ldr	r3, [r7, #28]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3728      	adds	r7, #40	; 0x28
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	200010f0 	.word	0x200010f0
 8003800:	200010fc 	.word	0x200010fc
 8003804:	200010f4 	.word	0x200010f4
 8003808:	200010e8 	.word	0x200010e8
 800380c:	200010f8 	.word	0x200010f8

08003810 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d046      	beq.n	80038b0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003822:	2308      	movs	r3, #8
 8003824:	425b      	negs	r3, r3
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4413      	add	r3, r2
 800382a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	4b20      	ldr	r3, [pc, #128]	; (80038b8 <vPortFree+0xa8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4013      	ands	r3, r2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <vPortFree+0x42>
 800383e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003842:	f383 8811 	msr	BASEPRI, r3
 8003846:	f3bf 8f6f 	isb	sy
 800384a:	f3bf 8f4f 	dsb	sy
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	e7fe      	b.n	8003850 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d009      	beq.n	800386e <vPortFree+0x5e>
 800385a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385e:	f383 8811 	msr	BASEPRI, r3
 8003862:	f3bf 8f6f 	isb	sy
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	60bb      	str	r3, [r7, #8]
 800386c:	e7fe      	b.n	800386c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <vPortFree+0xa8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4013      	ands	r3, r2
 8003878:	2b00      	cmp	r3, #0
 800387a:	d019      	beq.n	80038b0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d115      	bne.n	80038b0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <vPortFree+0xa8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	43db      	mvns	r3, r3
 800388e:	401a      	ands	r2, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003894:	f7ff fa5a 	bl	8002d4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	4b07      	ldr	r3, [pc, #28]	; (80038bc <vPortFree+0xac>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4413      	add	r3, r2
 80038a2:	4a06      	ldr	r2, [pc, #24]	; (80038bc <vPortFree+0xac>)
 80038a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80038a6:	6938      	ldr	r0, [r7, #16]
 80038a8:	f000 f86c 	bl	8003984 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80038ac:	f7ff fa5c 	bl	8002d68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80038b0:	bf00      	nop
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	200010fc 	.word	0x200010fc
 80038bc:	200010f4 	.word	0x200010f4

080038c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80038c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80038ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80038cc:	4b27      	ldr	r3, [pc, #156]	; (800396c <prvHeapInit+0xac>)
 80038ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00c      	beq.n	80038f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3307      	adds	r3, #7
 80038de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f023 0307 	bic.w	r3, r3, #7
 80038e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	4a1f      	ldr	r2, [pc, #124]	; (800396c <prvHeapInit+0xac>)
 80038f0:	4413      	add	r3, r2
 80038f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80038f8:	4a1d      	ldr	r2, [pc, #116]	; (8003970 <prvHeapInit+0xb0>)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80038fe:	4b1c      	ldr	r3, [pc, #112]	; (8003970 <prvHeapInit+0xb0>)
 8003900:	2200      	movs	r2, #0
 8003902:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	4413      	add	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800390c:	2208      	movs	r2, #8
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1a9b      	subs	r3, r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0307 	bic.w	r3, r3, #7
 800391a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4a15      	ldr	r2, [pc, #84]	; (8003974 <prvHeapInit+0xb4>)
 8003920:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003922:	4b14      	ldr	r3, [pc, #80]	; (8003974 <prvHeapInit+0xb4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2200      	movs	r2, #0
 8003928:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800392a:	4b12      	ldr	r3, [pc, #72]	; (8003974 <prvHeapInit+0xb4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	1ad2      	subs	r2, r2, r3
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003940:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <prvHeapInit+0xb4>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	4a0a      	ldr	r2, [pc, #40]	; (8003978 <prvHeapInit+0xb8>)
 800394e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	4a09      	ldr	r2, [pc, #36]	; (800397c <prvHeapInit+0xbc>)
 8003956:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003958:	4b09      	ldr	r3, [pc, #36]	; (8003980 <prvHeapInit+0xc0>)
 800395a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800395e:	601a      	str	r2, [r3, #0]
}
 8003960:	bf00      	nop
 8003962:	3714      	adds	r7, #20
 8003964:	46bd      	mov	sp, r7
 8003966:	bc80      	pop	{r7}
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	200004e8 	.word	0x200004e8
 8003970:	200010e8 	.word	0x200010e8
 8003974:	200010f0 	.word	0x200010f0
 8003978:	200010f8 	.word	0x200010f8
 800397c:	200010f4 	.word	0x200010f4
 8003980:	200010fc 	.word	0x200010fc

08003984 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800398c:	4b27      	ldr	r3, [pc, #156]	; (8003a2c <prvInsertBlockIntoFreeList+0xa8>)
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	e002      	b.n	8003998 <prvInsertBlockIntoFreeList+0x14>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d8f7      	bhi.n	8003992 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	4413      	add	r3, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d108      	bne.n	80039c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	441a      	add	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	441a      	add	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d118      	bne.n	8003a0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <prvInsertBlockIntoFreeList+0xac>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d00d      	beq.n	8003a02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	441a      	add	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	e008      	b.n	8003a14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003a02:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <prvInsertBlockIntoFreeList+0xac>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	601a      	str	r2, [r3, #0]
 8003a0a:	e003      	b.n	8003a14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d002      	beq.n	8003a22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a22:	bf00      	nop
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bc80      	pop	{r7}
 8003a2a:	4770      	bx	lr
 8003a2c:	200010e8 	.word	0x200010e8
 8003a30:	200010f0 	.word	0x200010f0

08003a34 <__errno>:
 8003a34:	4b01      	ldr	r3, [pc, #4]	; (8003a3c <__errno+0x8>)
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	200000d8 	.word	0x200000d8

08003a40 <__libc_init_array>:
 8003a40:	b570      	push	{r4, r5, r6, lr}
 8003a42:	2500      	movs	r5, #0
 8003a44:	4e0c      	ldr	r6, [pc, #48]	; (8003a78 <__libc_init_array+0x38>)
 8003a46:	4c0d      	ldr	r4, [pc, #52]	; (8003a7c <__libc_init_array+0x3c>)
 8003a48:	1ba4      	subs	r4, r4, r6
 8003a4a:	10a4      	asrs	r4, r4, #2
 8003a4c:	42a5      	cmp	r5, r4
 8003a4e:	d109      	bne.n	8003a64 <__libc_init_array+0x24>
 8003a50:	f000 fce2 	bl	8004418 <_init>
 8003a54:	2500      	movs	r5, #0
 8003a56:	4e0a      	ldr	r6, [pc, #40]	; (8003a80 <__libc_init_array+0x40>)
 8003a58:	4c0a      	ldr	r4, [pc, #40]	; (8003a84 <__libc_init_array+0x44>)
 8003a5a:	1ba4      	subs	r4, r4, r6
 8003a5c:	10a4      	asrs	r4, r4, #2
 8003a5e:	42a5      	cmp	r5, r4
 8003a60:	d105      	bne.n	8003a6e <__libc_init_array+0x2e>
 8003a62:	bd70      	pop	{r4, r5, r6, pc}
 8003a64:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a68:	4798      	blx	r3
 8003a6a:	3501      	adds	r5, #1
 8003a6c:	e7ee      	b.n	8003a4c <__libc_init_array+0xc>
 8003a6e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a72:	4798      	blx	r3
 8003a74:	3501      	adds	r5, #1
 8003a76:	e7f2      	b.n	8003a5e <__libc_init_array+0x1e>
 8003a78:	080044dc 	.word	0x080044dc
 8003a7c:	080044dc 	.word	0x080044dc
 8003a80:	080044dc 	.word	0x080044dc
 8003a84:	080044e0 	.word	0x080044e0

08003a88 <memcpy>:
 8003a88:	b510      	push	{r4, lr}
 8003a8a:	1e43      	subs	r3, r0, #1
 8003a8c:	440a      	add	r2, r1
 8003a8e:	4291      	cmp	r1, r2
 8003a90:	d100      	bne.n	8003a94 <memcpy+0xc>
 8003a92:	bd10      	pop	{r4, pc}
 8003a94:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a9c:	e7f7      	b.n	8003a8e <memcpy+0x6>

08003a9e <memset>:
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	4402      	add	r2, r0
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d100      	bne.n	8003aa8 <memset+0xa>
 8003aa6:	4770      	bx	lr
 8003aa8:	f803 1b01 	strb.w	r1, [r3], #1
 8003aac:	e7f9      	b.n	8003aa2 <memset+0x4>
	...

08003ab0 <srand>:
 8003ab0:	b538      	push	{r3, r4, r5, lr}
 8003ab2:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <srand+0x38>)
 8003ab4:	4605      	mov	r5, r0
 8003ab6:	681c      	ldr	r4, [r3, #0]
 8003ab8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003aba:	b97b      	cbnz	r3, 8003adc <srand+0x2c>
 8003abc:	2018      	movs	r0, #24
 8003abe:	f000 f8b3 	bl	8003c28 <malloc>
 8003ac2:	4a0a      	ldr	r2, [pc, #40]	; (8003aec <srand+0x3c>)
 8003ac4:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <srand+0x40>)
 8003ac6:	63a0      	str	r0, [r4, #56]	; 0x38
 8003ac8:	e9c0 2300 	strd	r2, r3, [r0]
 8003acc:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <srand+0x44>)
 8003ace:	2201      	movs	r2, #1
 8003ad0:	6083      	str	r3, [r0, #8]
 8003ad2:	230b      	movs	r3, #11
 8003ad4:	8183      	strh	r3, [r0, #12]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003adc:	2200      	movs	r2, #0
 8003ade:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003ae0:	611d      	str	r5, [r3, #16]
 8003ae2:	615a      	str	r2, [r3, #20]
 8003ae4:	bd38      	pop	{r3, r4, r5, pc}
 8003ae6:	bf00      	nop
 8003ae8:	200000d8 	.word	0x200000d8
 8003aec:	abcd330e 	.word	0xabcd330e
 8003af0:	e66d1234 	.word	0xe66d1234
 8003af4:	0005deec 	.word	0x0005deec

08003af8 <rand>:
 8003af8:	b538      	push	{r3, r4, r5, lr}
 8003afa:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <rand+0x50>)
 8003afc:	681c      	ldr	r4, [r3, #0]
 8003afe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003b00:	b97b      	cbnz	r3, 8003b22 <rand+0x2a>
 8003b02:	2018      	movs	r0, #24
 8003b04:	f000 f890 	bl	8003c28 <malloc>
 8003b08:	4a10      	ldr	r2, [pc, #64]	; (8003b4c <rand+0x54>)
 8003b0a:	4b11      	ldr	r3, [pc, #68]	; (8003b50 <rand+0x58>)
 8003b0c:	63a0      	str	r0, [r4, #56]	; 0x38
 8003b0e:	e9c0 2300 	strd	r2, r3, [r0]
 8003b12:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <rand+0x5c>)
 8003b14:	2201      	movs	r2, #1
 8003b16:	6083      	str	r3, [r0, #8]
 8003b18:	230b      	movs	r3, #11
 8003b1a:	8183      	strh	r3, [r0, #12]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003b22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003b24:	480c      	ldr	r0, [pc, #48]	; (8003b58 <rand+0x60>)
 8003b26:	690a      	ldr	r2, [r1, #16]
 8003b28:	694b      	ldr	r3, [r1, #20]
 8003b2a:	4350      	muls	r0, r2
 8003b2c:	4c0b      	ldr	r4, [pc, #44]	; (8003b5c <rand+0x64>)
 8003b2e:	fb04 0003 	mla	r0, r4, r3, r0
 8003b32:	fba2 2304 	umull	r2, r3, r2, r4
 8003b36:	4403      	add	r3, r0
 8003b38:	1c54      	adds	r4, r2, #1
 8003b3a:	f143 0500 	adc.w	r5, r3, #0
 8003b3e:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8003b42:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8003b46:	bd38      	pop	{r3, r4, r5, pc}
 8003b48:	200000d8 	.word	0x200000d8
 8003b4c:	abcd330e 	.word	0xabcd330e
 8003b50:	e66d1234 	.word	0xe66d1234
 8003b54:	0005deec 	.word	0x0005deec
 8003b58:	5851f42d 	.word	0x5851f42d
 8003b5c:	4c957f2d 	.word	0x4c957f2d

08003b60 <siprintf>:
 8003b60:	b40e      	push	{r1, r2, r3}
 8003b62:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003b66:	b500      	push	{lr}
 8003b68:	b09c      	sub	sp, #112	; 0x70
 8003b6a:	ab1d      	add	r3, sp, #116	; 0x74
 8003b6c:	9002      	str	r0, [sp, #8]
 8003b6e:	9006      	str	r0, [sp, #24]
 8003b70:	9107      	str	r1, [sp, #28]
 8003b72:	9104      	str	r1, [sp, #16]
 8003b74:	4808      	ldr	r0, [pc, #32]	; (8003b98 <siprintf+0x38>)
 8003b76:	4909      	ldr	r1, [pc, #36]	; (8003b9c <siprintf+0x3c>)
 8003b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b7c:	9105      	str	r1, [sp, #20]
 8003b7e:	6800      	ldr	r0, [r0, #0]
 8003b80:	a902      	add	r1, sp, #8
 8003b82:	9301      	str	r3, [sp, #4]
 8003b84:	f000 f958 	bl	8003e38 <_svfiprintf_r>
 8003b88:	2200      	movs	r2, #0
 8003b8a:	9b02      	ldr	r3, [sp, #8]
 8003b8c:	701a      	strb	r2, [r3, #0]
 8003b8e:	b01c      	add	sp, #112	; 0x70
 8003b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b94:	b003      	add	sp, #12
 8003b96:	4770      	bx	lr
 8003b98:	200000d8 	.word	0x200000d8
 8003b9c:	ffff0208 	.word	0xffff0208

08003ba0 <strcat>:
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	b510      	push	{r4, lr}
 8003ba4:	781a      	ldrb	r2, [r3, #0]
 8003ba6:	1c5c      	adds	r4, r3, #1
 8003ba8:	b93a      	cbnz	r2, 8003bba <strcat+0x1a>
 8003baa:	3b01      	subs	r3, #1
 8003bac:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bb0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bb4:	2a00      	cmp	r2, #0
 8003bb6:	d1f9      	bne.n	8003bac <strcat+0xc>
 8003bb8:	bd10      	pop	{r4, pc}
 8003bba:	4623      	mov	r3, r4
 8003bbc:	e7f2      	b.n	8003ba4 <strcat+0x4>

08003bbe <strcpy>:
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bc4:	f803 2b01 	strb.w	r2, [r3], #1
 8003bc8:	2a00      	cmp	r2, #0
 8003bca:	d1f9      	bne.n	8003bc0 <strcpy+0x2>
 8003bcc:	4770      	bx	lr
	...

08003bd0 <time>:
 8003bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <time+0x30>)
 8003bd4:	4604      	mov	r4, r0
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	4669      	mov	r1, sp
 8003bda:	6818      	ldr	r0, [r3, #0]
 8003bdc:	f000 f812 	bl	8003c04 <_gettimeofday_r>
 8003be0:	2800      	cmp	r0, #0
 8003be2:	da05      	bge.n	8003bf0 <time+0x20>
 8003be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003be8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bec:	e9cd 2300 	strd	r2, r3, [sp]
 8003bf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003bf4:	b10c      	cbz	r4, 8003bfa <time+0x2a>
 8003bf6:	e9c4 0100 	strd	r0, r1, [r4]
 8003bfa:	b004      	add	sp, #16
 8003bfc:	bd10      	pop	{r4, pc}
 8003bfe:	bf00      	nop
 8003c00:	200000d8 	.word	0x200000d8

08003c04 <_gettimeofday_r>:
 8003c04:	b538      	push	{r3, r4, r5, lr}
 8003c06:	2300      	movs	r3, #0
 8003c08:	4c06      	ldr	r4, [pc, #24]	; (8003c24 <_gettimeofday_r+0x20>)
 8003c0a:	4605      	mov	r5, r0
 8003c0c:	4608      	mov	r0, r1
 8003c0e:	4611      	mov	r1, r2
 8003c10:	6023      	str	r3, [r4, #0]
 8003c12:	f000 fbf9 	bl	8004408 <_gettimeofday>
 8003c16:	1c43      	adds	r3, r0, #1
 8003c18:	d102      	bne.n	8003c20 <_gettimeofday_r+0x1c>
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	b103      	cbz	r3, 8003c20 <_gettimeofday_r+0x1c>
 8003c1e:	602b      	str	r3, [r5, #0]
 8003c20:	bd38      	pop	{r3, r4, r5, pc}
 8003c22:	bf00      	nop
 8003c24:	2000160c 	.word	0x2000160c

08003c28 <malloc>:
 8003c28:	4b02      	ldr	r3, [pc, #8]	; (8003c34 <malloc+0xc>)
 8003c2a:	4601      	mov	r1, r0
 8003c2c:	6818      	ldr	r0, [r3, #0]
 8003c2e:	f000 b84f 	b.w	8003cd0 <_malloc_r>
 8003c32:	bf00      	nop
 8003c34:	200000d8 	.word	0x200000d8

08003c38 <_free_r>:
 8003c38:	b538      	push	{r3, r4, r5, lr}
 8003c3a:	4605      	mov	r5, r0
 8003c3c:	2900      	cmp	r1, #0
 8003c3e:	d043      	beq.n	8003cc8 <_free_r+0x90>
 8003c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c44:	1f0c      	subs	r4, r1, #4
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	bfb8      	it	lt
 8003c4a:	18e4      	addlt	r4, r4, r3
 8003c4c:	f000 fbab 	bl	80043a6 <__malloc_lock>
 8003c50:	4a1e      	ldr	r2, [pc, #120]	; (8003ccc <_free_r+0x94>)
 8003c52:	6813      	ldr	r3, [r2, #0]
 8003c54:	4610      	mov	r0, r2
 8003c56:	b933      	cbnz	r3, 8003c66 <_free_r+0x2e>
 8003c58:	6063      	str	r3, [r4, #4]
 8003c5a:	6014      	str	r4, [r2, #0]
 8003c5c:	4628      	mov	r0, r5
 8003c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c62:	f000 bba1 	b.w	80043a8 <__malloc_unlock>
 8003c66:	42a3      	cmp	r3, r4
 8003c68:	d90b      	bls.n	8003c82 <_free_r+0x4a>
 8003c6a:	6821      	ldr	r1, [r4, #0]
 8003c6c:	1862      	adds	r2, r4, r1
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	bf01      	itttt	eq
 8003c72:	681a      	ldreq	r2, [r3, #0]
 8003c74:	685b      	ldreq	r3, [r3, #4]
 8003c76:	1852      	addeq	r2, r2, r1
 8003c78:	6022      	streq	r2, [r4, #0]
 8003c7a:	6063      	str	r3, [r4, #4]
 8003c7c:	6004      	str	r4, [r0, #0]
 8003c7e:	e7ed      	b.n	8003c5c <_free_r+0x24>
 8003c80:	4613      	mov	r3, r2
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	b10a      	cbz	r2, 8003c8a <_free_r+0x52>
 8003c86:	42a2      	cmp	r2, r4
 8003c88:	d9fa      	bls.n	8003c80 <_free_r+0x48>
 8003c8a:	6819      	ldr	r1, [r3, #0]
 8003c8c:	1858      	adds	r0, r3, r1
 8003c8e:	42a0      	cmp	r0, r4
 8003c90:	d10b      	bne.n	8003caa <_free_r+0x72>
 8003c92:	6820      	ldr	r0, [r4, #0]
 8003c94:	4401      	add	r1, r0
 8003c96:	1858      	adds	r0, r3, r1
 8003c98:	4282      	cmp	r2, r0
 8003c9a:	6019      	str	r1, [r3, #0]
 8003c9c:	d1de      	bne.n	8003c5c <_free_r+0x24>
 8003c9e:	6810      	ldr	r0, [r2, #0]
 8003ca0:	6852      	ldr	r2, [r2, #4]
 8003ca2:	4401      	add	r1, r0
 8003ca4:	6019      	str	r1, [r3, #0]
 8003ca6:	605a      	str	r2, [r3, #4]
 8003ca8:	e7d8      	b.n	8003c5c <_free_r+0x24>
 8003caa:	d902      	bls.n	8003cb2 <_free_r+0x7a>
 8003cac:	230c      	movs	r3, #12
 8003cae:	602b      	str	r3, [r5, #0]
 8003cb0:	e7d4      	b.n	8003c5c <_free_r+0x24>
 8003cb2:	6820      	ldr	r0, [r4, #0]
 8003cb4:	1821      	adds	r1, r4, r0
 8003cb6:	428a      	cmp	r2, r1
 8003cb8:	bf01      	itttt	eq
 8003cba:	6811      	ldreq	r1, [r2, #0]
 8003cbc:	6852      	ldreq	r2, [r2, #4]
 8003cbe:	1809      	addeq	r1, r1, r0
 8003cc0:	6021      	streq	r1, [r4, #0]
 8003cc2:	6062      	str	r2, [r4, #4]
 8003cc4:	605c      	str	r4, [r3, #4]
 8003cc6:	e7c9      	b.n	8003c5c <_free_r+0x24>
 8003cc8:	bd38      	pop	{r3, r4, r5, pc}
 8003cca:	bf00      	nop
 8003ccc:	20001100 	.word	0x20001100

08003cd0 <_malloc_r>:
 8003cd0:	b570      	push	{r4, r5, r6, lr}
 8003cd2:	1ccd      	adds	r5, r1, #3
 8003cd4:	f025 0503 	bic.w	r5, r5, #3
 8003cd8:	3508      	adds	r5, #8
 8003cda:	2d0c      	cmp	r5, #12
 8003cdc:	bf38      	it	cc
 8003cde:	250c      	movcc	r5, #12
 8003ce0:	2d00      	cmp	r5, #0
 8003ce2:	4606      	mov	r6, r0
 8003ce4:	db01      	blt.n	8003cea <_malloc_r+0x1a>
 8003ce6:	42a9      	cmp	r1, r5
 8003ce8:	d903      	bls.n	8003cf2 <_malloc_r+0x22>
 8003cea:	230c      	movs	r3, #12
 8003cec:	6033      	str	r3, [r6, #0]
 8003cee:	2000      	movs	r0, #0
 8003cf0:	bd70      	pop	{r4, r5, r6, pc}
 8003cf2:	f000 fb58 	bl	80043a6 <__malloc_lock>
 8003cf6:	4a21      	ldr	r2, [pc, #132]	; (8003d7c <_malloc_r+0xac>)
 8003cf8:	6814      	ldr	r4, [r2, #0]
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	b991      	cbnz	r1, 8003d24 <_malloc_r+0x54>
 8003cfe:	4c20      	ldr	r4, [pc, #128]	; (8003d80 <_malloc_r+0xb0>)
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	b91b      	cbnz	r3, 8003d0c <_malloc_r+0x3c>
 8003d04:	4630      	mov	r0, r6
 8003d06:	f000 fb17 	bl	8004338 <_sbrk_r>
 8003d0a:	6020      	str	r0, [r4, #0]
 8003d0c:	4629      	mov	r1, r5
 8003d0e:	4630      	mov	r0, r6
 8003d10:	f000 fb12 	bl	8004338 <_sbrk_r>
 8003d14:	1c43      	adds	r3, r0, #1
 8003d16:	d124      	bne.n	8003d62 <_malloc_r+0x92>
 8003d18:	230c      	movs	r3, #12
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	6033      	str	r3, [r6, #0]
 8003d1e:	f000 fb43 	bl	80043a8 <__malloc_unlock>
 8003d22:	e7e4      	b.n	8003cee <_malloc_r+0x1e>
 8003d24:	680b      	ldr	r3, [r1, #0]
 8003d26:	1b5b      	subs	r3, r3, r5
 8003d28:	d418      	bmi.n	8003d5c <_malloc_r+0x8c>
 8003d2a:	2b0b      	cmp	r3, #11
 8003d2c:	d90f      	bls.n	8003d4e <_malloc_r+0x7e>
 8003d2e:	600b      	str	r3, [r1, #0]
 8003d30:	18cc      	adds	r4, r1, r3
 8003d32:	50cd      	str	r5, [r1, r3]
 8003d34:	4630      	mov	r0, r6
 8003d36:	f000 fb37 	bl	80043a8 <__malloc_unlock>
 8003d3a:	f104 000b 	add.w	r0, r4, #11
 8003d3e:	1d23      	adds	r3, r4, #4
 8003d40:	f020 0007 	bic.w	r0, r0, #7
 8003d44:	1ac3      	subs	r3, r0, r3
 8003d46:	d0d3      	beq.n	8003cf0 <_malloc_r+0x20>
 8003d48:	425a      	negs	r2, r3
 8003d4a:	50e2      	str	r2, [r4, r3]
 8003d4c:	e7d0      	b.n	8003cf0 <_malloc_r+0x20>
 8003d4e:	684b      	ldr	r3, [r1, #4]
 8003d50:	428c      	cmp	r4, r1
 8003d52:	bf16      	itet	ne
 8003d54:	6063      	strne	r3, [r4, #4]
 8003d56:	6013      	streq	r3, [r2, #0]
 8003d58:	460c      	movne	r4, r1
 8003d5a:	e7eb      	b.n	8003d34 <_malloc_r+0x64>
 8003d5c:	460c      	mov	r4, r1
 8003d5e:	6849      	ldr	r1, [r1, #4]
 8003d60:	e7cc      	b.n	8003cfc <_malloc_r+0x2c>
 8003d62:	1cc4      	adds	r4, r0, #3
 8003d64:	f024 0403 	bic.w	r4, r4, #3
 8003d68:	42a0      	cmp	r0, r4
 8003d6a:	d005      	beq.n	8003d78 <_malloc_r+0xa8>
 8003d6c:	1a21      	subs	r1, r4, r0
 8003d6e:	4630      	mov	r0, r6
 8003d70:	f000 fae2 	bl	8004338 <_sbrk_r>
 8003d74:	3001      	adds	r0, #1
 8003d76:	d0cf      	beq.n	8003d18 <_malloc_r+0x48>
 8003d78:	6025      	str	r5, [r4, #0]
 8003d7a:	e7db      	b.n	8003d34 <_malloc_r+0x64>
 8003d7c:	20001100 	.word	0x20001100
 8003d80:	20001104 	.word	0x20001104

08003d84 <__ssputs_r>:
 8003d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d88:	688e      	ldr	r6, [r1, #8]
 8003d8a:	4682      	mov	sl, r0
 8003d8c:	429e      	cmp	r6, r3
 8003d8e:	460c      	mov	r4, r1
 8003d90:	4690      	mov	r8, r2
 8003d92:	4699      	mov	r9, r3
 8003d94:	d837      	bhi.n	8003e06 <__ssputs_r+0x82>
 8003d96:	898a      	ldrh	r2, [r1, #12]
 8003d98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d9c:	d031      	beq.n	8003e02 <__ssputs_r+0x7e>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	6825      	ldr	r5, [r4, #0]
 8003da2:	6909      	ldr	r1, [r1, #16]
 8003da4:	1a6f      	subs	r7, r5, r1
 8003da6:	6965      	ldr	r5, [r4, #20]
 8003da8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003dac:	fb95 f5f3 	sdiv	r5, r5, r3
 8003db0:	f109 0301 	add.w	r3, r9, #1
 8003db4:	443b      	add	r3, r7
 8003db6:	429d      	cmp	r5, r3
 8003db8:	bf38      	it	cc
 8003dba:	461d      	movcc	r5, r3
 8003dbc:	0553      	lsls	r3, r2, #21
 8003dbe:	d530      	bpl.n	8003e22 <__ssputs_r+0x9e>
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	f7ff ff85 	bl	8003cd0 <_malloc_r>
 8003dc6:	4606      	mov	r6, r0
 8003dc8:	b950      	cbnz	r0, 8003de0 <__ssputs_r+0x5c>
 8003dca:	230c      	movs	r3, #12
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dd0:	f8ca 3000 	str.w	r3, [sl]
 8003dd4:	89a3      	ldrh	r3, [r4, #12]
 8003dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dda:	81a3      	strh	r3, [r4, #12]
 8003ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de0:	463a      	mov	r2, r7
 8003de2:	6921      	ldr	r1, [r4, #16]
 8003de4:	f7ff fe50 	bl	8003a88 <memcpy>
 8003de8:	89a3      	ldrh	r3, [r4, #12]
 8003dea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df2:	81a3      	strh	r3, [r4, #12]
 8003df4:	6126      	str	r6, [r4, #16]
 8003df6:	443e      	add	r6, r7
 8003df8:	6026      	str	r6, [r4, #0]
 8003dfa:	464e      	mov	r6, r9
 8003dfc:	6165      	str	r5, [r4, #20]
 8003dfe:	1bed      	subs	r5, r5, r7
 8003e00:	60a5      	str	r5, [r4, #8]
 8003e02:	454e      	cmp	r6, r9
 8003e04:	d900      	bls.n	8003e08 <__ssputs_r+0x84>
 8003e06:	464e      	mov	r6, r9
 8003e08:	4632      	mov	r2, r6
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	6820      	ldr	r0, [r4, #0]
 8003e0e:	f000 fab1 	bl	8004374 <memmove>
 8003e12:	68a3      	ldr	r3, [r4, #8]
 8003e14:	2000      	movs	r0, #0
 8003e16:	1b9b      	subs	r3, r3, r6
 8003e18:	60a3      	str	r3, [r4, #8]
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	441e      	add	r6, r3
 8003e1e:	6026      	str	r6, [r4, #0]
 8003e20:	e7dc      	b.n	8003ddc <__ssputs_r+0x58>
 8003e22:	462a      	mov	r2, r5
 8003e24:	f000 fac1 	bl	80043aa <_realloc_r>
 8003e28:	4606      	mov	r6, r0
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	d1e2      	bne.n	8003df4 <__ssputs_r+0x70>
 8003e2e:	6921      	ldr	r1, [r4, #16]
 8003e30:	4650      	mov	r0, sl
 8003e32:	f7ff ff01 	bl	8003c38 <_free_r>
 8003e36:	e7c8      	b.n	8003dca <__ssputs_r+0x46>

08003e38 <_svfiprintf_r>:
 8003e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e3c:	461d      	mov	r5, r3
 8003e3e:	898b      	ldrh	r3, [r1, #12]
 8003e40:	b09d      	sub	sp, #116	; 0x74
 8003e42:	061f      	lsls	r7, r3, #24
 8003e44:	4680      	mov	r8, r0
 8003e46:	460c      	mov	r4, r1
 8003e48:	4616      	mov	r6, r2
 8003e4a:	d50f      	bpl.n	8003e6c <_svfiprintf_r+0x34>
 8003e4c:	690b      	ldr	r3, [r1, #16]
 8003e4e:	b96b      	cbnz	r3, 8003e6c <_svfiprintf_r+0x34>
 8003e50:	2140      	movs	r1, #64	; 0x40
 8003e52:	f7ff ff3d 	bl	8003cd0 <_malloc_r>
 8003e56:	6020      	str	r0, [r4, #0]
 8003e58:	6120      	str	r0, [r4, #16]
 8003e5a:	b928      	cbnz	r0, 8003e68 <_svfiprintf_r+0x30>
 8003e5c:	230c      	movs	r3, #12
 8003e5e:	f8c8 3000 	str.w	r3, [r8]
 8003e62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e66:	e0c8      	b.n	8003ffa <_svfiprintf_r+0x1c2>
 8003e68:	2340      	movs	r3, #64	; 0x40
 8003e6a:	6163      	str	r3, [r4, #20]
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e70:	2320      	movs	r3, #32
 8003e72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e76:	2330      	movs	r3, #48	; 0x30
 8003e78:	f04f 0b01 	mov.w	fp, #1
 8003e7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e80:	9503      	str	r5, [sp, #12]
 8003e82:	4637      	mov	r7, r6
 8003e84:	463d      	mov	r5, r7
 8003e86:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e8a:	b10b      	cbz	r3, 8003e90 <_svfiprintf_r+0x58>
 8003e8c:	2b25      	cmp	r3, #37	; 0x25
 8003e8e:	d13e      	bne.n	8003f0e <_svfiprintf_r+0xd6>
 8003e90:	ebb7 0a06 	subs.w	sl, r7, r6
 8003e94:	d00b      	beq.n	8003eae <_svfiprintf_r+0x76>
 8003e96:	4653      	mov	r3, sl
 8003e98:	4632      	mov	r2, r6
 8003e9a:	4621      	mov	r1, r4
 8003e9c:	4640      	mov	r0, r8
 8003e9e:	f7ff ff71 	bl	8003d84 <__ssputs_r>
 8003ea2:	3001      	adds	r0, #1
 8003ea4:	f000 80a4 	beq.w	8003ff0 <_svfiprintf_r+0x1b8>
 8003ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eaa:	4453      	add	r3, sl
 8003eac:	9309      	str	r3, [sp, #36]	; 0x24
 8003eae:	783b      	ldrb	r3, [r7, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 809d 	beq.w	8003ff0 <_svfiprintf_r+0x1b8>
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ec0:	9304      	str	r3, [sp, #16]
 8003ec2:	9307      	str	r3, [sp, #28]
 8003ec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ec8:	931a      	str	r3, [sp, #104]	; 0x68
 8003eca:	462f      	mov	r7, r5
 8003ecc:	2205      	movs	r2, #5
 8003ece:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003ed2:	4850      	ldr	r0, [pc, #320]	; (8004014 <_svfiprintf_r+0x1dc>)
 8003ed4:	f000 fa40 	bl	8004358 <memchr>
 8003ed8:	9b04      	ldr	r3, [sp, #16]
 8003eda:	b9d0      	cbnz	r0, 8003f12 <_svfiprintf_r+0xda>
 8003edc:	06d9      	lsls	r1, r3, #27
 8003ede:	bf44      	itt	mi
 8003ee0:	2220      	movmi	r2, #32
 8003ee2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ee6:	071a      	lsls	r2, r3, #28
 8003ee8:	bf44      	itt	mi
 8003eea:	222b      	movmi	r2, #43	; 0x2b
 8003eec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ef0:	782a      	ldrb	r2, [r5, #0]
 8003ef2:	2a2a      	cmp	r2, #42	; 0x2a
 8003ef4:	d015      	beq.n	8003f22 <_svfiprintf_r+0xea>
 8003ef6:	462f      	mov	r7, r5
 8003ef8:	2000      	movs	r0, #0
 8003efa:	250a      	movs	r5, #10
 8003efc:	9a07      	ldr	r2, [sp, #28]
 8003efe:	4639      	mov	r1, r7
 8003f00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f04:	3b30      	subs	r3, #48	; 0x30
 8003f06:	2b09      	cmp	r3, #9
 8003f08:	d94d      	bls.n	8003fa6 <_svfiprintf_r+0x16e>
 8003f0a:	b1b8      	cbz	r0, 8003f3c <_svfiprintf_r+0x104>
 8003f0c:	e00f      	b.n	8003f2e <_svfiprintf_r+0xf6>
 8003f0e:	462f      	mov	r7, r5
 8003f10:	e7b8      	b.n	8003e84 <_svfiprintf_r+0x4c>
 8003f12:	4a40      	ldr	r2, [pc, #256]	; (8004014 <_svfiprintf_r+0x1dc>)
 8003f14:	463d      	mov	r5, r7
 8003f16:	1a80      	subs	r0, r0, r2
 8003f18:	fa0b f000 	lsl.w	r0, fp, r0
 8003f1c:	4318      	orrs	r0, r3
 8003f1e:	9004      	str	r0, [sp, #16]
 8003f20:	e7d3      	b.n	8003eca <_svfiprintf_r+0x92>
 8003f22:	9a03      	ldr	r2, [sp, #12]
 8003f24:	1d11      	adds	r1, r2, #4
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	9103      	str	r1, [sp, #12]
 8003f2a:	2a00      	cmp	r2, #0
 8003f2c:	db01      	blt.n	8003f32 <_svfiprintf_r+0xfa>
 8003f2e:	9207      	str	r2, [sp, #28]
 8003f30:	e004      	b.n	8003f3c <_svfiprintf_r+0x104>
 8003f32:	4252      	negs	r2, r2
 8003f34:	f043 0302 	orr.w	r3, r3, #2
 8003f38:	9207      	str	r2, [sp, #28]
 8003f3a:	9304      	str	r3, [sp, #16]
 8003f3c:	783b      	ldrb	r3, [r7, #0]
 8003f3e:	2b2e      	cmp	r3, #46	; 0x2e
 8003f40:	d10c      	bne.n	8003f5c <_svfiprintf_r+0x124>
 8003f42:	787b      	ldrb	r3, [r7, #1]
 8003f44:	2b2a      	cmp	r3, #42	; 0x2a
 8003f46:	d133      	bne.n	8003fb0 <_svfiprintf_r+0x178>
 8003f48:	9b03      	ldr	r3, [sp, #12]
 8003f4a:	3702      	adds	r7, #2
 8003f4c:	1d1a      	adds	r2, r3, #4
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	9203      	str	r2, [sp, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	bfb8      	it	lt
 8003f56:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003f5a:	9305      	str	r3, [sp, #20]
 8003f5c:	4d2e      	ldr	r5, [pc, #184]	; (8004018 <_svfiprintf_r+0x1e0>)
 8003f5e:	2203      	movs	r2, #3
 8003f60:	7839      	ldrb	r1, [r7, #0]
 8003f62:	4628      	mov	r0, r5
 8003f64:	f000 f9f8 	bl	8004358 <memchr>
 8003f68:	b138      	cbz	r0, 8003f7a <_svfiprintf_r+0x142>
 8003f6a:	2340      	movs	r3, #64	; 0x40
 8003f6c:	1b40      	subs	r0, r0, r5
 8003f6e:	fa03 f000 	lsl.w	r0, r3, r0
 8003f72:	9b04      	ldr	r3, [sp, #16]
 8003f74:	3701      	adds	r7, #1
 8003f76:	4303      	orrs	r3, r0
 8003f78:	9304      	str	r3, [sp, #16]
 8003f7a:	7839      	ldrb	r1, [r7, #0]
 8003f7c:	2206      	movs	r2, #6
 8003f7e:	4827      	ldr	r0, [pc, #156]	; (800401c <_svfiprintf_r+0x1e4>)
 8003f80:	1c7e      	adds	r6, r7, #1
 8003f82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f86:	f000 f9e7 	bl	8004358 <memchr>
 8003f8a:	2800      	cmp	r0, #0
 8003f8c:	d038      	beq.n	8004000 <_svfiprintf_r+0x1c8>
 8003f8e:	4b24      	ldr	r3, [pc, #144]	; (8004020 <_svfiprintf_r+0x1e8>)
 8003f90:	bb13      	cbnz	r3, 8003fd8 <_svfiprintf_r+0x1a0>
 8003f92:	9b03      	ldr	r3, [sp, #12]
 8003f94:	3307      	adds	r3, #7
 8003f96:	f023 0307 	bic.w	r3, r3, #7
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	9303      	str	r3, [sp, #12]
 8003f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fa0:	444b      	add	r3, r9
 8003fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8003fa4:	e76d      	b.n	8003e82 <_svfiprintf_r+0x4a>
 8003fa6:	fb05 3202 	mla	r2, r5, r2, r3
 8003faa:	2001      	movs	r0, #1
 8003fac:	460f      	mov	r7, r1
 8003fae:	e7a6      	b.n	8003efe <_svfiprintf_r+0xc6>
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	250a      	movs	r5, #10
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	3701      	adds	r7, #1
 8003fb8:	9305      	str	r3, [sp, #20]
 8003fba:	4638      	mov	r0, r7
 8003fbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fc0:	3a30      	subs	r2, #48	; 0x30
 8003fc2:	2a09      	cmp	r2, #9
 8003fc4:	d903      	bls.n	8003fce <_svfiprintf_r+0x196>
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0c8      	beq.n	8003f5c <_svfiprintf_r+0x124>
 8003fca:	9105      	str	r1, [sp, #20]
 8003fcc:	e7c6      	b.n	8003f5c <_svfiprintf_r+0x124>
 8003fce:	fb05 2101 	mla	r1, r5, r1, r2
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	4607      	mov	r7, r0
 8003fd6:	e7f0      	b.n	8003fba <_svfiprintf_r+0x182>
 8003fd8:	ab03      	add	r3, sp, #12
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	4622      	mov	r2, r4
 8003fde:	4b11      	ldr	r3, [pc, #68]	; (8004024 <_svfiprintf_r+0x1ec>)
 8003fe0:	a904      	add	r1, sp, #16
 8003fe2:	4640      	mov	r0, r8
 8003fe4:	f3af 8000 	nop.w
 8003fe8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003fec:	4681      	mov	r9, r0
 8003fee:	d1d6      	bne.n	8003f9e <_svfiprintf_r+0x166>
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	065b      	lsls	r3, r3, #25
 8003ff4:	f53f af35 	bmi.w	8003e62 <_svfiprintf_r+0x2a>
 8003ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ffa:	b01d      	add	sp, #116	; 0x74
 8003ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004000:	ab03      	add	r3, sp, #12
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	4622      	mov	r2, r4
 8004006:	4b07      	ldr	r3, [pc, #28]	; (8004024 <_svfiprintf_r+0x1ec>)
 8004008:	a904      	add	r1, sp, #16
 800400a:	4640      	mov	r0, r8
 800400c:	f000 f882 	bl	8004114 <_printf_i>
 8004010:	e7ea      	b.n	8003fe8 <_svfiprintf_r+0x1b0>
 8004012:	bf00      	nop
 8004014:	080044a8 	.word	0x080044a8
 8004018:	080044ae 	.word	0x080044ae
 800401c:	080044b2 	.word	0x080044b2
 8004020:	00000000 	.word	0x00000000
 8004024:	08003d85 	.word	0x08003d85

08004028 <_printf_common>:
 8004028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800402c:	4691      	mov	r9, r2
 800402e:	461f      	mov	r7, r3
 8004030:	688a      	ldr	r2, [r1, #8]
 8004032:	690b      	ldr	r3, [r1, #16]
 8004034:	4606      	mov	r6, r0
 8004036:	4293      	cmp	r3, r2
 8004038:	bfb8      	it	lt
 800403a:	4613      	movlt	r3, r2
 800403c:	f8c9 3000 	str.w	r3, [r9]
 8004040:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004044:	460c      	mov	r4, r1
 8004046:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800404a:	b112      	cbz	r2, 8004052 <_printf_common+0x2a>
 800404c:	3301      	adds	r3, #1
 800404e:	f8c9 3000 	str.w	r3, [r9]
 8004052:	6823      	ldr	r3, [r4, #0]
 8004054:	0699      	lsls	r1, r3, #26
 8004056:	bf42      	ittt	mi
 8004058:	f8d9 3000 	ldrmi.w	r3, [r9]
 800405c:	3302      	addmi	r3, #2
 800405e:	f8c9 3000 	strmi.w	r3, [r9]
 8004062:	6825      	ldr	r5, [r4, #0]
 8004064:	f015 0506 	ands.w	r5, r5, #6
 8004068:	d107      	bne.n	800407a <_printf_common+0x52>
 800406a:	f104 0a19 	add.w	sl, r4, #25
 800406e:	68e3      	ldr	r3, [r4, #12]
 8004070:	f8d9 2000 	ldr.w	r2, [r9]
 8004074:	1a9b      	subs	r3, r3, r2
 8004076:	42ab      	cmp	r3, r5
 8004078:	dc29      	bgt.n	80040ce <_printf_common+0xa6>
 800407a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800407e:	6822      	ldr	r2, [r4, #0]
 8004080:	3300      	adds	r3, #0
 8004082:	bf18      	it	ne
 8004084:	2301      	movne	r3, #1
 8004086:	0692      	lsls	r2, r2, #26
 8004088:	d42e      	bmi.n	80040e8 <_printf_common+0xc0>
 800408a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800408e:	4639      	mov	r1, r7
 8004090:	4630      	mov	r0, r6
 8004092:	47c0      	blx	r8
 8004094:	3001      	adds	r0, #1
 8004096:	d021      	beq.n	80040dc <_printf_common+0xb4>
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	68e5      	ldr	r5, [r4, #12]
 800409c:	f003 0306 	and.w	r3, r3, #6
 80040a0:	2b04      	cmp	r3, #4
 80040a2:	bf18      	it	ne
 80040a4:	2500      	movne	r5, #0
 80040a6:	f8d9 2000 	ldr.w	r2, [r9]
 80040aa:	f04f 0900 	mov.w	r9, #0
 80040ae:	bf08      	it	eq
 80040b0:	1aad      	subeq	r5, r5, r2
 80040b2:	68a3      	ldr	r3, [r4, #8]
 80040b4:	6922      	ldr	r2, [r4, #16]
 80040b6:	bf08      	it	eq
 80040b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040bc:	4293      	cmp	r3, r2
 80040be:	bfc4      	itt	gt
 80040c0:	1a9b      	subgt	r3, r3, r2
 80040c2:	18ed      	addgt	r5, r5, r3
 80040c4:	341a      	adds	r4, #26
 80040c6:	454d      	cmp	r5, r9
 80040c8:	d11a      	bne.n	8004100 <_printf_common+0xd8>
 80040ca:	2000      	movs	r0, #0
 80040cc:	e008      	b.n	80040e0 <_printf_common+0xb8>
 80040ce:	2301      	movs	r3, #1
 80040d0:	4652      	mov	r2, sl
 80040d2:	4639      	mov	r1, r7
 80040d4:	4630      	mov	r0, r6
 80040d6:	47c0      	blx	r8
 80040d8:	3001      	adds	r0, #1
 80040da:	d103      	bne.n	80040e4 <_printf_common+0xbc>
 80040dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040e4:	3501      	adds	r5, #1
 80040e6:	e7c2      	b.n	800406e <_printf_common+0x46>
 80040e8:	2030      	movs	r0, #48	; 0x30
 80040ea:	18e1      	adds	r1, r4, r3
 80040ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040f6:	4422      	add	r2, r4
 80040f8:	3302      	adds	r3, #2
 80040fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040fe:	e7c4      	b.n	800408a <_printf_common+0x62>
 8004100:	2301      	movs	r3, #1
 8004102:	4622      	mov	r2, r4
 8004104:	4639      	mov	r1, r7
 8004106:	4630      	mov	r0, r6
 8004108:	47c0      	blx	r8
 800410a:	3001      	adds	r0, #1
 800410c:	d0e6      	beq.n	80040dc <_printf_common+0xb4>
 800410e:	f109 0901 	add.w	r9, r9, #1
 8004112:	e7d8      	b.n	80040c6 <_printf_common+0x9e>

08004114 <_printf_i>:
 8004114:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004118:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800411c:	460c      	mov	r4, r1
 800411e:	7e09      	ldrb	r1, [r1, #24]
 8004120:	b085      	sub	sp, #20
 8004122:	296e      	cmp	r1, #110	; 0x6e
 8004124:	4617      	mov	r7, r2
 8004126:	4606      	mov	r6, r0
 8004128:	4698      	mov	r8, r3
 800412a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800412c:	f000 80b3 	beq.w	8004296 <_printf_i+0x182>
 8004130:	d822      	bhi.n	8004178 <_printf_i+0x64>
 8004132:	2963      	cmp	r1, #99	; 0x63
 8004134:	d036      	beq.n	80041a4 <_printf_i+0x90>
 8004136:	d80a      	bhi.n	800414e <_printf_i+0x3a>
 8004138:	2900      	cmp	r1, #0
 800413a:	f000 80b9 	beq.w	80042b0 <_printf_i+0x19c>
 800413e:	2958      	cmp	r1, #88	; 0x58
 8004140:	f000 8083 	beq.w	800424a <_printf_i+0x136>
 8004144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004148:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800414c:	e032      	b.n	80041b4 <_printf_i+0xa0>
 800414e:	2964      	cmp	r1, #100	; 0x64
 8004150:	d001      	beq.n	8004156 <_printf_i+0x42>
 8004152:	2969      	cmp	r1, #105	; 0x69
 8004154:	d1f6      	bne.n	8004144 <_printf_i+0x30>
 8004156:	6820      	ldr	r0, [r4, #0]
 8004158:	6813      	ldr	r3, [r2, #0]
 800415a:	0605      	lsls	r5, r0, #24
 800415c:	f103 0104 	add.w	r1, r3, #4
 8004160:	d52a      	bpl.n	80041b8 <_printf_i+0xa4>
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	6011      	str	r1, [r2, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	da03      	bge.n	8004172 <_printf_i+0x5e>
 800416a:	222d      	movs	r2, #45	; 0x2d
 800416c:	425b      	negs	r3, r3
 800416e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004172:	486f      	ldr	r0, [pc, #444]	; (8004330 <_printf_i+0x21c>)
 8004174:	220a      	movs	r2, #10
 8004176:	e039      	b.n	80041ec <_printf_i+0xd8>
 8004178:	2973      	cmp	r1, #115	; 0x73
 800417a:	f000 809d 	beq.w	80042b8 <_printf_i+0x1a4>
 800417e:	d808      	bhi.n	8004192 <_printf_i+0x7e>
 8004180:	296f      	cmp	r1, #111	; 0x6f
 8004182:	d020      	beq.n	80041c6 <_printf_i+0xb2>
 8004184:	2970      	cmp	r1, #112	; 0x70
 8004186:	d1dd      	bne.n	8004144 <_printf_i+0x30>
 8004188:	6823      	ldr	r3, [r4, #0]
 800418a:	f043 0320 	orr.w	r3, r3, #32
 800418e:	6023      	str	r3, [r4, #0]
 8004190:	e003      	b.n	800419a <_printf_i+0x86>
 8004192:	2975      	cmp	r1, #117	; 0x75
 8004194:	d017      	beq.n	80041c6 <_printf_i+0xb2>
 8004196:	2978      	cmp	r1, #120	; 0x78
 8004198:	d1d4      	bne.n	8004144 <_printf_i+0x30>
 800419a:	2378      	movs	r3, #120	; 0x78
 800419c:	4865      	ldr	r0, [pc, #404]	; (8004334 <_printf_i+0x220>)
 800419e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041a2:	e055      	b.n	8004250 <_printf_i+0x13c>
 80041a4:	6813      	ldr	r3, [r2, #0]
 80041a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041aa:	1d19      	adds	r1, r3, #4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6011      	str	r1, [r2, #0]
 80041b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041b4:	2301      	movs	r3, #1
 80041b6:	e08c      	b.n	80042d2 <_printf_i+0x1be>
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041be:	6011      	str	r1, [r2, #0]
 80041c0:	bf18      	it	ne
 80041c2:	b21b      	sxthne	r3, r3
 80041c4:	e7cf      	b.n	8004166 <_printf_i+0x52>
 80041c6:	6813      	ldr	r3, [r2, #0]
 80041c8:	6825      	ldr	r5, [r4, #0]
 80041ca:	1d18      	adds	r0, r3, #4
 80041cc:	6010      	str	r0, [r2, #0]
 80041ce:	0628      	lsls	r0, r5, #24
 80041d0:	d501      	bpl.n	80041d6 <_printf_i+0xc2>
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	e002      	b.n	80041dc <_printf_i+0xc8>
 80041d6:	0668      	lsls	r0, r5, #25
 80041d8:	d5fb      	bpl.n	80041d2 <_printf_i+0xbe>
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	296f      	cmp	r1, #111	; 0x6f
 80041de:	bf14      	ite	ne
 80041e0:	220a      	movne	r2, #10
 80041e2:	2208      	moveq	r2, #8
 80041e4:	4852      	ldr	r0, [pc, #328]	; (8004330 <_printf_i+0x21c>)
 80041e6:	2100      	movs	r1, #0
 80041e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041ec:	6865      	ldr	r5, [r4, #4]
 80041ee:	2d00      	cmp	r5, #0
 80041f0:	60a5      	str	r5, [r4, #8]
 80041f2:	f2c0 8095 	blt.w	8004320 <_printf_i+0x20c>
 80041f6:	6821      	ldr	r1, [r4, #0]
 80041f8:	f021 0104 	bic.w	r1, r1, #4
 80041fc:	6021      	str	r1, [r4, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d13d      	bne.n	800427e <_printf_i+0x16a>
 8004202:	2d00      	cmp	r5, #0
 8004204:	f040 808e 	bne.w	8004324 <_printf_i+0x210>
 8004208:	4665      	mov	r5, ip
 800420a:	2a08      	cmp	r2, #8
 800420c:	d10b      	bne.n	8004226 <_printf_i+0x112>
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	07db      	lsls	r3, r3, #31
 8004212:	d508      	bpl.n	8004226 <_printf_i+0x112>
 8004214:	6923      	ldr	r3, [r4, #16]
 8004216:	6862      	ldr	r2, [r4, #4]
 8004218:	429a      	cmp	r2, r3
 800421a:	bfde      	ittt	le
 800421c:	2330      	movle	r3, #48	; 0x30
 800421e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004222:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004226:	ebac 0305 	sub.w	r3, ip, r5
 800422a:	6123      	str	r3, [r4, #16]
 800422c:	f8cd 8000 	str.w	r8, [sp]
 8004230:	463b      	mov	r3, r7
 8004232:	aa03      	add	r2, sp, #12
 8004234:	4621      	mov	r1, r4
 8004236:	4630      	mov	r0, r6
 8004238:	f7ff fef6 	bl	8004028 <_printf_common>
 800423c:	3001      	adds	r0, #1
 800423e:	d14d      	bne.n	80042dc <_printf_i+0x1c8>
 8004240:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004244:	b005      	add	sp, #20
 8004246:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800424a:	4839      	ldr	r0, [pc, #228]	; (8004330 <_printf_i+0x21c>)
 800424c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004250:	6813      	ldr	r3, [r2, #0]
 8004252:	6821      	ldr	r1, [r4, #0]
 8004254:	1d1d      	adds	r5, r3, #4
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6015      	str	r5, [r2, #0]
 800425a:	060a      	lsls	r2, r1, #24
 800425c:	d50b      	bpl.n	8004276 <_printf_i+0x162>
 800425e:	07ca      	lsls	r2, r1, #31
 8004260:	bf44      	itt	mi
 8004262:	f041 0120 	orrmi.w	r1, r1, #32
 8004266:	6021      	strmi	r1, [r4, #0]
 8004268:	b91b      	cbnz	r3, 8004272 <_printf_i+0x15e>
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	f022 0220 	bic.w	r2, r2, #32
 8004270:	6022      	str	r2, [r4, #0]
 8004272:	2210      	movs	r2, #16
 8004274:	e7b7      	b.n	80041e6 <_printf_i+0xd2>
 8004276:	064d      	lsls	r5, r1, #25
 8004278:	bf48      	it	mi
 800427a:	b29b      	uxthmi	r3, r3
 800427c:	e7ef      	b.n	800425e <_printf_i+0x14a>
 800427e:	4665      	mov	r5, ip
 8004280:	fbb3 f1f2 	udiv	r1, r3, r2
 8004284:	fb02 3311 	mls	r3, r2, r1, r3
 8004288:	5cc3      	ldrb	r3, [r0, r3]
 800428a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800428e:	460b      	mov	r3, r1
 8004290:	2900      	cmp	r1, #0
 8004292:	d1f5      	bne.n	8004280 <_printf_i+0x16c>
 8004294:	e7b9      	b.n	800420a <_printf_i+0xf6>
 8004296:	6813      	ldr	r3, [r2, #0]
 8004298:	6825      	ldr	r5, [r4, #0]
 800429a:	1d18      	adds	r0, r3, #4
 800429c:	6961      	ldr	r1, [r4, #20]
 800429e:	6010      	str	r0, [r2, #0]
 80042a0:	0628      	lsls	r0, r5, #24
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	d501      	bpl.n	80042aa <_printf_i+0x196>
 80042a6:	6019      	str	r1, [r3, #0]
 80042a8:	e002      	b.n	80042b0 <_printf_i+0x19c>
 80042aa:	066a      	lsls	r2, r5, #25
 80042ac:	d5fb      	bpl.n	80042a6 <_printf_i+0x192>
 80042ae:	8019      	strh	r1, [r3, #0]
 80042b0:	2300      	movs	r3, #0
 80042b2:	4665      	mov	r5, ip
 80042b4:	6123      	str	r3, [r4, #16]
 80042b6:	e7b9      	b.n	800422c <_printf_i+0x118>
 80042b8:	6813      	ldr	r3, [r2, #0]
 80042ba:	1d19      	adds	r1, r3, #4
 80042bc:	6011      	str	r1, [r2, #0]
 80042be:	681d      	ldr	r5, [r3, #0]
 80042c0:	6862      	ldr	r2, [r4, #4]
 80042c2:	2100      	movs	r1, #0
 80042c4:	4628      	mov	r0, r5
 80042c6:	f000 f847 	bl	8004358 <memchr>
 80042ca:	b108      	cbz	r0, 80042d0 <_printf_i+0x1bc>
 80042cc:	1b40      	subs	r0, r0, r5
 80042ce:	6060      	str	r0, [r4, #4]
 80042d0:	6863      	ldr	r3, [r4, #4]
 80042d2:	6123      	str	r3, [r4, #16]
 80042d4:	2300      	movs	r3, #0
 80042d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042da:	e7a7      	b.n	800422c <_printf_i+0x118>
 80042dc:	6923      	ldr	r3, [r4, #16]
 80042de:	462a      	mov	r2, r5
 80042e0:	4639      	mov	r1, r7
 80042e2:	4630      	mov	r0, r6
 80042e4:	47c0      	blx	r8
 80042e6:	3001      	adds	r0, #1
 80042e8:	d0aa      	beq.n	8004240 <_printf_i+0x12c>
 80042ea:	6823      	ldr	r3, [r4, #0]
 80042ec:	079b      	lsls	r3, r3, #30
 80042ee:	d413      	bmi.n	8004318 <_printf_i+0x204>
 80042f0:	68e0      	ldr	r0, [r4, #12]
 80042f2:	9b03      	ldr	r3, [sp, #12]
 80042f4:	4298      	cmp	r0, r3
 80042f6:	bfb8      	it	lt
 80042f8:	4618      	movlt	r0, r3
 80042fa:	e7a3      	b.n	8004244 <_printf_i+0x130>
 80042fc:	2301      	movs	r3, #1
 80042fe:	464a      	mov	r2, r9
 8004300:	4639      	mov	r1, r7
 8004302:	4630      	mov	r0, r6
 8004304:	47c0      	blx	r8
 8004306:	3001      	adds	r0, #1
 8004308:	d09a      	beq.n	8004240 <_printf_i+0x12c>
 800430a:	3501      	adds	r5, #1
 800430c:	68e3      	ldr	r3, [r4, #12]
 800430e:	9a03      	ldr	r2, [sp, #12]
 8004310:	1a9b      	subs	r3, r3, r2
 8004312:	42ab      	cmp	r3, r5
 8004314:	dcf2      	bgt.n	80042fc <_printf_i+0x1e8>
 8004316:	e7eb      	b.n	80042f0 <_printf_i+0x1dc>
 8004318:	2500      	movs	r5, #0
 800431a:	f104 0919 	add.w	r9, r4, #25
 800431e:	e7f5      	b.n	800430c <_printf_i+0x1f8>
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1ac      	bne.n	800427e <_printf_i+0x16a>
 8004324:	7803      	ldrb	r3, [r0, #0]
 8004326:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800432a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800432e:	e76c      	b.n	800420a <_printf_i+0xf6>
 8004330:	080044b9 	.word	0x080044b9
 8004334:	080044ca 	.word	0x080044ca

08004338 <_sbrk_r>:
 8004338:	b538      	push	{r3, r4, r5, lr}
 800433a:	2300      	movs	r3, #0
 800433c:	4c05      	ldr	r4, [pc, #20]	; (8004354 <_sbrk_r+0x1c>)
 800433e:	4605      	mov	r5, r0
 8004340:	4608      	mov	r0, r1
 8004342:	6023      	str	r3, [r4, #0]
 8004344:	f7fc fdd0 	bl	8000ee8 <_sbrk>
 8004348:	1c43      	adds	r3, r0, #1
 800434a:	d102      	bne.n	8004352 <_sbrk_r+0x1a>
 800434c:	6823      	ldr	r3, [r4, #0]
 800434e:	b103      	cbz	r3, 8004352 <_sbrk_r+0x1a>
 8004350:	602b      	str	r3, [r5, #0]
 8004352:	bd38      	pop	{r3, r4, r5, pc}
 8004354:	2000160c 	.word	0x2000160c

08004358 <memchr>:
 8004358:	b510      	push	{r4, lr}
 800435a:	b2c9      	uxtb	r1, r1
 800435c:	4402      	add	r2, r0
 800435e:	4290      	cmp	r0, r2
 8004360:	4603      	mov	r3, r0
 8004362:	d101      	bne.n	8004368 <memchr+0x10>
 8004364:	2300      	movs	r3, #0
 8004366:	e003      	b.n	8004370 <memchr+0x18>
 8004368:	781c      	ldrb	r4, [r3, #0]
 800436a:	3001      	adds	r0, #1
 800436c:	428c      	cmp	r4, r1
 800436e:	d1f6      	bne.n	800435e <memchr+0x6>
 8004370:	4618      	mov	r0, r3
 8004372:	bd10      	pop	{r4, pc}

08004374 <memmove>:
 8004374:	4288      	cmp	r0, r1
 8004376:	b510      	push	{r4, lr}
 8004378:	eb01 0302 	add.w	r3, r1, r2
 800437c:	d807      	bhi.n	800438e <memmove+0x1a>
 800437e:	1e42      	subs	r2, r0, #1
 8004380:	4299      	cmp	r1, r3
 8004382:	d00a      	beq.n	800439a <memmove+0x26>
 8004384:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004388:	f802 4f01 	strb.w	r4, [r2, #1]!
 800438c:	e7f8      	b.n	8004380 <memmove+0xc>
 800438e:	4283      	cmp	r3, r0
 8004390:	d9f5      	bls.n	800437e <memmove+0xa>
 8004392:	1881      	adds	r1, r0, r2
 8004394:	1ad2      	subs	r2, r2, r3
 8004396:	42d3      	cmn	r3, r2
 8004398:	d100      	bne.n	800439c <memmove+0x28>
 800439a:	bd10      	pop	{r4, pc}
 800439c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80043a0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80043a4:	e7f7      	b.n	8004396 <memmove+0x22>

080043a6 <__malloc_lock>:
 80043a6:	4770      	bx	lr

080043a8 <__malloc_unlock>:
 80043a8:	4770      	bx	lr

080043aa <_realloc_r>:
 80043aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ac:	4607      	mov	r7, r0
 80043ae:	4614      	mov	r4, r2
 80043b0:	460e      	mov	r6, r1
 80043b2:	b921      	cbnz	r1, 80043be <_realloc_r+0x14>
 80043b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80043b8:	4611      	mov	r1, r2
 80043ba:	f7ff bc89 	b.w	8003cd0 <_malloc_r>
 80043be:	b922      	cbnz	r2, 80043ca <_realloc_r+0x20>
 80043c0:	f7ff fc3a 	bl	8003c38 <_free_r>
 80043c4:	4625      	mov	r5, r4
 80043c6:	4628      	mov	r0, r5
 80043c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043ca:	f000 f814 	bl	80043f6 <_malloc_usable_size_r>
 80043ce:	42a0      	cmp	r0, r4
 80043d0:	d20f      	bcs.n	80043f2 <_realloc_r+0x48>
 80043d2:	4621      	mov	r1, r4
 80043d4:	4638      	mov	r0, r7
 80043d6:	f7ff fc7b 	bl	8003cd0 <_malloc_r>
 80043da:	4605      	mov	r5, r0
 80043dc:	2800      	cmp	r0, #0
 80043de:	d0f2      	beq.n	80043c6 <_realloc_r+0x1c>
 80043e0:	4631      	mov	r1, r6
 80043e2:	4622      	mov	r2, r4
 80043e4:	f7ff fb50 	bl	8003a88 <memcpy>
 80043e8:	4631      	mov	r1, r6
 80043ea:	4638      	mov	r0, r7
 80043ec:	f7ff fc24 	bl	8003c38 <_free_r>
 80043f0:	e7e9      	b.n	80043c6 <_realloc_r+0x1c>
 80043f2:	4635      	mov	r5, r6
 80043f4:	e7e7      	b.n	80043c6 <_realloc_r+0x1c>

080043f6 <_malloc_usable_size_r>:
 80043f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043fa:	1f18      	subs	r0, r3, #4
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bfbc      	itt	lt
 8004400:	580b      	ldrlt	r3, [r1, r0]
 8004402:	18c0      	addlt	r0, r0, r3
 8004404:	4770      	bx	lr
	...

08004408 <_gettimeofday>:
 8004408:	2258      	movs	r2, #88	; 0x58
 800440a:	4b02      	ldr	r3, [pc, #8]	; (8004414 <_gettimeofday+0xc>)
 800440c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004410:	601a      	str	r2, [r3, #0]
 8004412:	4770      	bx	lr
 8004414:	2000160c 	.word	0x2000160c

08004418 <_init>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr

08004424 <_fini>:
 8004424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004426:	bf00      	nop
 8004428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800442a:	bc08      	pop	{r3}
 800442c:	469e      	mov	lr, r3
 800442e:	4770      	bx	lr
