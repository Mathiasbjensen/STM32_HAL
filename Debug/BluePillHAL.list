
BluePillHAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048cc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  080049dc  080049dc  000149dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bc0  08004bc0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08004bc0  08004bc0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bc0  08004bc0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bc0  08004bc0  00014bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bc4  08004bc4  00014bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001214  2000007c  08004c44  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001290  08004c44  00021290  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012659  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d93  00000000  00000000  000326fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  00035498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  00036550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cb5  00000000  00000000  000374c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001091d  00000000  00000000  00051175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000938dc  00000000  00000000  00061a92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f536e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000509c  00000000  00000000  000f53c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000fa460  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000fa484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	080049c4 	.word	0x080049c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	080049c4 	.word	0x080049c4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000098 	.word	0x20000098
 800018c:	200000ec 	.word	0x200000ec

08000190 <nemeus_Power_Cycle>:
	osDelay(500);
	HAL_UART_Receive(&huart1, trash, 128, 100);

}

void nemeus_Power_Cycle() {
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000194:	2200      	movs	r2, #0
 8000196:	f44f 7180 	mov.w	r1, #256	; 0x100
 800019a:	4807      	ldr	r0, [pc, #28]	; (80001b8 <nemeus_Power_Cycle+0x28>)
 800019c:	f000 ff36 	bl	800100c <HAL_GPIO_WritePin>
    osDelay(1500);
 80001a0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80001a4:	f002 f81a 	bl	80021dc <osDelay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80001a8:	2201      	movs	r2, #1
 80001aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001ae:	4802      	ldr	r0, [pc, #8]	; (80001b8 <nemeus_Power_Cycle+0x28>)
 80001b0:	f000 ff2c 	bl	800100c <HAL_GPIO_WritePin>
	HAL_UART_Receive(&huart3, trash, 128, 100);
	osDelay(50);
	HAL_UART_Receive(&huart3, trash, 128, 100);
	*/

}
 80001b4:	bf00      	nop
 80001b6:	bd80      	pop	{r7, pc}
 80001b8:	40010800 	.word	0x40010800

080001bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001bc:	b5b0      	push	{r4, r5, r7, lr}
 80001be:	b08a      	sub	sp, #40	; 0x28
 80001c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001c2:	f000 fc8d 	bl	8000ae0 <HAL_Init>

  /* USER CODE BEGIN Init */

  srand(time(0));
 80001c6:	2000      	movs	r0, #0
 80001c8:	f003 fa58 	bl	800367c <time>
 80001cc:	4603      	mov	r3, r0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f003 f9b6 	bl	8003540 <srand>
  int x = rand();
 80001d4:	f003 f9e2 	bl	800359c <rand>
 80001d8:	6278      	str	r0, [r7, #36]	; 0x24
  int y = rand();
 80001da:	f003 f9df 	bl	800359c <rand>
 80001de:	6238      	str	r0, [r7, #32]
  sprintf(randSeq, "%X", x%16);
 80001e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80001e2:	425a      	negs	r2, r3
 80001e4:	f003 030f 	and.w	r3, r3, #15
 80001e8:	f002 020f 	and.w	r2, r2, #15
 80001ec:	bf58      	it	pl
 80001ee:	4253      	negpl	r3, r2
 80001f0:	461a      	mov	r2, r3
 80001f2:	491c      	ldr	r1, [pc, #112]	; (8000264 <main+0xa8>)
 80001f4:	481c      	ldr	r0, [pc, #112]	; (8000268 <main+0xac>)
 80001f6:	f003 fa11 	bl	800361c <siprintf>
  sprintf(stry, "%X", y%16);
 80001fa:	6a3b      	ldr	r3, [r7, #32]
 80001fc:	425a      	negs	r2, r3
 80001fe:	f003 030f 	and.w	r3, r3, #15
 8000202:	f002 020f 	and.w	r2, r2, #15
 8000206:	bf58      	it	pl
 8000208:	4253      	negpl	r3, r2
 800020a:	461a      	mov	r2, r3
 800020c:	4915      	ldr	r1, [pc, #84]	; (8000264 <main+0xa8>)
 800020e:	4817      	ldr	r0, [pc, #92]	; (800026c <main+0xb0>)
 8000210:	f003 fa04 	bl	800361c <siprintf>
  strcat(randSeq, stry);
 8000214:	4915      	ldr	r1, [pc, #84]	; (800026c <main+0xb0>)
 8000216:	4814      	ldr	r0, [pc, #80]	; (8000268 <main+0xac>)
 8000218:	f003 fa20 	bl	800365c <strcat>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021c:	f000 f82e 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000220:	f000 f8e6 	bl	80003f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000224:	f000 f866 	bl	80002f4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000228:	f000 f88e 	bl	8000348 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800022c:	f000 f8b6 	bl	800039c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000236:	480e      	ldr	r0, [pc, #56]	; (8000270 <main+0xb4>)
 8000238:	f000 fee8 	bl	800100c <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800023c:	4b0d      	ldr	r3, [pc, #52]	; (8000274 <main+0xb8>)
 800023e:	1d3c      	adds	r4, r7, #4
 8000240:	461d      	mov	r5, r3
 8000242:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000244:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000246:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800024a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	2100      	movs	r1, #0
 8000252:	4618      	mov	r0, r3
 8000254:	f001 ff76 	bl	8002144 <osThreadCreate>
 8000258:	4603      	mov	r3, r0
 800025a:	4a07      	ldr	r2, [pc, #28]	; (8000278 <main+0xbc>)
 800025c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800025e:	f001 ff6a 	bl	8002136 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000262:	e7fe      	b.n	8000262 <main+0xa6>
 8000264:	080049e8 	.word	0x080049e8
 8000268:	20001230 	.word	0x20001230
 800026c:	200011cc 	.word	0x200011cc
 8000270:	40010800 	.word	0x40010800
 8000274:	080049ec 	.word	0x080049ec
 8000278:	200010c4 	.word	0x200010c4

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b090      	sub	sp, #64	; 0x40
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	f107 0318 	add.w	r3, r7, #24
 8000286:	2228      	movs	r2, #40	; 0x28
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f003 f950 	bl	8003530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000290:	1d3b      	adds	r3, r7, #4
 8000292:	2200      	movs	r2, #0
 8000294:	601a      	str	r2, [r3, #0]
 8000296:	605a      	str	r2, [r3, #4]
 8000298:	609a      	str	r2, [r3, #8]
 800029a:	60da      	str	r2, [r3, #12]
 800029c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029e:	2302      	movs	r3, #2
 80002a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a2:	2301      	movs	r3, #1
 80002a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a6:	2310      	movs	r3, #16
 80002a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002aa:	2300      	movs	r3, #0
 80002ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ae:	f107 0318 	add.w	r3, r7, #24
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 fedc 	bl	8001070 <HAL_RCC_OscConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002be:	f000 f9af 	bl	8000620 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c2:	230f      	movs	r3, #15
 80002c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2100      	movs	r1, #0
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 f948 	bl	8001570 <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002e6:	f000 f99b 	bl	8000620 <Error_Handler>
  }
}
 80002ea:	bf00      	nop
 80002ec:	3740      	adds	r7, #64	; 0x40
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002f8:	4b11      	ldr	r3, [pc, #68]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 80002fa:	4a12      	ldr	r2, [pc, #72]	; (8000344 <MX_USART1_UART_Init+0x50>)
 80002fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80002fe:	4b10      	ldr	r3, [pc, #64]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 8000300:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000304:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800030c:	4b0c      	ldr	r3, [pc, #48]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 800030e:	2200      	movs	r2, #0
 8000310:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000312:	4b0b      	ldr	r3, [pc, #44]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 8000314:	2200      	movs	r2, #0
 8000316:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000318:	4b09      	ldr	r3, [pc, #36]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 800031a:	220c      	movs	r2, #12
 800031c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800032a:	4805      	ldr	r0, [pc, #20]	; (8000340 <MX_USART1_UART_Init+0x4c>)
 800032c:	f001 fd34 	bl	8001d98 <HAL_UART_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000336:	f000 f973 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20001188 	.word	0x20001188
 8000344:	40013800 	.word	0x40013800

08000348 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <MX_USART2_UART_Init+0x4c>)
 800034e:	4a12      	ldr	r2, [pc, #72]	; (8000398 <MX_USART2_UART_Init+0x50>)
 8000350:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000352:	4b10      	ldr	r3, [pc, #64]	; (8000394 <MX_USART2_UART_Init+0x4c>)
 8000354:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000358:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800035a:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <MX_USART2_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000360:	4b0c      	ldr	r3, [pc, #48]	; (8000394 <MX_USART2_UART_Init+0x4c>)
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000366:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <MX_USART2_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800036c:	4b09      	ldr	r3, [pc, #36]	; (8000394 <MX_USART2_UART_Init+0x4c>)
 800036e:	220c      	movs	r2, #12
 8000370:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000372:	4b08      	ldr	r3, [pc, #32]	; (8000394 <MX_USART2_UART_Init+0x4c>)
 8000374:	2200      	movs	r2, #0
 8000376:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000378:	4b06      	ldr	r3, [pc, #24]	; (8000394 <MX_USART2_UART_Init+0x4c>)
 800037a:	2200      	movs	r2, #0
 800037c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <MX_USART2_UART_Init+0x4c>)
 8000380:	f001 fd0a 	bl	8001d98 <HAL_UART_Init>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800038a:	f000 f949 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	200011d0 	.word	0x200011d0
 8000398:	40004400 	.word	0x40004400

0800039c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80003a0:	4b11      	ldr	r3, [pc, #68]	; (80003e8 <MX_USART3_UART_Init+0x4c>)
 80003a2:	4a12      	ldr	r2, [pc, #72]	; (80003ec <MX_USART3_UART_Init+0x50>)
 80003a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <MX_USART3_UART_Init+0x4c>)
 80003a8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80003ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	; (80003e8 <MX_USART3_UART_Init+0x4c>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <MX_USART3_UART_Init+0x4c>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <MX_USART3_UART_Init+0x4c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <MX_USART3_UART_Init+0x4c>)
 80003c2:	220c      	movs	r2, #12
 80003c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <MX_USART3_UART_Init+0x4c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <MX_USART3_UART_Init+0x4c>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80003d2:	4805      	ldr	r0, [pc, #20]	; (80003e8 <MX_USART3_UART_Init+0x4c>)
 80003d4:	f001 fce0 	bl	8001d98 <HAL_UART_Init>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80003de:	f000 f91f 	bl	8000620 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	200010c8 	.word	0x200010c8
 80003ec:	40004800 	.word	0x40004800

080003f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	2200      	movs	r2, #0
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	605a      	str	r2, [r3, #4]
 8000400:	609a      	str	r2, [r3, #8]
 8000402:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000404:	4b28      	ldr	r3, [pc, #160]	; (80004a8 <MX_GPIO_Init+0xb8>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a27      	ldr	r2, [pc, #156]	; (80004a8 <MX_GPIO_Init+0xb8>)
 800040a:	f043 0310 	orr.w	r3, r3, #16
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b25      	ldr	r3, [pc, #148]	; (80004a8 <MX_GPIO_Init+0xb8>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0310 	and.w	r3, r3, #16
 8000418:	60fb      	str	r3, [r7, #12]
 800041a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041c:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <MX_GPIO_Init+0xb8>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a21      	ldr	r2, [pc, #132]	; (80004a8 <MX_GPIO_Init+0xb8>)
 8000422:	f043 0304 	orr.w	r3, r3, #4
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <MX_GPIO_Init+0xb8>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0304 	and.w	r3, r3, #4
 8000430:	60bb      	str	r3, [r7, #8]
 8000432:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000434:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <MX_GPIO_Init+0xb8>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a1b      	ldr	r2, [pc, #108]	; (80004a8 <MX_GPIO_Init+0xb8>)
 800043a:	f043 0308 	orr.w	r3, r3, #8
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b19      	ldr	r3, [pc, #100]	; (80004a8 <MX_GPIO_Init+0xb8>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0308 	and.w	r3, r3, #8
 8000448:	607b      	str	r3, [r7, #4]
 800044a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000452:	4816      	ldr	r0, [pc, #88]	; (80004ac <MX_GPIO_Init+0xbc>)
 8000454:	f000 fdda 	bl	800100c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800045e:	4814      	ldr	r0, [pc, #80]	; (80004b0 <MX_GPIO_Init+0xc0>)
 8000460:	f000 fdd4 	bl	800100c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000464:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046a:	2301      	movs	r3, #1
 800046c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046e:	2300      	movs	r3, #0
 8000470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000472:	2302      	movs	r3, #2
 8000474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000476:	f107 0310 	add.w	r3, r7, #16
 800047a:	4619      	mov	r1, r3
 800047c:	480b      	ldr	r0, [pc, #44]	; (80004ac <MX_GPIO_Init+0xbc>)
 800047e:	f000 fc41 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000482:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000488:	2301      	movs	r3, #1
 800048a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000490:	2302      	movs	r3, #2
 8000492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000494:	f107 0310 	add.w	r3, r7, #16
 8000498:	4619      	mov	r1, r3
 800049a:	4805      	ldr	r0, [pc, #20]	; (80004b0 <MX_GPIO_Init+0xc0>)
 800049c:	f000 fc32 	bl	8000d04 <HAL_GPIO_Init>

}
 80004a0:	bf00      	nop
 80004a2:	3720      	adds	r7, #32
 80004a4:	46bd      	mov	sp, r7
 80004a6:	bd80      	pop	{r7, pc}
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40011000 	.word	0x40011000
 80004b0:	40010800 	.word	0x40010800

080004b4 <sendToESP>:

/* USER CODE BEGIN 4 */

void sendToESP(uint8_t * msg) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, beginDelim, 1, 50);
 80004bc:	2332      	movs	r3, #50	; 0x32
 80004be:	2201      	movs	r2, #1
 80004c0:	4916      	ldr	r1, [pc, #88]	; (800051c <sendToESP+0x68>)
 80004c2:	4817      	ldr	r0, [pc, #92]	; (8000520 <sendToESP+0x6c>)
 80004c4:	f001 fcb5 	bl	8001e32 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, msg, strlen(msg), 50);
 80004c8:	6878      	ldr	r0, [r7, #4]
 80004ca:	f7ff fe41 	bl	8000150 <strlen>
 80004ce:	4603      	mov	r3, r0
 80004d0:	b29a      	uxth	r2, r3
 80004d2:	2332      	movs	r3, #50	; 0x32
 80004d4:	6879      	ldr	r1, [r7, #4]
 80004d6:	4812      	ldr	r0, [pc, #72]	; (8000520 <sendToESP+0x6c>)
 80004d8:	f001 fcab 	bl	8001e32 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, endDelim, 1, 50);
 80004dc:	2332      	movs	r3, #50	; 0x32
 80004de:	2201      	movs	r2, #1
 80004e0:	4910      	ldr	r1, [pc, #64]	; (8000524 <sendToESP+0x70>)
 80004e2:	480f      	ldr	r0, [pc, #60]	; (8000520 <sendToESP+0x6c>)
 80004e4:	f001 fca5 	bl	8001e32 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, beginDelim, 1, 50);
 80004e8:	2332      	movs	r3, #50	; 0x32
 80004ea:	2201      	movs	r2, #1
 80004ec:	490b      	ldr	r1, [pc, #44]	; (800051c <sendToESP+0x68>)
 80004ee:	480e      	ldr	r0, [pc, #56]	; (8000528 <sendToESP+0x74>)
 80004f0:	f001 fc9f 	bl	8001e32 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, msg, strlen(msg), 50);
 80004f4:	6878      	ldr	r0, [r7, #4]
 80004f6:	f7ff fe2b 	bl	8000150 <strlen>
 80004fa:	4603      	mov	r3, r0
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	2332      	movs	r3, #50	; 0x32
 8000500:	6879      	ldr	r1, [r7, #4]
 8000502:	4809      	ldr	r0, [pc, #36]	; (8000528 <sendToESP+0x74>)
 8000504:	f001 fc95 	bl	8001e32 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, endDelim, 1, 50);
 8000508:	2332      	movs	r3, #50	; 0x32
 800050a:	2201      	movs	r2, #1
 800050c:	4905      	ldr	r1, [pc, #20]	; (8000524 <sendToESP+0x70>)
 800050e:	4806      	ldr	r0, [pc, #24]	; (8000528 <sendToESP+0x74>)
 8000510:	f001 fc8f 	bl	8001e32 <HAL_UART_Transmit>
}
 8000514:	bf00      	nop
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}
 800051c:	20000000 	.word	0x20000000
 8000520:	200011d0 	.word	0x200011d0
 8000524:	20000004 	.word	0x20000004
 8000528:	20001188 	.word	0x20001188

0800052c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b0cb      	sub	sp, #300	; 0x12c
 8000530:	af00      	add	r7, sp, #0
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */

  uint8_t test[] = "AT+COPS?\r\n";
 8000536:	4a2b      	ldr	r2, [pc, #172]	; (80005e4 <StartDefaultTask+0xb8>)
 8000538:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800053c:	ca07      	ldmia	r2, {r0, r1, r2}
 800053e:	c303      	stmia	r3!, {r0, r1}
 8000540:	801a      	strh	r2, [r3, #0]
 8000542:	3302      	adds	r3, #2
 8000544:	0c12      	lsrs	r2, r2, #16
 8000546:	701a      	strb	r2, [r3, #0]
  sendToESP(test);
 8000548:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800054c:	4618      	mov	r0, r3
 800054e:	f7ff ffb1 	bl	80004b4 <sendToESP>
  osDelay(4500);
 8000552:	f241 1094 	movw	r0, #4500	; 0x1194
 8000556:	f001 fe41 	bl	80021dc <osDelay>
  //SARA_Init();
  nemeus_Power_Cycle();
 800055a:	f7ff fe19 	bl	8000190 <nemeus_Power_Cycle>

  uint8_t testRN[] = "AT+MAC=SNDLCR\r\n";
 800055e:	4b22      	ldr	r3, [pc, #136]	; (80005e8 <StartDefaultTask+0xbc>)
 8000560:	f507 7484 	add.w	r4, r7, #264	; 0x108
 8000564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000566:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint8_t sigfoxSend[23] = "AT+SF=SNDBIN,";
 800056a:	4b20      	ldr	r3, [pc, #128]	; (80005ec <StartDefaultTask+0xc0>)
 800056c:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8000570:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000572:	c407      	stmia	r4!, {r0, r1, r2}
 8000574:	8023      	strh	r3, [r4, #0]
 8000576:	f107 03fe 	add.w	r3, r7, #254	; 0xfe
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	605a      	str	r2, [r3, #4]
 8000580:	721a      	strb	r2, [r3, #8]
  uint8_t sigfoxEnd[] = ",0\r\n";
 8000582:	4a1b      	ldr	r2, [pc, #108]	; (80005f0 <StartDefaultTask+0xc4>)
 8000584:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000588:	e892 0003 	ldmia.w	r2, {r0, r1}
 800058c:	6018      	str	r0, [r3, #0]
 800058e:	3304      	adds	r3, #4
 8000590:	7019      	strb	r1, [r3, #0]
  int sigFoxSeq = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  uint8_t myInt[4];// = "0000"

  strcat(sigfoxSend, randSeq);
 8000598:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800059c:	4915      	ldr	r1, [pc, #84]	; (80005f4 <StartDefaultTask+0xc8>)
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 f85c 	bl	800365c <strcat>
  strcat(sigfoxSend, myInt);
 80005a4:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 80005a8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80005ac:	4611      	mov	r1, r2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 f854 	bl	800365c <strcat>
  strcat(sigfoxSend, sigfoxEnd);
 80005b4:	f107 02e8 	add.w	r2, r7, #232	; 0xe8
 80005b8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80005bc:	4611      	mov	r1, r2
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 f84c 	bl	800365c <strcat>
  uint8_t SigFoxMessage[69];
  uint8_t saraMSG[69];

  for(;;)
  {
    osDelay(1000);
 80005c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c8:	f001 fe08 	bl	80021dc <osDelay>
    //sendToESP(test);
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80005cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d0:	4809      	ldr	r0, [pc, #36]	; (80005f8 <StartDefaultTask+0xcc>)
 80005d2:	f000 fd33 	bl	800103c <HAL_GPIO_TogglePin>
	HAL_UART_Transmit(&huart3, sigfoxSend, strlen(sigfoxSend), 50);
    HAL_UART_Receive(&huart3, SigFoxMessage, 69, 1500);
	sendToESP(SigFoxMessage);
	*/

    osDelay(1000);
 80005d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005da:	f001 fdff 	bl	80021dc <osDelay>
    nemeus_Power_Cycle();
 80005de:	f7ff fdd7 	bl	8000190 <nemeus_Power_Cycle>
    osDelay(1000);
 80005e2:	e7ef      	b.n	80005c4 <StartDefaultTask+0x98>
 80005e4:	08004a08 	.word	0x08004a08
 80005e8:	08004a14 	.word	0x08004a14
 80005ec:	08004a24 	.word	0x08004a24
 80005f0:	08004a3c 	.word	0x08004a3c
 80005f4:	20001230 	.word	0x20001230
 80005f8:	40011000 	.word	0x40011000

080005fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a04      	ldr	r2, [pc, #16]	; (800061c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d101      	bne.n	8000612 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800060e:	f000 fa7d 	bl	8000b0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40012c00 	.word	0x40012c00

08000620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000624:	b672      	cpsid	i
}
 8000626:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000628:	e7fe      	b.n	8000628 <Error_Handler+0x8>
	...

0800062c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000632:	4b18      	ldr	r3, [pc, #96]	; (8000694 <HAL_MspInit+0x68>)
 8000634:	699b      	ldr	r3, [r3, #24]
 8000636:	4a17      	ldr	r2, [pc, #92]	; (8000694 <HAL_MspInit+0x68>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6193      	str	r3, [r2, #24]
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <HAL_MspInit+0x68>)
 8000640:	699b      	ldr	r3, [r3, #24]
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800064a:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_MspInit+0x68>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	4a11      	ldr	r2, [pc, #68]	; (8000694 <HAL_MspInit+0x68>)
 8000650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000654:	61d3      	str	r3, [r2, #28]
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_MspInit+0x68>)
 8000658:	69db      	ldr	r3, [r3, #28]
 800065a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	210f      	movs	r1, #15
 8000666:	f06f 0001 	mvn.w	r0, #1
 800066a:	f000 fb20 	bl	8000cae <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <HAL_MspInit+0x6c>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <HAL_MspInit+0x6c>)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000
 8000698:	40010000 	.word	0x40010000

0800069c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08c      	sub	sp, #48	; 0x30
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a53      	ldr	r2, [pc, #332]	; (8000804 <HAL_UART_MspInit+0x168>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d132      	bne.n	8000722 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80006bc:	4b52      	ldr	r3, [pc, #328]	; (8000808 <HAL_UART_MspInit+0x16c>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a51      	ldr	r2, [pc, #324]	; (8000808 <HAL_UART_MspInit+0x16c>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b4f      	ldr	r3, [pc, #316]	; (8000808 <HAL_UART_MspInit+0x16c>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d0:	61fb      	str	r3, [r7, #28]
 80006d2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b4c      	ldr	r3, [pc, #304]	; (8000808 <HAL_UART_MspInit+0x16c>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a4b      	ldr	r2, [pc, #300]	; (8000808 <HAL_UART_MspInit+0x16c>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b49      	ldr	r3, [pc, #292]	; (8000808 <HAL_UART_MspInit+0x16c>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	61bb      	str	r3, [r7, #24]
 80006ea:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f2:	2302      	movs	r3, #2
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f6:	2303      	movs	r3, #3
 80006f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	4619      	mov	r1, r3
 8000700:	4842      	ldr	r0, [pc, #264]	; (800080c <HAL_UART_MspInit+0x170>)
 8000702:	f000 faff 	bl	8000d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800070a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000714:	f107 0320 	add.w	r3, r7, #32
 8000718:	4619      	mov	r1, r3
 800071a:	483c      	ldr	r0, [pc, #240]	; (800080c <HAL_UART_MspInit+0x170>)
 800071c:	f000 faf2 	bl	8000d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000720:	e06c      	b.n	80007fc <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a3a      	ldr	r2, [pc, #232]	; (8000810 <HAL_UART_MspInit+0x174>)
 8000728:	4293      	cmp	r3, r2
 800072a:	d130      	bne.n	800078e <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800072c:	4b36      	ldr	r3, [pc, #216]	; (8000808 <HAL_UART_MspInit+0x16c>)
 800072e:	69db      	ldr	r3, [r3, #28]
 8000730:	4a35      	ldr	r2, [pc, #212]	; (8000808 <HAL_UART_MspInit+0x16c>)
 8000732:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000736:	61d3      	str	r3, [r2, #28]
 8000738:	4b33      	ldr	r3, [pc, #204]	; (8000808 <HAL_UART_MspInit+0x16c>)
 800073a:	69db      	ldr	r3, [r3, #28]
 800073c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000740:	617b      	str	r3, [r7, #20]
 8000742:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000744:	4b30      	ldr	r3, [pc, #192]	; (8000808 <HAL_UART_MspInit+0x16c>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a2f      	ldr	r2, [pc, #188]	; (8000808 <HAL_UART_MspInit+0x16c>)
 800074a:	f043 0304 	orr.w	r3, r3, #4
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b2d      	ldr	r3, [pc, #180]	; (8000808 <HAL_UART_MspInit+0x16c>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0304 	and.w	r3, r3, #4
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800075c:	2304      	movs	r3, #4
 800075e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000764:	2303      	movs	r3, #3
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 0320 	add.w	r3, r7, #32
 800076c:	4619      	mov	r1, r3
 800076e:	4827      	ldr	r0, [pc, #156]	; (800080c <HAL_UART_MspInit+0x170>)
 8000770:	f000 fac8 	bl	8000d04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000774:	2308      	movs	r3, #8
 8000776:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000780:	f107 0320 	add.w	r3, r7, #32
 8000784:	4619      	mov	r1, r3
 8000786:	4821      	ldr	r0, [pc, #132]	; (800080c <HAL_UART_MspInit+0x170>)
 8000788:	f000 fabc 	bl	8000d04 <HAL_GPIO_Init>
}
 800078c:	e036      	b.n	80007fc <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a20      	ldr	r2, [pc, #128]	; (8000814 <HAL_UART_MspInit+0x178>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d131      	bne.n	80007fc <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <HAL_UART_MspInit+0x16c>)
 800079a:	69db      	ldr	r3, [r3, #28]
 800079c:	4a1a      	ldr	r2, [pc, #104]	; (8000808 <HAL_UART_MspInit+0x16c>)
 800079e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007a2:	61d3      	str	r3, [r2, #28]
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <HAL_UART_MspInit+0x16c>)
 80007a6:	69db      	ldr	r3, [r3, #28]
 80007a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <HAL_UART_MspInit+0x16c>)
 80007b2:	699b      	ldr	r3, [r3, #24]
 80007b4:	4a14      	ldr	r2, [pc, #80]	; (8000808 <HAL_UART_MspInit+0x16c>)
 80007b6:	f043 0308 	orr.w	r3, r3, #8
 80007ba:	6193      	str	r3, [r2, #24]
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_UART_MspInit+0x16c>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f003 0308 	and.w	r3, r3, #8
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ce:	2302      	movs	r3, #2
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	4619      	mov	r1, r3
 80007dc:	480e      	ldr	r0, [pc, #56]	; (8000818 <HAL_UART_MspInit+0x17c>)
 80007de:	f000 fa91 	bl	8000d04 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80007e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	4619      	mov	r1, r3
 80007f6:	4808      	ldr	r0, [pc, #32]	; (8000818 <HAL_UART_MspInit+0x17c>)
 80007f8:	f000 fa84 	bl	8000d04 <HAL_GPIO_Init>
}
 80007fc:	bf00      	nop
 80007fe:	3730      	adds	r7, #48	; 0x30
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40013800 	.word	0x40013800
 8000808:	40021000 	.word	0x40021000
 800080c:	40010800 	.word	0x40010800
 8000810:	40004400 	.word	0x40004400
 8000814:	40004800 	.word	0x40004800
 8000818:	40010c00 	.word	0x40010c00

0800081c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08c      	sub	sp, #48	; 0x30
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800082c:	2200      	movs	r2, #0
 800082e:	6879      	ldr	r1, [r7, #4]
 8000830:	2019      	movs	r0, #25
 8000832:	f000 fa3c 	bl	8000cae <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000836:	2019      	movs	r0, #25
 8000838:	f000 fa55 	bl	8000ce6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <HAL_InitTick+0x9c>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a1d      	ldr	r2, [pc, #116]	; (80008b8 <HAL_InitTick+0x9c>)
 8000842:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <HAL_InitTick+0x9c>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000854:	f107 0210 	add.w	r2, r7, #16
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f001 f802 	bl	8001868 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000864:	f000 ffec 	bl	8001840 <HAL_RCC_GetPCLK2Freq>
 8000868:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800086a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800086c:	4a13      	ldr	r2, [pc, #76]	; (80008bc <HAL_InitTick+0xa0>)
 800086e:	fba2 2303 	umull	r2, r3, r2, r3
 8000872:	0c9b      	lsrs	r3, r3, #18
 8000874:	3b01      	subs	r3, #1
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <HAL_InitTick+0xa4>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <HAL_InitTick+0xa8>)
 800087c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <HAL_InitTick+0xa4>)
 8000880:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000884:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <HAL_InitTick+0xa4>)
 8000888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800088a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800088c:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <HAL_InitTick+0xa4>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000892:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <HAL_InitTick+0xa4>)
 8000894:	2200      	movs	r2, #0
 8000896:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <HAL_InitTick+0xa4>)
 800089a:	f001 f833 	bl	8001904 <HAL_TIM_Base_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d104      	bne.n	80008ae <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80008a4:	4806      	ldr	r0, [pc, #24]	; (80008c0 <HAL_InitTick+0xa4>)
 80008a6:	f001 f885 	bl	80019b4 <HAL_TIM_Base_Start_IT>
 80008aa:	4603      	mov	r3, r0
 80008ac:	e000      	b.n	80008b0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3730      	adds	r7, #48	; 0x30
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40021000 	.word	0x40021000
 80008bc:	431bde83 	.word	0x431bde83
 80008c0:	20001234 	.word	0x20001234
 80008c4:	40012c00 	.word	0x40012c00

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <NMI_Handler+0x4>

080008ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <MemManage_Handler+0x4>

080008da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
	...

080008f4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008f8:	4802      	ldr	r0, [pc, #8]	; (8000904 <TIM1_UP_IRQHandler+0x10>)
 80008fa:	f001 f8ad 	bl	8001a58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20001234 	.word	0x20001234

08000908 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
	return 1;
 800090c:	2301      	movs	r3, #1
}
 800090e:	4618      	mov	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <_kill>:

int _kill(int pid, int sig)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	b082      	sub	sp, #8
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
 800091e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000920:	f002 fdce 	bl	80034c0 <__errno>
 8000924:	4603      	mov	r3, r0
 8000926:	2216      	movs	r2, #22
 8000928:	601a      	str	r2, [r3, #0]
	return -1;
 800092a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800092e:	4618      	mov	r0, r3
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <_exit>:

void _exit (int status)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800093e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff ffe7 	bl	8000916 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000948:	e7fe      	b.n	8000948 <_exit+0x12>

0800094a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b086      	sub	sp, #24
 800094e:	af00      	add	r7, sp, #0
 8000950:	60f8      	str	r0, [r7, #12]
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	e00a      	b.n	8000972 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800095c:	f3af 8000 	nop.w
 8000960:	4601      	mov	r1, r0
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	1c5a      	adds	r2, r3, #1
 8000966:	60ba      	str	r2, [r7, #8]
 8000968:	b2ca      	uxtb	r2, r1
 800096a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3301      	adds	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	697a      	ldr	r2, [r7, #20]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	429a      	cmp	r2, r3
 8000978:	dbf0      	blt.n	800095c <_read+0x12>
	}

return len;
 800097a:	687b      	ldr	r3, [r7, #4]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	e009      	b.n	80009aa <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	1c5a      	adds	r2, r3, #1
 800099a:	60ba      	str	r2, [r7, #8]
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	3301      	adds	r3, #1
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	697a      	ldr	r2, [r7, #20]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	dbf1      	blt.n	8000996 <_write+0x12>
	}
	return len;
 80009b2:	687b      	ldr	r3, [r7, #4]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3718      	adds	r7, #24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <_close>:

int _close(int file)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	return -1;
 80009c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr

080009d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009d2:	b480      	push	{r7}
 80009d4:	b083      	sub	sp, #12
 80009d6:	af00      	add	r7, sp, #0
 80009d8:	6078      	str	r0, [r7, #4]
 80009da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009e2:	605a      	str	r2, [r3, #4]
	return 0;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <_isatty>:

int _isatty(int file)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	return 1;
 80009f8:	2301      	movs	r3, #1
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	60f8      	str	r0, [r7, #12]
 8000a0c:	60b9      	str	r1, [r7, #8]
 8000a0e:	607a      	str	r2, [r7, #4]
	return 0;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bc80      	pop	{r7}
 8000a1a:	4770      	bx	lr

08000a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b086      	sub	sp, #24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a24:	4a14      	ldr	r2, [pc, #80]	; (8000a78 <_sbrk+0x5c>)
 8000a26:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <_sbrk+0x60>)
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <_sbrk+0x64>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d102      	bne.n	8000a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <_sbrk+0x64>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <_sbrk+0x68>)
 8000a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <_sbrk+0x64>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4413      	add	r3, r2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d207      	bcs.n	8000a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a4c:	f002 fd38 	bl	80034c0 <__errno>
 8000a50:	4603      	mov	r3, r0
 8000a52:	220c      	movs	r2, #12
 8000a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a5a:	e009      	b.n	8000a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a5c:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <_sbrk+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <_sbrk+0x64>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4413      	add	r3, r2
 8000a6a:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <_sbrk+0x64>)
 8000a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20005000 	.word	0x20005000
 8000a7c:	00000400 	.word	0x00000400
 8000a80:	200002ec 	.word	0x200002ec
 8000a84:	20001290 	.word	0x20001290

08000a88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a94:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a96:	e003      	b.n	8000aa0 <LoopCopyDataInit>

08000a98 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a98:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a9a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a9c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a9e:	3104      	adds	r1, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000aa0:	480a      	ldr	r0, [pc, #40]	; (8000acc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000aa4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000aa6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000aa8:	d3f6      	bcc.n	8000a98 <CopyDataInit>
  ldr r2, =_sbss
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	; (8000ad4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000aac:	e002      	b.n	8000ab4 <LoopFillZerobss>

08000aae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ab0:	f842 3b04 	str.w	r3, [r2], #4

08000ab4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ab6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ab8:	d3f9      	bcc.n	8000aae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000aba:	f7ff ffe5 	bl	8000a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000abe:	f002 fd05 	bl	80034cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ac2:	f7ff fb7b 	bl	80001bc <main>
  bx lr
 8000ac6:	4770      	bx	lr
  ldr r3, =_sidata
 8000ac8:	08004bc8 	.word	0x08004bc8
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ad0:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 8000ad4:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 8000ad8:	20001290 	.word	0x20001290

08000adc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC1_2_IRQHandler>
	...

08000ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_Init+0x28>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <HAL_Init+0x28>)
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f8d1 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f7ff fe90 	bl	800081c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f7ff fd96 	bl	800062c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40022000 	.word	0x40022000

08000b0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b10:	4b05      	ldr	r3, [pc, #20]	; (8000b28 <HAL_IncTick+0x1c>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <HAL_IncTick+0x20>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4a03      	ldr	r2, [pc, #12]	; (8000b2c <HAL_IncTick+0x20>)
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	20000010 	.word	0x20000010
 8000b2c:	2000127c 	.word	0x2000127c

08000b30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return uwTick;
 8000b34:	4b02      	ldr	r3, [pc, #8]	; (8000b40 <HAL_GetTick+0x10>)
 8000b36:	681b      	ldr	r3, [r3, #0]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	2000127c 	.word	0x2000127c

08000b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b54:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b60:	4013      	ands	r3, r2
 8000b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <__NVIC_SetPriorityGrouping+0x44>)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	60d3      	str	r3, [r2, #12]
}
 8000b7c:	bf00      	nop
 8000b7e:	3714      	adds	r7, #20
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	0a1b      	lsrs	r3, r3, #8
 8000b96:	f003 0307 	and.w	r3, r3, #7
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	db0b      	blt.n	8000bd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bba:	79fb      	ldrb	r3, [r7, #7]
 8000bbc:	f003 021f 	and.w	r2, r3, #31
 8000bc0:	4906      	ldr	r1, [pc, #24]	; (8000bdc <__NVIC_EnableIRQ+0x34>)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	095b      	lsrs	r3, r3, #5
 8000bc8:	2001      	movs	r0, #1
 8000bca:	fa00 f202 	lsl.w	r2, r0, r2
 8000bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr
 8000bdc:	e000e100 	.word	0xe000e100

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0a      	blt.n	8000c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	; (8000c2c <__NVIC_SetPriority+0x4c>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c08:	e00a      	b.n	8000c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4908      	ldr	r1, [pc, #32]	; (8000c30 <__NVIC_SetPriority+0x50>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	3b04      	subs	r3, #4
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	761a      	strb	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	; 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
         );
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	; 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff4f 	bl	8000b44 <__NVIC_SetPriorityGrouping>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc0:	f7ff ff64 	bl	8000b8c <__NVIC_GetPriorityGrouping>
 8000cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	f7ff ffb2 	bl	8000c34 <NVIC_EncodePriority>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff81 	bl	8000be0 <__NVIC_SetPriority>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f7ff ff57 	bl	8000ba8 <__NVIC_EnableIRQ>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b08b      	sub	sp, #44	; 0x2c
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d16:	e169      	b.n	8000fec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	69fa      	ldr	r2, [r7, #28]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f040 8158 	bne.w	8000fe6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	4a9a      	ldr	r2, [pc, #616]	; (8000fa4 <HAL_GPIO_Init+0x2a0>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d05e      	beq.n	8000dfe <HAL_GPIO_Init+0xfa>
 8000d40:	4a98      	ldr	r2, [pc, #608]	; (8000fa4 <HAL_GPIO_Init+0x2a0>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d875      	bhi.n	8000e32 <HAL_GPIO_Init+0x12e>
 8000d46:	4a98      	ldr	r2, [pc, #608]	; (8000fa8 <HAL_GPIO_Init+0x2a4>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d058      	beq.n	8000dfe <HAL_GPIO_Init+0xfa>
 8000d4c:	4a96      	ldr	r2, [pc, #600]	; (8000fa8 <HAL_GPIO_Init+0x2a4>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d86f      	bhi.n	8000e32 <HAL_GPIO_Init+0x12e>
 8000d52:	4a96      	ldr	r2, [pc, #600]	; (8000fac <HAL_GPIO_Init+0x2a8>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d052      	beq.n	8000dfe <HAL_GPIO_Init+0xfa>
 8000d58:	4a94      	ldr	r2, [pc, #592]	; (8000fac <HAL_GPIO_Init+0x2a8>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d869      	bhi.n	8000e32 <HAL_GPIO_Init+0x12e>
 8000d5e:	4a94      	ldr	r2, [pc, #592]	; (8000fb0 <HAL_GPIO_Init+0x2ac>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d04c      	beq.n	8000dfe <HAL_GPIO_Init+0xfa>
 8000d64:	4a92      	ldr	r2, [pc, #584]	; (8000fb0 <HAL_GPIO_Init+0x2ac>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d863      	bhi.n	8000e32 <HAL_GPIO_Init+0x12e>
 8000d6a:	4a92      	ldr	r2, [pc, #584]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d046      	beq.n	8000dfe <HAL_GPIO_Init+0xfa>
 8000d70:	4a90      	ldr	r2, [pc, #576]	; (8000fb4 <HAL_GPIO_Init+0x2b0>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d85d      	bhi.n	8000e32 <HAL_GPIO_Init+0x12e>
 8000d76:	2b12      	cmp	r3, #18
 8000d78:	d82a      	bhi.n	8000dd0 <HAL_GPIO_Init+0xcc>
 8000d7a:	2b12      	cmp	r3, #18
 8000d7c:	d859      	bhi.n	8000e32 <HAL_GPIO_Init+0x12e>
 8000d7e:	a201      	add	r2, pc, #4	; (adr r2, 8000d84 <HAL_GPIO_Init+0x80>)
 8000d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d84:	08000dff 	.word	0x08000dff
 8000d88:	08000dd9 	.word	0x08000dd9
 8000d8c:	08000deb 	.word	0x08000deb
 8000d90:	08000e2d 	.word	0x08000e2d
 8000d94:	08000e33 	.word	0x08000e33
 8000d98:	08000e33 	.word	0x08000e33
 8000d9c:	08000e33 	.word	0x08000e33
 8000da0:	08000e33 	.word	0x08000e33
 8000da4:	08000e33 	.word	0x08000e33
 8000da8:	08000e33 	.word	0x08000e33
 8000dac:	08000e33 	.word	0x08000e33
 8000db0:	08000e33 	.word	0x08000e33
 8000db4:	08000e33 	.word	0x08000e33
 8000db8:	08000e33 	.word	0x08000e33
 8000dbc:	08000e33 	.word	0x08000e33
 8000dc0:	08000e33 	.word	0x08000e33
 8000dc4:	08000e33 	.word	0x08000e33
 8000dc8:	08000de1 	.word	0x08000de1
 8000dcc:	08000df5 	.word	0x08000df5
 8000dd0:	4a79      	ldr	r2, [pc, #484]	; (8000fb8 <HAL_GPIO_Init+0x2b4>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d013      	beq.n	8000dfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000dd6:	e02c      	b.n	8000e32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	623b      	str	r3, [r7, #32]
          break;
 8000dde:	e029      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	3304      	adds	r3, #4
 8000de6:	623b      	str	r3, [r7, #32]
          break;
 8000de8:	e024      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	3308      	adds	r3, #8
 8000df0:	623b      	str	r3, [r7, #32]
          break;
 8000df2:	e01f      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	330c      	adds	r3, #12
 8000dfa:	623b      	str	r3, [r7, #32]
          break;
 8000dfc:	e01a      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d102      	bne.n	8000e0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e06:	2304      	movs	r3, #4
 8000e08:	623b      	str	r3, [r7, #32]
          break;
 8000e0a:	e013      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d105      	bne.n	8000e20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e14:	2308      	movs	r3, #8
 8000e16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	69fa      	ldr	r2, [r7, #28]
 8000e1c:	611a      	str	r2, [r3, #16]
          break;
 8000e1e:	e009      	b.n	8000e34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e20:	2308      	movs	r3, #8
 8000e22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	69fa      	ldr	r2, [r7, #28]
 8000e28:	615a      	str	r2, [r3, #20]
          break;
 8000e2a:	e003      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
          break;
 8000e30:	e000      	b.n	8000e34 <HAL_GPIO_Init+0x130>
          break;
 8000e32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	2bff      	cmp	r3, #255	; 0xff
 8000e38:	d801      	bhi.n	8000e3e <HAL_GPIO_Init+0x13a>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	e001      	b.n	8000e42 <HAL_GPIO_Init+0x13e>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3304      	adds	r3, #4
 8000e42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	2bff      	cmp	r3, #255	; 0xff
 8000e48:	d802      	bhi.n	8000e50 <HAL_GPIO_Init+0x14c>
 8000e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	e002      	b.n	8000e56 <HAL_GPIO_Init+0x152>
 8000e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e52:	3b08      	subs	r3, #8
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	210f      	movs	r1, #15
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	fa01 f303 	lsl.w	r3, r1, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	401a      	ands	r2, r3
 8000e68:	6a39      	ldr	r1, [r7, #32]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	431a      	orrs	r2, r3
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e84:	4b4d      	ldr	r3, [pc, #308]	; (8000fbc <HAL_GPIO_Init+0x2b8>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a4c      	ldr	r2, [pc, #304]	; (8000fbc <HAL_GPIO_Init+0x2b8>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b4a      	ldr	r3, [pc, #296]	; (8000fbc <HAL_GPIO_Init+0x2b8>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e9c:	4a48      	ldr	r2, [pc, #288]	; (8000fc0 <HAL_GPIO_Init+0x2bc>)
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	089b      	lsrs	r3, r3, #2
 8000ea2:	3302      	adds	r3, #2
 8000ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a40      	ldr	r2, [pc, #256]	; (8000fc4 <HAL_GPIO_Init+0x2c0>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d013      	beq.n	8000ef0 <HAL_GPIO_Init+0x1ec>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a3f      	ldr	r2, [pc, #252]	; (8000fc8 <HAL_GPIO_Init+0x2c4>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d00d      	beq.n	8000eec <HAL_GPIO_Init+0x1e8>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a3e      	ldr	r2, [pc, #248]	; (8000fcc <HAL_GPIO_Init+0x2c8>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d007      	beq.n	8000ee8 <HAL_GPIO_Init+0x1e4>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a3d      	ldr	r2, [pc, #244]	; (8000fd0 <HAL_GPIO_Init+0x2cc>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d101      	bne.n	8000ee4 <HAL_GPIO_Init+0x1e0>
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e006      	b.n	8000ef2 <HAL_GPIO_Init+0x1ee>
 8000ee4:	2304      	movs	r3, #4
 8000ee6:	e004      	b.n	8000ef2 <HAL_GPIO_Init+0x1ee>
 8000ee8:	2302      	movs	r3, #2
 8000eea:	e002      	b.n	8000ef2 <HAL_GPIO_Init+0x1ee>
 8000eec:	2301      	movs	r3, #1
 8000eee:	e000      	b.n	8000ef2 <HAL_GPIO_Init+0x1ee>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ef4:	f002 0203 	and.w	r2, r2, #3
 8000ef8:	0092      	lsls	r2, r2, #2
 8000efa:	4093      	lsls	r3, r2
 8000efc:	68fa      	ldr	r2, [r7, #12]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f02:	492f      	ldr	r1, [pc, #188]	; (8000fc0 <HAL_GPIO_Init+0x2bc>)
 8000f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	3302      	adds	r3, #2
 8000f0a:	68fa      	ldr	r2, [r7, #12]
 8000f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d006      	beq.n	8000f2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f1c:	4b2d      	ldr	r3, [pc, #180]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	492c      	ldr	r1, [pc, #176]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f22:	69bb      	ldr	r3, [r7, #24]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	600b      	str	r3, [r1, #0]
 8000f28:	e006      	b.n	8000f38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	4928      	ldr	r1, [pc, #160]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d006      	beq.n	8000f52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f44:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	4922      	ldr	r1, [pc, #136]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	604b      	str	r3, [r1, #4]
 8000f50:	e006      	b.n	8000f60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f52:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	491e      	ldr	r1, [pc, #120]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d006      	beq.n	8000f7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f6c:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	4918      	ldr	r1, [pc, #96]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	608b      	str	r3, [r1, #8]
 8000f78:	e006      	b.n	8000f88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f7c:	689a      	ldr	r2, [r3, #8]
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	4914      	ldr	r1, [pc, #80]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f84:	4013      	ands	r3, r2
 8000f86:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d021      	beq.n	8000fd8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f94:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f96:	68da      	ldr	r2, [r3, #12]
 8000f98:	490e      	ldr	r1, [pc, #56]	; (8000fd4 <HAL_GPIO_Init+0x2d0>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	60cb      	str	r3, [r1, #12]
 8000fa0:	e021      	b.n	8000fe6 <HAL_GPIO_Init+0x2e2>
 8000fa2:	bf00      	nop
 8000fa4:	10320000 	.word	0x10320000
 8000fa8:	10310000 	.word	0x10310000
 8000fac:	10220000 	.word	0x10220000
 8000fb0:	10210000 	.word	0x10210000
 8000fb4:	10120000 	.word	0x10120000
 8000fb8:	10110000 	.word	0x10110000
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010000 	.word	0x40010000
 8000fc4:	40010800 	.word	0x40010800
 8000fc8:	40010c00 	.word	0x40010c00
 8000fcc:	40011000 	.word	0x40011000
 8000fd0:	40011400 	.word	0x40011400
 8000fd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_GPIO_Init+0x304>)
 8000fda:	68da      	ldr	r2, [r3, #12]
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	4909      	ldr	r1, [pc, #36]	; (8001008 <HAL_GPIO_Init+0x304>)
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe8:	3301      	adds	r3, #1
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f47f ae8e 	bne.w	8000d18 <HAL_GPIO_Init+0x14>
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	372c      	adds	r7, #44	; 0x2c
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	40010400 	.word	0x40010400

0800100c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	807b      	strh	r3, [r7, #2]
 8001018:	4613      	mov	r3, r2
 800101a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800101c:	787b      	ldrb	r3, [r7, #1]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001022:	887a      	ldrh	r2, [r7, #2]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001028:	e003      	b.n	8001032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800102a:	887b      	ldrh	r3, [r7, #2]
 800102c:	041a      	lsls	r2, r3, #16
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	611a      	str	r2, [r3, #16]
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4013      	ands	r3, r2
 8001054:	041a      	lsls	r2, r3, #16
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	43d9      	mvns	r1, r3
 800105a:	887b      	ldrh	r3, [r7, #2]
 800105c:	400b      	ands	r3, r1
 800105e:	431a      	orrs	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	611a      	str	r2, [r3, #16]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr
	...

08001070 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e26c      	b.n	800155c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 8087 	beq.w	800119e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001090:	4b92      	ldr	r3, [pc, #584]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 030c 	and.w	r3, r3, #12
 8001098:	2b04      	cmp	r3, #4
 800109a:	d00c      	beq.n	80010b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800109c:	4b8f      	ldr	r3, [pc, #572]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 030c 	and.w	r3, r3, #12
 80010a4:	2b08      	cmp	r3, #8
 80010a6:	d112      	bne.n	80010ce <HAL_RCC_OscConfig+0x5e>
 80010a8:	4b8c      	ldr	r3, [pc, #560]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b4:	d10b      	bne.n	80010ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b6:	4b89      	ldr	r3, [pc, #548]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d06c      	beq.n	800119c <HAL_RCC_OscConfig+0x12c>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d168      	bne.n	800119c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e246      	b.n	800155c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d6:	d106      	bne.n	80010e6 <HAL_RCC_OscConfig+0x76>
 80010d8:	4b80      	ldr	r3, [pc, #512]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a7f      	ldr	r2, [pc, #508]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 80010de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	e02e      	b.n	8001144 <HAL_RCC_OscConfig+0xd4>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10c      	bne.n	8001108 <HAL_RCC_OscConfig+0x98>
 80010ee:	4b7b      	ldr	r3, [pc, #492]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a7a      	ldr	r2, [pc, #488]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 80010f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b78      	ldr	r3, [pc, #480]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a77      	ldr	r2, [pc, #476]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e01d      	b.n	8001144 <HAL_RCC_OscConfig+0xd4>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001110:	d10c      	bne.n	800112c <HAL_RCC_OscConfig+0xbc>
 8001112:	4b72      	ldr	r3, [pc, #456]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a71      	ldr	r2, [pc, #452]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001118:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	4b6f      	ldr	r3, [pc, #444]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a6e      	ldr	r2, [pc, #440]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001128:	6013      	str	r3, [r2, #0]
 800112a:	e00b      	b.n	8001144 <HAL_RCC_OscConfig+0xd4>
 800112c:	4b6b      	ldr	r3, [pc, #428]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a6a      	ldr	r2, [pc, #424]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b68      	ldr	r3, [pc, #416]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a67      	ldr	r2, [pc, #412]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 800113e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001142:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d013      	beq.n	8001174 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fcf0 	bl	8000b30 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fcec 	bl	8000b30 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	; 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e1fa      	b.n	800155c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001166:	4b5d      	ldr	r3, [pc, #372]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f0      	beq.n	8001154 <HAL_RCC_OscConfig+0xe4>
 8001172:	e014      	b.n	800119e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff fcdc 	bl	8000b30 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800117c:	f7ff fcd8 	bl	8000b30 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b64      	cmp	r3, #100	; 0x64
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e1e6      	b.n	800155c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800118e:	4b53      	ldr	r3, [pc, #332]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f0      	bne.n	800117c <HAL_RCC_OscConfig+0x10c>
 800119a:	e000      	b.n	800119e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d063      	beq.n	8001272 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011aa:	4b4c      	ldr	r3, [pc, #304]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d00b      	beq.n	80011ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011b6:	4b49      	ldr	r3, [pc, #292]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 030c 	and.w	r3, r3, #12
 80011be:	2b08      	cmp	r3, #8
 80011c0:	d11c      	bne.n	80011fc <HAL_RCC_OscConfig+0x18c>
 80011c2:	4b46      	ldr	r3, [pc, #280]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d116      	bne.n	80011fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ce:	4b43      	ldr	r3, [pc, #268]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d005      	beq.n	80011e6 <HAL_RCC_OscConfig+0x176>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	691b      	ldr	r3, [r3, #16]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d001      	beq.n	80011e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e1ba      	b.n	800155c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011e6:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	695b      	ldr	r3, [r3, #20]
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4939      	ldr	r1, [pc, #228]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fa:	e03a      	b.n	8001272 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d020      	beq.n	8001246 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001204:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <HAL_RCC_OscConfig+0x270>)
 8001206:	2201      	movs	r2, #1
 8001208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120a:	f7ff fc91 	bl	8000b30 <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001212:	f7ff fc8d 	bl	8000b30 <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e19b      	b.n	800155c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001224:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f0      	beq.n	8001212 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001230:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	4927      	ldr	r1, [pc, #156]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001240:	4313      	orrs	r3, r2
 8001242:	600b      	str	r3, [r1, #0]
 8001244:	e015      	b.n	8001272 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001246:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <HAL_RCC_OscConfig+0x270>)
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fc70 	bl	8000b30 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001254:	f7ff fc6c 	bl	8000b30 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e17a      	b.n	800155c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	2b00      	cmp	r3, #0
 800127c:	d03a      	beq.n	80012f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	699b      	ldr	r3, [r3, #24]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d019      	beq.n	80012ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <HAL_RCC_OscConfig+0x274>)
 8001288:	2201      	movs	r2, #1
 800128a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800128c:	f7ff fc50 	bl	8000b30 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001294:	f7ff fc4c 	bl	8000b30 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e15a      	b.n	800155c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012a6:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <HAL_RCC_OscConfig+0x26c>)
 80012a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012b2:	2001      	movs	r0, #1
 80012b4:	f000 fb08 	bl	80018c8 <RCC_Delay>
 80012b8:	e01c      	b.n	80012f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ba:	4b0a      	ldr	r3, [pc, #40]	; (80012e4 <HAL_RCC_OscConfig+0x274>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012c0:	f7ff fc36 	bl	8000b30 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c6:	e00f      	b.n	80012e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c8:	f7ff fc32 	bl	8000b30 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d908      	bls.n	80012e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e140      	b.n	800155c <HAL_RCC_OscConfig+0x4ec>
 80012da:	bf00      	nop
 80012dc:	40021000 	.word	0x40021000
 80012e0:	42420000 	.word	0x42420000
 80012e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012e8:	4b9e      	ldr	r3, [pc, #632]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 80012ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d1e9      	bne.n	80012c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 80a6 	beq.w	800144e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001306:	4b97      	ldr	r3, [pc, #604]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10d      	bne.n	800132e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	4b94      	ldr	r3, [pc, #592]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	4a93      	ldr	r2, [pc, #588]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 8001318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800131c:	61d3      	str	r3, [r2, #28]
 800131e:	4b91      	ldr	r3, [pc, #580]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800132a:	2301      	movs	r3, #1
 800132c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132e:	4b8e      	ldr	r3, [pc, #568]	; (8001568 <HAL_RCC_OscConfig+0x4f8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001336:	2b00      	cmp	r3, #0
 8001338:	d118      	bne.n	800136c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800133a:	4b8b      	ldr	r3, [pc, #556]	; (8001568 <HAL_RCC_OscConfig+0x4f8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a8a      	ldr	r2, [pc, #552]	; (8001568 <HAL_RCC_OscConfig+0x4f8>)
 8001340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001346:	f7ff fbf3 	bl	8000b30 <HAL_GetTick>
 800134a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800134e:	f7ff fbef 	bl	8000b30 <HAL_GetTick>
 8001352:	4602      	mov	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b64      	cmp	r3, #100	; 0x64
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e0fd      	b.n	800155c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001360:	4b81      	ldr	r3, [pc, #516]	; (8001568 <HAL_RCC_OscConfig+0x4f8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0f0      	beq.n	800134e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d106      	bne.n	8001382 <HAL_RCC_OscConfig+0x312>
 8001374:	4b7b      	ldr	r3, [pc, #492]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4a7a      	ldr	r2, [pc, #488]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	6213      	str	r3, [r2, #32]
 8001380:	e02d      	b.n	80013de <HAL_RCC_OscConfig+0x36e>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10c      	bne.n	80013a4 <HAL_RCC_OscConfig+0x334>
 800138a:	4b76      	ldr	r3, [pc, #472]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	4a75      	ldr	r2, [pc, #468]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 8001390:	f023 0301 	bic.w	r3, r3, #1
 8001394:	6213      	str	r3, [r2, #32]
 8001396:	4b73      	ldr	r3, [pc, #460]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 8001398:	6a1b      	ldr	r3, [r3, #32]
 800139a:	4a72      	ldr	r2, [pc, #456]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 800139c:	f023 0304 	bic.w	r3, r3, #4
 80013a0:	6213      	str	r3, [r2, #32]
 80013a2:	e01c      	b.n	80013de <HAL_RCC_OscConfig+0x36e>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	2b05      	cmp	r3, #5
 80013aa:	d10c      	bne.n	80013c6 <HAL_RCC_OscConfig+0x356>
 80013ac:	4b6d      	ldr	r3, [pc, #436]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	4a6c      	ldr	r2, [pc, #432]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	6213      	str	r3, [r2, #32]
 80013b8:	4b6a      	ldr	r3, [pc, #424]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	4a69      	ldr	r2, [pc, #420]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6213      	str	r3, [r2, #32]
 80013c4:	e00b      	b.n	80013de <HAL_RCC_OscConfig+0x36e>
 80013c6:	4b67      	ldr	r3, [pc, #412]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	4a66      	ldr	r2, [pc, #408]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 80013cc:	f023 0301 	bic.w	r3, r3, #1
 80013d0:	6213      	str	r3, [r2, #32]
 80013d2:	4b64      	ldr	r3, [pc, #400]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	4a63      	ldr	r2, [pc, #396]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 80013d8:	f023 0304 	bic.w	r3, r3, #4
 80013dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d015      	beq.n	8001412 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e6:	f7ff fba3 	bl	8000b30 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f7ff fb9f 	bl	8000b30 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e0ab      	b.n	800155c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001404:	4b57      	ldr	r3, [pc, #348]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d0ee      	beq.n	80013ee <HAL_RCC_OscConfig+0x37e>
 8001410:	e014      	b.n	800143c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001412:	f7ff fb8d 	bl	8000b30 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001418:	e00a      	b.n	8001430 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141a:	f7ff fb89 	bl	8000b30 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f241 3288 	movw	r2, #5000	; 0x1388
 8001428:	4293      	cmp	r3, r2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e095      	b.n	800155c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001430:	4b4c      	ldr	r3, [pc, #304]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1ee      	bne.n	800141a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800143c:	7dfb      	ldrb	r3, [r7, #23]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d105      	bne.n	800144e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001442:	4b48      	ldr	r3, [pc, #288]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 8001444:	69db      	ldr	r3, [r3, #28]
 8001446:	4a47      	ldr	r2, [pc, #284]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 8001448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800144c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 8081 	beq.w	800155a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001458:	4b42      	ldr	r3, [pc, #264]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f003 030c 	and.w	r3, r3, #12
 8001460:	2b08      	cmp	r3, #8
 8001462:	d061      	beq.n	8001528 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d146      	bne.n	80014fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146c:	4b3f      	ldr	r3, [pc, #252]	; (800156c <HAL_RCC_OscConfig+0x4fc>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001472:	f7ff fb5d 	bl	8000b30 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147a:	f7ff fb59 	bl	8000b30 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e067      	b.n	800155c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148c:	4b35      	ldr	r3, [pc, #212]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f0      	bne.n	800147a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a0:	d108      	bne.n	80014b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014a2:	4b30      	ldr	r3, [pc, #192]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	492d      	ldr	r1, [pc, #180]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014b4:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6a19      	ldr	r1, [r3, #32]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	430b      	orrs	r3, r1
 80014c6:	4927      	ldr	r1, [pc, #156]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014cc:	4b27      	ldr	r3, [pc, #156]	; (800156c <HAL_RCC_OscConfig+0x4fc>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d2:	f7ff fb2d 	bl	8000b30 <HAL_GetTick>
 80014d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014d8:	e008      	b.n	80014ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014da:	f7ff fb29 	bl	8000b30 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d901      	bls.n	80014ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e037      	b.n	800155c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014ec:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d0f0      	beq.n	80014da <HAL_RCC_OscConfig+0x46a>
 80014f8:	e02f      	b.n	800155a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <HAL_RCC_OscConfig+0x4fc>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fb16 	bl	8000b30 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001508:	f7ff fb12 	bl	8000b30 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e020      	b.n	800155c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151a:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x498>
 8001526:	e018      	b.n	800155a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	69db      	ldr	r3, [r3, #28]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e013      	b.n	800155c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001534:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_RCC_OscConfig+0x4f4>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a1b      	ldr	r3, [r3, #32]
 8001544:	429a      	cmp	r2, r3
 8001546:	d106      	bne.n	8001556 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001552:	429a      	cmp	r2, r3
 8001554:	d001      	beq.n	800155a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40021000 	.word	0x40021000
 8001568:	40007000 	.word	0x40007000
 800156c:	42420060 	.word	0x42420060

08001570 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e0d0      	b.n	8001726 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001584:	4b6a      	ldr	r3, [pc, #424]	; (8001730 <HAL_RCC_ClockConfig+0x1c0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d910      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001592:	4b67      	ldr	r3, [pc, #412]	; (8001730 <HAL_RCC_ClockConfig+0x1c0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 0207 	bic.w	r2, r3, #7
 800159a:	4965      	ldr	r1, [pc, #404]	; (8001730 <HAL_RCC_ClockConfig+0x1c0>)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b63      	ldr	r3, [pc, #396]	; (8001730 <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0b8      	b.n	8001726 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d020      	beq.n	8001602 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015cc:	4b59      	ldr	r3, [pc, #356]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	4a58      	ldr	r2, [pc, #352]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80015d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e4:	4b53      	ldr	r3, [pc, #332]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	4a52      	ldr	r2, [pc, #328]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80015ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f0:	4b50      	ldr	r3, [pc, #320]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	494d      	ldr	r1, [pc, #308]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d040      	beq.n	8001690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	4b47      	ldr	r3, [pc, #284]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d115      	bne.n	800164e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e07f      	b.n	8001726 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d107      	bne.n	800163e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162e:	4b41      	ldr	r3, [pc, #260]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d109      	bne.n	800164e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e073      	b.n	8001726 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800163e:	4b3d      	ldr	r3, [pc, #244]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d101      	bne.n	800164e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e06b      	b.n	8001726 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800164e:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f023 0203 	bic.w	r2, r3, #3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	4936      	ldr	r1, [pc, #216]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	4313      	orrs	r3, r2
 800165e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001660:	f7ff fa66 	bl	8000b30 <HAL_GetTick>
 8001664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001666:	e00a      	b.n	800167e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001668:	f7ff fa62 	bl	8000b30 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f241 3288 	movw	r2, #5000	; 0x1388
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e053      	b.n	8001726 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167e:	4b2d      	ldr	r3, [pc, #180]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 020c 	and.w	r2, r3, #12
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	429a      	cmp	r2, r3
 800168e:	d1eb      	bne.n	8001668 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001690:	4b27      	ldr	r3, [pc, #156]	; (8001730 <HAL_RCC_ClockConfig+0x1c0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d210      	bcs.n	80016c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b24      	ldr	r3, [pc, #144]	; (8001730 <HAL_RCC_ClockConfig+0x1c0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f023 0207 	bic.w	r2, r3, #7
 80016a6:	4922      	ldr	r1, [pc, #136]	; (8001730 <HAL_RCC_ClockConfig+0x1c0>)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ae:	4b20      	ldr	r3, [pc, #128]	; (8001730 <HAL_RCC_ClockConfig+0x1c0>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e032      	b.n	8001726 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016cc:	4b19      	ldr	r3, [pc, #100]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4916      	ldr	r1, [pc, #88]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d009      	beq.n	80016fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	490e      	ldr	r1, [pc, #56]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016fe:	f000 f821 	bl	8001744 <HAL_RCC_GetSysClockFreq>
 8001702:	4602      	mov	r2, r0
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <HAL_RCC_ClockConfig+0x1c4>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	490a      	ldr	r1, [pc, #40]	; (8001738 <HAL_RCC_ClockConfig+0x1c8>)
 8001710:	5ccb      	ldrb	r3, [r1, r3]
 8001712:	fa22 f303 	lsr.w	r3, r2, r3
 8001716:	4a09      	ldr	r2, [pc, #36]	; (800173c <HAL_RCC_ClockConfig+0x1cc>)
 8001718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_RCC_ClockConfig+0x1d0>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff f87c 	bl	800081c <HAL_InitTick>

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40022000 	.word	0x40022000
 8001734:	40021000 	.word	0x40021000
 8001738:	08004a5c 	.word	0x08004a5c
 800173c:	20000008 	.word	0x20000008
 8001740:	2000000c 	.word	0x2000000c

08001744 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001744:	b490      	push	{r4, r7}
 8001746:	b08a      	sub	sp, #40	; 0x28
 8001748:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800174a:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800174c:	1d3c      	adds	r4, r7, #4
 800174e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001750:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001754:	f240 2301 	movw	r3, #513	; 0x201
 8001758:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
 800175e:	2300      	movs	r3, #0
 8001760:	61bb      	str	r3, [r7, #24]
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	f003 030c 	and.w	r3, r3, #12
 800177a:	2b04      	cmp	r3, #4
 800177c:	d002      	beq.n	8001784 <HAL_RCC_GetSysClockFreq+0x40>
 800177e:	2b08      	cmp	r3, #8
 8001780:	d003      	beq.n	800178a <HAL_RCC_GetSysClockFreq+0x46>
 8001782:	e02d      	b.n	80017e0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001784:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001786:	623b      	str	r3, [r7, #32]
      break;
 8001788:	e02d      	b.n	80017e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	0c9b      	lsrs	r3, r3, #18
 800178e:	f003 030f 	and.w	r3, r3, #15
 8001792:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001796:	4413      	add	r3, r2
 8001798:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800179c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d013      	beq.n	80017d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017a8:	4b13      	ldr	r3, [pc, #76]	; (80017f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	0c5b      	lsrs	r3, r3, #17
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017b6:	4413      	add	r3, r2
 80017b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80017bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	4a0e      	ldr	r2, [pc, #56]	; (80017fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80017c2:	fb02 f203 	mul.w	r2, r2, r3
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
 80017ce:	e004      	b.n	80017da <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	4a0b      	ldr	r2, [pc, #44]	; (8001800 <HAL_RCC_GetSysClockFreq+0xbc>)
 80017d4:	fb02 f303 	mul.w	r3, r2, r3
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	623b      	str	r3, [r7, #32]
      break;
 80017de:	e002      	b.n	80017e6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80017e2:	623b      	str	r3, [r7, #32]
      break;
 80017e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017e6:	6a3b      	ldr	r3, [r7, #32]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3728      	adds	r7, #40	; 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc90      	pop	{r4, r7}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	08004a44 	.word	0x08004a44
 80017f8:	40021000 	.word	0x40021000
 80017fc:	007a1200 	.word	0x007a1200
 8001800:	003d0900 	.word	0x003d0900

08001804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001808:	4b02      	ldr	r3, [pc, #8]	; (8001814 <HAL_RCC_GetHCLKFreq+0x10>)
 800180a:	681b      	ldr	r3, [r3, #0]
}
 800180c:	4618      	mov	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr
 8001814:	20000008 	.word	0x20000008

08001818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800181c:	f7ff fff2 	bl	8001804 <HAL_RCC_GetHCLKFreq>
 8001820:	4602      	mov	r2, r0
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	4903      	ldr	r1, [pc, #12]	; (800183c <HAL_RCC_GetPCLK1Freq+0x24>)
 800182e:	5ccb      	ldrb	r3, [r1, r3]
 8001830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001834:	4618      	mov	r0, r3
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40021000 	.word	0x40021000
 800183c:	08004a6c 	.word	0x08004a6c

08001840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001844:	f7ff ffde 	bl	8001804 <HAL_RCC_GetHCLKFreq>
 8001848:	4602      	mov	r2, r0
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	0adb      	lsrs	r3, r3, #11
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	4903      	ldr	r1, [pc, #12]	; (8001864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001856:	5ccb      	ldrb	r3, [r1, r3]
 8001858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800185c:	4618      	mov	r0, r3
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40021000 	.word	0x40021000
 8001864:	08004a6c 	.word	0x08004a6c

08001868 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	220f      	movs	r2, #15
 8001876:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <HAL_RCC_GetClockConfig+0x58>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0203 	and.w	r2, r3, #3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_RCC_GetClockConfig+0x58>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_RCC_GetClockConfig+0x58>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_RCC_GetClockConfig+0x58>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	08db      	lsrs	r3, r3, #3
 80018a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_RCC_GetClockConfig+0x5c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0207 	and.w	r2, r3, #7
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40022000 	.word	0x40022000

080018c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <RCC_Delay+0x34>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <RCC_Delay+0x38>)
 80018d6:	fba2 2303 	umull	r2, r3, r2, r3
 80018da:	0a5b      	lsrs	r3, r3, #9
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	fb02 f303 	mul.w	r3, r2, r3
 80018e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018e4:	bf00      	nop
  }
  while (Delay --);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	1e5a      	subs	r2, r3, #1
 80018ea:	60fa      	str	r2, [r7, #12]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1f9      	bne.n	80018e4 <RCC_Delay+0x1c>
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	20000008 	.word	0x20000008
 8001900:	10624dd3 	.word	0x10624dd3

08001904 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e041      	b.n	800199a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	d106      	bne.n	8001930 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f000 f839 	bl	80019a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	3304      	adds	r3, #4
 8001940:	4619      	mov	r1, r3
 8001942:	4610      	mov	r0, r2
 8001944:	f000 f9b4 	bl	8001cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d001      	beq.n	80019cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e03a      	b.n	8001a42 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2202      	movs	r2, #2
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0201 	orr.w	r2, r2, #1
 80019e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a18      	ldr	r2, [pc, #96]	; (8001a4c <HAL_TIM_Base_Start_IT+0x98>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d00e      	beq.n	8001a0c <HAL_TIM_Base_Start_IT+0x58>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f6:	d009      	beq.n	8001a0c <HAL_TIM_Base_Start_IT+0x58>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <HAL_TIM_Base_Start_IT+0x9c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d004      	beq.n	8001a0c <HAL_TIM_Base_Start_IT+0x58>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a13      	ldr	r2, [pc, #76]	; (8001a54 <HAL_TIM_Base_Start_IT+0xa0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d111      	bne.n	8001a30 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d010      	beq.n	8001a40 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 0201 	orr.w	r2, r2, #1
 8001a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a2e:	e007      	b.n	8001a40 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f042 0201 	orr.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr
 8001a4c:	40012c00 	.word	0x40012c00
 8001a50:	40000400 	.word	0x40000400
 8001a54:	40000800 	.word	0x40000800

08001a58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d122      	bne.n	8001ab4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d11b      	bne.n	8001ab4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f06f 0202 	mvn.w	r2, #2
 8001a84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f8ed 	bl	8001c7a <HAL_TIM_IC_CaptureCallback>
 8001aa0:	e005      	b.n	8001aae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f8e0 	bl	8001c68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f8ef 	bl	8001c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	d122      	bne.n	8001b08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b04      	cmp	r3, #4
 8001ace:	d11b      	bne.n	8001b08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f06f 0204 	mvn.w	r2, #4
 8001ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2202      	movs	r2, #2
 8001ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d003      	beq.n	8001af6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f8c3 	bl	8001c7a <HAL_TIM_IC_CaptureCallback>
 8001af4:	e005      	b.n	8001b02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f8b6 	bl	8001c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f8c5 	bl	8001c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	f003 0308 	and.w	r3, r3, #8
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d122      	bne.n	8001b5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d11b      	bne.n	8001b5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f06f 0208 	mvn.w	r2, #8
 8001b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2204      	movs	r2, #4
 8001b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f899 	bl	8001c7a <HAL_TIM_IC_CaptureCallback>
 8001b48:	e005      	b.n	8001b56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f88c 	bl	8001c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 f89b 	bl	8001c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	691b      	ldr	r3, [r3, #16]
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	2b10      	cmp	r3, #16
 8001b68:	d122      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f003 0310 	and.w	r3, r3, #16
 8001b74:	2b10      	cmp	r3, #16
 8001b76:	d11b      	bne.n	8001bb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f06f 0210 	mvn.w	r2, #16
 8001b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2208      	movs	r2, #8
 8001b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d003      	beq.n	8001b9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f86f 	bl	8001c7a <HAL_TIM_IC_CaptureCallback>
 8001b9c:	e005      	b.n	8001baa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f000 f862 	bl	8001c68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f000 f871 	bl	8001c8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d10e      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d107      	bne.n	8001bdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0201 	mvn.w	r2, #1
 8001bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7fe fd10 	bl	80005fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be6:	2b80      	cmp	r3, #128	; 0x80
 8001be8:	d10e      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf4:	2b80      	cmp	r3, #128	; 0x80
 8001bf6:	d107      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f8bf 	bl	8001d86 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c12:	2b40      	cmp	r3, #64	; 0x40
 8001c14:	d10e      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c20:	2b40      	cmp	r3, #64	; 0x40
 8001c22:	d107      	bne.n	8001c34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 f835 	bl	8001c9e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f003 0320 	and.w	r3, r3, #32
 8001c3e:	2b20      	cmp	r3, #32
 8001c40:	d10e      	bne.n	8001c60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0320 	and.w	r3, r3, #32
 8001c4c:	2b20      	cmp	r3, #32
 8001c4e:	d107      	bne.n	8001c60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f06f 0220 	mvn.w	r2, #32
 8001c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f88a 	bl	8001d74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a29      	ldr	r2, [pc, #164]	; (8001d68 <TIM_Base_SetConfig+0xb8>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d00b      	beq.n	8001ce0 <TIM_Base_SetConfig+0x30>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cce:	d007      	beq.n	8001ce0 <TIM_Base_SetConfig+0x30>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a26      	ldr	r2, [pc, #152]	; (8001d6c <TIM_Base_SetConfig+0xbc>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d003      	beq.n	8001ce0 <TIM_Base_SetConfig+0x30>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a25      	ldr	r2, [pc, #148]	; (8001d70 <TIM_Base_SetConfig+0xc0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d108      	bne.n	8001cf2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <TIM_Base_SetConfig+0xb8>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00b      	beq.n	8001d12 <TIM_Base_SetConfig+0x62>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d00:	d007      	beq.n	8001d12 <TIM_Base_SetConfig+0x62>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a19      	ldr	r2, [pc, #100]	; (8001d6c <TIM_Base_SetConfig+0xbc>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d003      	beq.n	8001d12 <TIM_Base_SetConfig+0x62>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a18      	ldr	r2, [pc, #96]	; (8001d70 <TIM_Base_SetConfig+0xc0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d108      	bne.n	8001d24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	68fa      	ldr	r2, [r7, #12]
 8001d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a07      	ldr	r2, [pc, #28]	; (8001d68 <TIM_Base_SetConfig+0xb8>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d103      	bne.n	8001d58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	615a      	str	r2, [r3, #20]
}
 8001d5e:	bf00      	nop
 8001d60:	3714      	adds	r7, #20
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr
 8001d68:	40012c00 	.word	0x40012c00
 8001d6c:	40000400 	.word	0x40000400
 8001d70:	40000800 	.word	0x40000800

08001d74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e03f      	b.n	8001e2a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d106      	bne.n	8001dc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7fe fc6c 	bl	800069c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2224      	movs	r2, #36	; 0x24
 8001dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f905 	bl	8001fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	691a      	ldr	r2, [r3, #16]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	695a      	ldr	r2, [r3, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2220      	movs	r2, #32
 8001e24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b08a      	sub	sp, #40	; 0x28
 8001e36:	af02      	add	r7, sp, #8
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b20      	cmp	r3, #32
 8001e50:	d17c      	bne.n	8001f4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <HAL_UART_Transmit+0x2c>
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e075      	b.n	8001f4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_UART_Transmit+0x3e>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e06e      	b.n	8001f4e <HAL_UART_Transmit+0x11c>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2221      	movs	r2, #33	; 0x21
 8001e82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001e86:	f7fe fe53 	bl	8000b30 <HAL_GetTick>
 8001e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	88fa      	ldrh	r2, [r7, #6]
 8001e90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	88fa      	ldrh	r2, [r7, #6]
 8001e96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea0:	d108      	bne.n	8001eb4 <HAL_UART_Transmit+0x82>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d104      	bne.n	8001eb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	61bb      	str	r3, [r7, #24]
 8001eb2:	e003      	b.n	8001ebc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001ec4:	e02a      	b.n	8001f1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2180      	movs	r1, #128	; 0x80
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 f840 	bl	8001f56 <UART_WaitOnFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e036      	b.n	8001f4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10b      	bne.n	8001efe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ef4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	3302      	adds	r3, #2
 8001efa:	61bb      	str	r3, [r7, #24]
 8001efc:	e007      	b.n	8001f0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1cf      	bne.n	8001ec6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2140      	movs	r1, #64	; 0x40
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 f810 	bl	8001f56 <UART_WaitOnFlagUntilTimeout>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e006      	b.n	8001f4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e000      	b.n	8001f4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001f4c:	2302      	movs	r3, #2
  }
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3720      	adds	r7, #32
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	603b      	str	r3, [r7, #0]
 8001f62:	4613      	mov	r3, r2
 8001f64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f66:	e02c      	b.n	8001fc2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f6e:	d028      	beq.n	8001fc2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f76:	f7fe fddb 	bl	8000b30 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d21d      	bcs.n	8001fc2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68da      	ldr	r2, [r3, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f94:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0201 	bic.w	r2, r2, #1
 8001fa4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2220      	movs	r2, #32
 8001faa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2220      	movs	r2, #32
 8001fb2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e00f      	b.n	8001fe2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	68ba      	ldr	r2, [r7, #8]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	bf0c      	ite	eq
 8001fd2:	2301      	moveq	r3, #1
 8001fd4:	2300      	movne	r3, #0
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d0c3      	beq.n	8001f68 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
	...

08001fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	431a      	orrs	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	4313      	orrs	r3, r2
 800201a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002026:	f023 030c 	bic.w	r3, r3, #12
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	430b      	orrs	r3, r1
 8002032:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	699a      	ldr	r2, [r3, #24]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a2c      	ldr	r2, [pc, #176]	; (8002100 <UART_SetConfig+0x114>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d103      	bne.n	800205c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002054:	f7ff fbf4 	bl	8001840 <HAL_RCC_GetPCLK2Freq>
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	e002      	b.n	8002062 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800205c:	f7ff fbdc 	bl	8001818 <HAL_RCC_GetPCLK1Freq>
 8002060:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	009a      	lsls	r2, r3, #2
 800206c:	441a      	add	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	fbb2 f3f3 	udiv	r3, r2, r3
 8002078:	4a22      	ldr	r2, [pc, #136]	; (8002104 <UART_SetConfig+0x118>)
 800207a:	fba2 2303 	umull	r2, r3, r2, r3
 800207e:	095b      	lsrs	r3, r3, #5
 8002080:	0119      	lsls	r1, r3, #4
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4613      	mov	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	009a      	lsls	r2, r3, #2
 800208c:	441a      	add	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	fbb2 f2f3 	udiv	r2, r2, r3
 8002098:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <UART_SetConfig+0x118>)
 800209a:	fba3 0302 	umull	r0, r3, r3, r2
 800209e:	095b      	lsrs	r3, r3, #5
 80020a0:	2064      	movs	r0, #100	; 0x64
 80020a2:	fb00 f303 	mul.w	r3, r0, r3
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	011b      	lsls	r3, r3, #4
 80020aa:	3332      	adds	r3, #50	; 0x32
 80020ac:	4a15      	ldr	r2, [pc, #84]	; (8002104 <UART_SetConfig+0x118>)
 80020ae:	fba2 2303 	umull	r2, r3, r2, r3
 80020b2:	095b      	lsrs	r3, r3, #5
 80020b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020b8:	4419      	add	r1, r3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	009a      	lsls	r2, r3, #2
 80020c4:	441a      	add	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <UART_SetConfig+0x118>)
 80020d2:	fba3 0302 	umull	r0, r3, r3, r2
 80020d6:	095b      	lsrs	r3, r3, #5
 80020d8:	2064      	movs	r0, #100	; 0x64
 80020da:	fb00 f303 	mul.w	r3, r0, r3
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	3332      	adds	r3, #50	; 0x32
 80020e4:	4a07      	ldr	r2, [pc, #28]	; (8002104 <UART_SetConfig+0x118>)
 80020e6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	f003 020f 	and.w	r2, r3, #15
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	440a      	add	r2, r1
 80020f6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40013800 	.word	0x40013800
 8002104:	51eb851f 	.word	0x51eb851f

08002108 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800211a:	2b84      	cmp	r3, #132	; 0x84
 800211c:	d005      	beq.n	800212a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800211e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	4413      	add	r3, r2
 8002126:	3303      	adds	r3, #3
 8002128:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800212a:	68fb      	ldr	r3, [r7, #12]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800213a:	f000 fad1 	bl	80026e0 <vTaskStartScheduler>
  
  return osOK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	bd80      	pop	{r7, pc}

08002144 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002146:	b089      	sub	sp, #36	; 0x24
 8002148:	af04      	add	r7, sp, #16
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d020      	beq.n	8002198 <osThreadCreate+0x54>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d01c      	beq.n	8002198 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685c      	ldr	r4, [r3, #4]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681d      	ldr	r5, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691e      	ldr	r6, [r3, #16]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ffc9 	bl	8002108 <makeFreeRtosPriority>
 8002176:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002180:	9202      	str	r2, [sp, #8]
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	9100      	str	r1, [sp, #0]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	4632      	mov	r2, r6
 800218a:	4629      	mov	r1, r5
 800218c:	4620      	mov	r0, r4
 800218e:	f000 f8e8 	bl	8002362 <xTaskCreateStatic>
 8002192:	4603      	mov	r3, r0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	e01c      	b.n	80021d2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685c      	ldr	r4, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80021a4:	b29e      	uxth	r6, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ffab 	bl	8002108 <makeFreeRtosPriority>
 80021b2:	4602      	mov	r2, r0
 80021b4:	f107 030c 	add.w	r3, r7, #12
 80021b8:	9301      	str	r3, [sp, #4]
 80021ba:	9200      	str	r2, [sp, #0]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	4632      	mov	r2, r6
 80021c0:	4629      	mov	r1, r5
 80021c2:	4620      	mov	r0, r4
 80021c4:	f000 f929 	bl	800241a <xTaskCreate>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d001      	beq.n	80021d2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e000      	b.n	80021d4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80021d2:	68fb      	ldr	r3, [r7, #12]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021dc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <osDelay+0x16>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	e000      	b.n	80021f4 <osDelay+0x18>
 80021f2:	2301      	movs	r3, #1
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 fa3f 	bl	8002678 <vTaskDelay>
  
  return osOK;
 80021fa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f103 0208 	add.w	r2, r3, #8
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800221c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f103 0208 	add.w	r2, r3, #8
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f103 0208 	add.w	r2, r3, #8
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800225a:	b480      	push	{r7}
 800225c:	b085      	sub	sp, #20
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	601a      	str	r2, [r3, #0]
}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022b6:	d103      	bne.n	80022c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	e00c      	b.n	80022da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3308      	adds	r3, #8
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	e002      	b.n	80022ce <vListInsert+0x2e>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d2f6      	bcs.n	80022c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	601a      	str	r2, [r3, #0]
}
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr

08002310 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6892      	ldr	r2, [r2, #8]
 8002326:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6852      	ldr	r2, [r2, #4]
 8002330:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	d103      	bne.n	8002344 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689a      	ldr	r2, [r3, #8]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	1e5a      	subs	r2, r3, #1
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002362:	b580      	push	{r7, lr}
 8002364:	b08e      	sub	sp, #56	; 0x38
 8002366:	af04      	add	r7, sp, #16
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10a      	bne.n	800238c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800237a:	f383 8811 	msr	BASEPRI, r3
 800237e:	f3bf 8f6f 	isb	sy
 8002382:	f3bf 8f4f 	dsb	sy
 8002386:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002388:	bf00      	nop
 800238a:	e7fe      	b.n	800238a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800238c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10a      	bne.n	80023a8 <xTaskCreateStatic+0x46>
	__asm volatile
 8002392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002396:	f383 8811 	msr	BASEPRI, r3
 800239a:	f3bf 8f6f 	isb	sy
 800239e:	f3bf 8f4f 	dsb	sy
 80023a2:	61fb      	str	r3, [r7, #28]
}
 80023a4:	bf00      	nop
 80023a6:	e7fe      	b.n	80023a6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80023a8:	2354      	movs	r3, #84	; 0x54
 80023aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	2b54      	cmp	r3, #84	; 0x54
 80023b0:	d00a      	beq.n	80023c8 <xTaskCreateStatic+0x66>
	__asm volatile
 80023b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023b6:	f383 8811 	msr	BASEPRI, r3
 80023ba:	f3bf 8f6f 	isb	sy
 80023be:	f3bf 8f4f 	dsb	sy
 80023c2:	61bb      	str	r3, [r7, #24]
}
 80023c4:	bf00      	nop
 80023c6:	e7fe      	b.n	80023c6 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80023c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01e      	beq.n	800240c <xTaskCreateStatic+0xaa>
 80023ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d01b      	beq.n	800240c <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	2202      	movs	r2, #2
 80023e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80023e6:	2300      	movs	r3, #0
 80023e8:	9303      	str	r3, [sp, #12]
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	9302      	str	r3, [sp, #8]
 80023ee:	f107 0314 	add.w	r3, r7, #20
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f850 	bl	80024a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002404:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002406:	f000 f8cd 	bl	80025a4 <prvAddNewTaskToReadyList>
 800240a:	e001      	b.n	8002410 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002410:	697b      	ldr	r3, [r7, #20]
	}
 8002412:	4618      	mov	r0, r3
 8002414:	3728      	adds	r7, #40	; 0x28
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800241a:	b580      	push	{r7, lr}
 800241c:	b08c      	sub	sp, #48	; 0x30
 800241e:	af04      	add	r7, sp, #16
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	603b      	str	r3, [r7, #0]
 8002426:	4613      	mov	r3, r2
 8002428:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	4618      	mov	r0, r3
 8002430:	f000 fe6e 	bl	8003110 <pvPortMalloc>
 8002434:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00e      	beq.n	800245a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800243c:	2054      	movs	r0, #84	; 0x54
 800243e:	f000 fe67 	bl	8003110 <pvPortMalloc>
 8002442:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
 8002450:	e005      	b.n	800245e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002452:	6978      	ldr	r0, [r7, #20]
 8002454:	f000 ff20 	bl	8003298 <vPortFree>
 8002458:	e001      	b.n	800245e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d017      	beq.n	8002494 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800246c:	88fa      	ldrh	r2, [r7, #6]
 800246e:	2300      	movs	r3, #0
 8002470:	9303      	str	r3, [sp, #12]
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	9302      	str	r3, [sp, #8]
 8002476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002478:	9301      	str	r3, [sp, #4]
 800247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68b9      	ldr	r1, [r7, #8]
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f80e 	bl	80024a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002488:	69f8      	ldr	r0, [r7, #28]
 800248a:	f000 f88b 	bl	80025a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800248e:	2301      	movs	r3, #1
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	e002      	b.n	800249a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002498:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800249a:	69bb      	ldr	r3, [r7, #24]
	}
 800249c:	4618      	mov	r0, r3
 800249e:	3720      	adds	r7, #32
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b088      	sub	sp, #32
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80024bc:	3b01      	subs	r3, #1
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	f023 0307 	bic.w	r3, r3, #7
 80024ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <prvInitialiseNewTask+0x48>
	__asm volatile
 80024d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024da:	f383 8811 	msr	BASEPRI, r3
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	f3bf 8f4f 	dsb	sy
 80024e6:	617b      	str	r3, [r7, #20]
}
 80024e8:	bf00      	nop
 80024ea:	e7fe      	b.n	80024ea <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
 80024f0:	e012      	b.n	8002518 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	4413      	add	r3, r2
 80024f8:	7819      	ldrb	r1, [r3, #0]
 80024fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	4413      	add	r3, r2
 8002500:	3334      	adds	r3, #52	; 0x34
 8002502:	460a      	mov	r2, r1
 8002504:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	4413      	add	r3, r2
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d006      	beq.n	8002520 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3301      	adds	r3, #1
 8002516:	61fb      	str	r3, [r7, #28]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	2b0f      	cmp	r3, #15
 800251c:	d9e9      	bls.n	80024f2 <prvInitialiseNewTask+0x4e>
 800251e:	e000      	b.n	8002522 <prvInitialiseNewTask+0x7e>
		{
			break;
 8002520:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800252a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252c:	2b06      	cmp	r3, #6
 800252e:	d901      	bls.n	8002534 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002530:	2306      	movs	r3, #6
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002538:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800253a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800253e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002542:	2200      	movs	r2, #0
 8002544:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	3304      	adds	r3, #4
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff fe79 	bl	8002242 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002552:	3318      	adds	r3, #24
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff fe74 	bl	8002242 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800255e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002562:	f1c3 0207 	rsb	r2, r3, #7
 8002566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002568:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800256a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800256e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002572:	2200      	movs	r2, #0
 8002574:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	68f9      	ldr	r1, [r7, #12]
 8002582:	69b8      	ldr	r0, [r7, #24]
 8002584:	f000 fc0e 	bl	8002da4 <pxPortInitialiseStack>
 8002588:	4602      	mov	r2, r0
 800258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002598:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800259a:	bf00      	nop
 800259c:	3720      	adds	r7, #32
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80025ac:	f000 fcee 	bl	8002f8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80025b0:	4b2a      	ldr	r3, [pc, #168]	; (800265c <prvAddNewTaskToReadyList+0xb8>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	3301      	adds	r3, #1
 80025b6:	4a29      	ldr	r2, [pc, #164]	; (800265c <prvAddNewTaskToReadyList+0xb8>)
 80025b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80025ba:	4b29      	ldr	r3, [pc, #164]	; (8002660 <prvAddNewTaskToReadyList+0xbc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80025c2:	4a27      	ldr	r2, [pc, #156]	; (8002660 <prvAddNewTaskToReadyList+0xbc>)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80025c8:	4b24      	ldr	r3, [pc, #144]	; (800265c <prvAddNewTaskToReadyList+0xb8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d110      	bne.n	80025f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80025d0:	f000 fac0 	bl	8002b54 <prvInitialiseTaskLists>
 80025d4:	e00d      	b.n	80025f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80025d6:	4b23      	ldr	r3, [pc, #140]	; (8002664 <prvAddNewTaskToReadyList+0xc0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d109      	bne.n	80025f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025de:	4b20      	ldr	r3, [pc, #128]	; (8002660 <prvAddNewTaskToReadyList+0xbc>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d802      	bhi.n	80025f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80025ec:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <prvAddNewTaskToReadyList+0xbc>)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80025f2:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <prvAddNewTaskToReadyList+0xc4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	3301      	adds	r3, #1
 80025f8:	4a1b      	ldr	r2, [pc, #108]	; (8002668 <prvAddNewTaskToReadyList+0xc4>)
 80025fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	2201      	movs	r2, #1
 8002602:	409a      	lsls	r2, r3
 8002604:	4b19      	ldr	r3, [pc, #100]	; (800266c <prvAddNewTaskToReadyList+0xc8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4313      	orrs	r3, r2
 800260a:	4a18      	ldr	r2, [pc, #96]	; (800266c <prvAddNewTaskToReadyList+0xc8>)
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002612:	4613      	mov	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4a15      	ldr	r2, [pc, #84]	; (8002670 <prvAddNewTaskToReadyList+0xcc>)
 800261c:	441a      	add	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3304      	adds	r3, #4
 8002622:	4619      	mov	r1, r3
 8002624:	4610      	mov	r0, r2
 8002626:	f7ff fe18 	bl	800225a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800262a:	f000 fcdf 	bl	8002fec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800262e:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <prvAddNewTaskToReadyList+0xc0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00e      	beq.n	8002654 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <prvAddNewTaskToReadyList+0xbc>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002640:	429a      	cmp	r2, r3
 8002642:	d207      	bcs.n	8002654 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002644:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <prvAddNewTaskToReadyList+0xd0>)
 8002646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	200003f0 	.word	0x200003f0
 8002660:	200002f0 	.word	0x200002f0
 8002664:	200003fc 	.word	0x200003fc
 8002668:	2000040c 	.word	0x2000040c
 800266c:	200003f8 	.word	0x200003f8
 8002670:	200002f4 	.word	0x200002f4
 8002674:	e000ed04 	.word	0xe000ed04

08002678 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d017      	beq.n	80026ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800268a:	4b13      	ldr	r3, [pc, #76]	; (80026d8 <vTaskDelay+0x60>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <vTaskDelay+0x30>
	__asm volatile
 8002692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002696:	f383 8811 	msr	BASEPRI, r3
 800269a:	f3bf 8f6f 	isb	sy
 800269e:	f3bf 8f4f 	dsb	sy
 80026a2:	60bb      	str	r3, [r7, #8]
}
 80026a4:	bf00      	nop
 80026a6:	e7fe      	b.n	80026a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80026a8:	f000 f87a 	bl	80027a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80026ac:	2100      	movs	r1, #0
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fb12 	bl	8002cd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80026b4:	f000 f882 	bl	80027bc <xTaskResumeAll>
 80026b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d107      	bne.n	80026d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <vTaskDelay+0x64>)
 80026c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	f3bf 8f4f 	dsb	sy
 80026cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80026d0:	bf00      	nop
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20000418 	.word	0x20000418
 80026dc:	e000ed04 	.word	0xe000ed04

080026e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80026ee:	463a      	mov	r2, r7
 80026f0:	1d39      	adds	r1, r7, #4
 80026f2:	f107 0308 	add.w	r3, r7, #8
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fd fd32 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80026fc:	6839      	ldr	r1, [r7, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68ba      	ldr	r2, [r7, #8]
 8002702:	9202      	str	r2, [sp, #8]
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	2300      	movs	r3, #0
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	2300      	movs	r3, #0
 800270c:	460a      	mov	r2, r1
 800270e:	491e      	ldr	r1, [pc, #120]	; (8002788 <vTaskStartScheduler+0xa8>)
 8002710:	481e      	ldr	r0, [pc, #120]	; (800278c <vTaskStartScheduler+0xac>)
 8002712:	f7ff fe26 	bl	8002362 <xTaskCreateStatic>
 8002716:	4603      	mov	r3, r0
 8002718:	4a1d      	ldr	r2, [pc, #116]	; (8002790 <vTaskStartScheduler+0xb0>)
 800271a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800271c:	4b1c      	ldr	r3, [pc, #112]	; (8002790 <vTaskStartScheduler+0xb0>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002724:	2301      	movs	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	e001      	b.n	800272e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d116      	bne.n	8002762 <vTaskStartScheduler+0x82>
	__asm volatile
 8002734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	613b      	str	r3, [r7, #16]
}
 8002746:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002748:	4b12      	ldr	r3, [pc, #72]	; (8002794 <vTaskStartScheduler+0xb4>)
 800274a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800274e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002750:	4b11      	ldr	r3, [pc, #68]	; (8002798 <vTaskStartScheduler+0xb8>)
 8002752:	2201      	movs	r2, #1
 8002754:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002756:	4b11      	ldr	r3, [pc, #68]	; (800279c <vTaskStartScheduler+0xbc>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800275c:	f000 fba4 	bl	8002ea8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002760:	e00e      	b.n	8002780 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002768:	d10a      	bne.n	8002780 <vTaskStartScheduler+0xa0>
	__asm volatile
 800276a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276e:	f383 8811 	msr	BASEPRI, r3
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	60fb      	str	r3, [r7, #12]
}
 800277c:	bf00      	nop
 800277e:	e7fe      	b.n	800277e <vTaskStartScheduler+0x9e>
}
 8002780:	bf00      	nop
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	08004a54 	.word	0x08004a54
 800278c:	08002b25 	.word	0x08002b25
 8002790:	20000414 	.word	0x20000414
 8002794:	20000410 	.word	0x20000410
 8002798:	200003fc 	.word	0x200003fc
 800279c:	200003f4 	.word	0x200003f4

080027a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <vTaskSuspendAll+0x18>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	3301      	adds	r3, #1
 80027aa:	4a03      	ldr	r2, [pc, #12]	; (80027b8 <vTaskSuspendAll+0x18>)
 80027ac:	6013      	str	r3, [r2, #0]
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	20000418 	.word	0x20000418

080027bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80027ca:	4b41      	ldr	r3, [pc, #260]	; (80028d0 <xTaskResumeAll+0x114>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80027d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	603b      	str	r3, [r7, #0]
}
 80027e4:	bf00      	nop
 80027e6:	e7fe      	b.n	80027e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80027e8:	f000 fbd0 	bl	8002f8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80027ec:	4b38      	ldr	r3, [pc, #224]	; (80028d0 <xTaskResumeAll+0x114>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	3b01      	subs	r3, #1
 80027f2:	4a37      	ldr	r2, [pc, #220]	; (80028d0 <xTaskResumeAll+0x114>)
 80027f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027f6:	4b36      	ldr	r3, [pc, #216]	; (80028d0 <xTaskResumeAll+0x114>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d161      	bne.n	80028c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027fe:	4b35      	ldr	r3, [pc, #212]	; (80028d4 <xTaskResumeAll+0x118>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d05d      	beq.n	80028c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002806:	e02e      	b.n	8002866 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002808:	4b33      	ldr	r3, [pc, #204]	; (80028d8 <xTaskResumeAll+0x11c>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	3318      	adds	r3, #24
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fd7b 	bl	8002310 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	3304      	adds	r3, #4
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fd76 	bl	8002310 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002828:	2201      	movs	r2, #1
 800282a:	409a      	lsls	r2, r3
 800282c:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <xTaskResumeAll+0x120>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4313      	orrs	r3, r2
 8002832:	4a2a      	ldr	r2, [pc, #168]	; (80028dc <xTaskResumeAll+0x120>)
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800283a:	4613      	mov	r3, r2
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	4413      	add	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4a27      	ldr	r2, [pc, #156]	; (80028e0 <xTaskResumeAll+0x124>)
 8002844:	441a      	add	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	3304      	adds	r3, #4
 800284a:	4619      	mov	r1, r3
 800284c:	4610      	mov	r0, r2
 800284e:	f7ff fd04 	bl	800225a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002856:	4b23      	ldr	r3, [pc, #140]	; (80028e4 <xTaskResumeAll+0x128>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	429a      	cmp	r2, r3
 800285e:	d302      	bcc.n	8002866 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002860:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <xTaskResumeAll+0x12c>)
 8002862:	2201      	movs	r2, #1
 8002864:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002866:	4b1c      	ldr	r3, [pc, #112]	; (80028d8 <xTaskResumeAll+0x11c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1cc      	bne.n	8002808 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002874:	f000 fa0c 	bl	8002c90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002878:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <xTaskResumeAll+0x130>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d010      	beq.n	80028a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002884:	f000 f836 	bl	80028f4 <xTaskIncrementTick>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d002      	beq.n	8002894 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800288e:	4b16      	ldr	r3, [pc, #88]	; (80028e8 <xTaskResumeAll+0x12c>)
 8002890:	2201      	movs	r2, #1
 8002892:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3b01      	subs	r3, #1
 8002898:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1f1      	bne.n	8002884 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <xTaskResumeAll+0x130>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80028a6:	4b10      	ldr	r3, [pc, #64]	; (80028e8 <xTaskResumeAll+0x12c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80028ae:	2301      	movs	r3, #1
 80028b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80028b2:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <xTaskResumeAll+0x134>)
 80028b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	f3bf 8f4f 	dsb	sy
 80028be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80028c2:	f000 fb93 	bl	8002fec <vPortExitCritical>

	return xAlreadyYielded;
 80028c6:	68bb      	ldr	r3, [r7, #8]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	20000418 	.word	0x20000418
 80028d4:	200003f0 	.word	0x200003f0
 80028d8:	200003b0 	.word	0x200003b0
 80028dc:	200003f8 	.word	0x200003f8
 80028e0:	200002f4 	.word	0x200002f4
 80028e4:	200002f0 	.word	0x200002f0
 80028e8:	20000404 	.word	0x20000404
 80028ec:	20000400 	.word	0x20000400
 80028f0:	e000ed04 	.word	0xe000ed04

080028f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028fe:	4b51      	ldr	r3, [pc, #324]	; (8002a44 <xTaskIncrementTick+0x150>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b00      	cmp	r3, #0
 8002904:	f040 808d 	bne.w	8002a22 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002908:	4b4f      	ldr	r3, [pc, #316]	; (8002a48 <xTaskIncrementTick+0x154>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3301      	adds	r3, #1
 800290e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002910:	4a4d      	ldr	r2, [pc, #308]	; (8002a48 <xTaskIncrementTick+0x154>)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d120      	bne.n	800295e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800291c:	4b4b      	ldr	r3, [pc, #300]	; (8002a4c <xTaskIncrementTick+0x158>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <xTaskIncrementTick+0x48>
	__asm volatile
 8002926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800292a:	f383 8811 	msr	BASEPRI, r3
 800292e:	f3bf 8f6f 	isb	sy
 8002932:	f3bf 8f4f 	dsb	sy
 8002936:	603b      	str	r3, [r7, #0]
}
 8002938:	bf00      	nop
 800293a:	e7fe      	b.n	800293a <xTaskIncrementTick+0x46>
 800293c:	4b43      	ldr	r3, [pc, #268]	; (8002a4c <xTaskIncrementTick+0x158>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b43      	ldr	r3, [pc, #268]	; (8002a50 <xTaskIncrementTick+0x15c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a41      	ldr	r2, [pc, #260]	; (8002a4c <xTaskIncrementTick+0x158>)
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	4a41      	ldr	r2, [pc, #260]	; (8002a50 <xTaskIncrementTick+0x15c>)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6013      	str	r3, [r2, #0]
 8002950:	4b40      	ldr	r3, [pc, #256]	; (8002a54 <xTaskIncrementTick+0x160>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3301      	adds	r3, #1
 8002956:	4a3f      	ldr	r2, [pc, #252]	; (8002a54 <xTaskIncrementTick+0x160>)
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	f000 f999 	bl	8002c90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800295e:	4b3e      	ldr	r3, [pc, #248]	; (8002a58 <xTaskIncrementTick+0x164>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	429a      	cmp	r2, r3
 8002966:	d34d      	bcc.n	8002a04 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002968:	4b38      	ldr	r3, [pc, #224]	; (8002a4c <xTaskIncrementTick+0x158>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <xTaskIncrementTick+0x82>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <xTaskIncrementTick+0x84>
 8002976:	2300      	movs	r3, #0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d004      	beq.n	8002986 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800297c:	4b36      	ldr	r3, [pc, #216]	; (8002a58 <xTaskIncrementTick+0x164>)
 800297e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002982:	601a      	str	r2, [r3, #0]
					break;
 8002984:	e03e      	b.n	8002a04 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002986:	4b31      	ldr	r3, [pc, #196]	; (8002a4c <xTaskIncrementTick+0x158>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	429a      	cmp	r2, r3
 800299c:	d203      	bcs.n	80029a6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800299e:	4a2e      	ldr	r2, [pc, #184]	; (8002a58 <xTaskIncrementTick+0x164>)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6013      	str	r3, [r2, #0]
						break;
 80029a4:	e02e      	b.n	8002a04 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	3304      	adds	r3, #4
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fcb0 	bl	8002310 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d004      	beq.n	80029c2 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	3318      	adds	r3, #24
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fca7 	bl	8002310 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	2201      	movs	r2, #1
 80029c8:	409a      	lsls	r2, r3
 80029ca:	4b24      	ldr	r3, [pc, #144]	; (8002a5c <xTaskIncrementTick+0x168>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	4a22      	ldr	r2, [pc, #136]	; (8002a5c <xTaskIncrementTick+0x168>)
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029d8:	4613      	mov	r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	4413      	add	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4a1f      	ldr	r2, [pc, #124]	; (8002a60 <xTaskIncrementTick+0x16c>)
 80029e2:	441a      	add	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	3304      	adds	r3, #4
 80029e8:	4619      	mov	r1, r3
 80029ea:	4610      	mov	r0, r2
 80029ec:	f7ff fc35 	bl	800225a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f4:	4b1b      	ldr	r3, [pc, #108]	; (8002a64 <xTaskIncrementTick+0x170>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d3b4      	bcc.n	8002968 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80029fe:	2301      	movs	r3, #1
 8002a00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a02:	e7b1      	b.n	8002968 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002a04:	4b17      	ldr	r3, [pc, #92]	; (8002a64 <xTaskIncrementTick+0x170>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0a:	4915      	ldr	r1, [pc, #84]	; (8002a60 <xTaskIncrementTick+0x16c>)
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d907      	bls.n	8002a2c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	e004      	b.n	8002a2c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <xTaskIncrementTick+0x174>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	3301      	adds	r3, #1
 8002a28:	4a0f      	ldr	r2, [pc, #60]	; (8002a68 <xTaskIncrementTick+0x174>)
 8002a2a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <xTaskIncrementTick+0x178>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8002a34:	2301      	movs	r3, #1
 8002a36:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002a38:	697b      	ldr	r3, [r7, #20]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3718      	adds	r7, #24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000418 	.word	0x20000418
 8002a48:	200003f4 	.word	0x200003f4
 8002a4c:	200003a8 	.word	0x200003a8
 8002a50:	200003ac 	.word	0x200003ac
 8002a54:	20000408 	.word	0x20000408
 8002a58:	20000410 	.word	0x20000410
 8002a5c:	200003f8 	.word	0x200003f8
 8002a60:	200002f4 	.word	0x200002f4
 8002a64:	200002f0 	.word	0x200002f0
 8002a68:	20000400 	.word	0x20000400
 8002a6c:	20000404 	.word	0x20000404

08002a70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002a70:	b480      	push	{r7}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002a76:	4b26      	ldr	r3, [pc, #152]	; (8002b10 <vTaskSwitchContext+0xa0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002a7e:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <vTaskSwitchContext+0xa4>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002a84:	e03f      	b.n	8002b06 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8002a86:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <vTaskSwitchContext+0xa4>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002a8c:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <vTaskSwitchContext+0xa8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	fab3 f383 	clz	r3, r3
 8002a98:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002a9a:	7afb      	ldrb	r3, [r7, #11]
 8002a9c:	f1c3 031f 	rsb	r3, r3, #31
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	491e      	ldr	r1, [pc, #120]	; (8002b1c <vTaskSwitchContext+0xac>)
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10a      	bne.n	8002acc <vTaskSwitchContext+0x5c>
	__asm volatile
 8002ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aba:	f383 8811 	msr	BASEPRI, r3
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	607b      	str	r3, [r7, #4]
}
 8002ac8:	bf00      	nop
 8002aca:	e7fe      	b.n	8002aca <vTaskSwitchContext+0x5a>
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	4a11      	ldr	r2, [pc, #68]	; (8002b1c <vTaskSwitchContext+0xac>)
 8002ad8:	4413      	add	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	3308      	adds	r3, #8
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d104      	bne.n	8002afc <vTaskSwitchContext+0x8c>
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	685a      	ldr	r2, [r3, #4]
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	605a      	str	r2, [r3, #4]
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	4a07      	ldr	r2, [pc, #28]	; (8002b20 <vTaskSwitchContext+0xb0>)
 8002b04:	6013      	str	r3, [r2, #0]
}
 8002b06:	bf00      	nop
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	20000418 	.word	0x20000418
 8002b14:	20000404 	.word	0x20000404
 8002b18:	200003f8 	.word	0x200003f8
 8002b1c:	200002f4 	.word	0x200002f4
 8002b20:	200002f0 	.word	0x200002f0

08002b24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002b2c:	f000 f852 	bl	8002bd4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <prvIdleTask+0x28>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d9f9      	bls.n	8002b2c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <prvIdleTask+0x2c>)
 8002b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002b48:	e7f0      	b.n	8002b2c <prvIdleTask+0x8>
 8002b4a:	bf00      	nop
 8002b4c:	200002f4 	.word	0x200002f4
 8002b50:	e000ed04 	.word	0xe000ed04

08002b54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	e00c      	b.n	8002b7a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <prvInitialiseTaskLists+0x60>)
 8002b6c:	4413      	add	r3, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fb48 	bl	8002204 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3301      	adds	r3, #1
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b06      	cmp	r3, #6
 8002b7e:	d9ef      	bls.n	8002b60 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002b80:	480d      	ldr	r0, [pc, #52]	; (8002bb8 <prvInitialiseTaskLists+0x64>)
 8002b82:	f7ff fb3f 	bl	8002204 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002b86:	480d      	ldr	r0, [pc, #52]	; (8002bbc <prvInitialiseTaskLists+0x68>)
 8002b88:	f7ff fb3c 	bl	8002204 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002b8c:	480c      	ldr	r0, [pc, #48]	; (8002bc0 <prvInitialiseTaskLists+0x6c>)
 8002b8e:	f7ff fb39 	bl	8002204 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002b92:	480c      	ldr	r0, [pc, #48]	; (8002bc4 <prvInitialiseTaskLists+0x70>)
 8002b94:	f7ff fb36 	bl	8002204 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002b98:	480b      	ldr	r0, [pc, #44]	; (8002bc8 <prvInitialiseTaskLists+0x74>)
 8002b9a:	f7ff fb33 	bl	8002204 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <prvInitialiseTaskLists+0x78>)
 8002ba0:	4a05      	ldr	r2, [pc, #20]	; (8002bb8 <prvInitialiseTaskLists+0x64>)
 8002ba2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ba4:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <prvInitialiseTaskLists+0x7c>)
 8002ba6:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <prvInitialiseTaskLists+0x68>)
 8002ba8:	601a      	str	r2, [r3, #0]
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200002f4 	.word	0x200002f4
 8002bb8:	20000380 	.word	0x20000380
 8002bbc:	20000394 	.word	0x20000394
 8002bc0:	200003b0 	.word	0x200003b0
 8002bc4:	200003c4 	.word	0x200003c4
 8002bc8:	200003dc 	.word	0x200003dc
 8002bcc:	200003a8 	.word	0x200003a8
 8002bd0:	200003ac 	.word	0x200003ac

08002bd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002bda:	e019      	b.n	8002c10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002bdc:	f000 f9d6 	bl	8002f8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002be0:	4b10      	ldr	r3, [pc, #64]	; (8002c24 <prvCheckTasksWaitingTermination+0x50>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3304      	adds	r3, #4
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7ff fb8f 	bl	8002310 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002bf2:	4b0d      	ldr	r3, [pc, #52]	; (8002c28 <prvCheckTasksWaitingTermination+0x54>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	4a0b      	ldr	r2, [pc, #44]	; (8002c28 <prvCheckTasksWaitingTermination+0x54>)
 8002bfa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002bfc:	4b0b      	ldr	r3, [pc, #44]	; (8002c2c <prvCheckTasksWaitingTermination+0x58>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	4a0a      	ldr	r2, [pc, #40]	; (8002c2c <prvCheckTasksWaitingTermination+0x58>)
 8002c04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002c06:	f000 f9f1 	bl	8002fec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f810 	bl	8002c30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <prvCheckTasksWaitingTermination+0x58>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1e1      	bne.n	8002bdc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	200003c4 	.word	0x200003c4
 8002c28:	200003f0 	.word	0x200003f0
 8002c2c:	200003d8 	.word	0x200003d8

08002c30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d108      	bne.n	8002c54 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 fb26 	bl	8003298 <vPortFree>
				vPortFree( pxTCB );
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f000 fb23 	bl	8003298 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002c52:	e018      	b.n	8002c86 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d103      	bne.n	8002c66 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 fb1a 	bl	8003298 <vPortFree>
	}
 8002c64:	e00f      	b.n	8002c86 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d00a      	beq.n	8002c86 <prvDeleteTCB+0x56>
	__asm volatile
 8002c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c74:	f383 8811 	msr	BASEPRI, r3
 8002c78:	f3bf 8f6f 	isb	sy
 8002c7c:	f3bf 8f4f 	dsb	sy
 8002c80:	60fb      	str	r3, [r7, #12]
}
 8002c82:	bf00      	nop
 8002c84:	e7fe      	b.n	8002c84 <prvDeleteTCB+0x54>
	}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c96:	4b0e      	ldr	r3, [pc, #56]	; (8002cd0 <prvResetNextTaskUnblockTime+0x40>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <prvResetNextTaskUnblockTime+0x14>
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <prvResetNextTaskUnblockTime+0x16>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d004      	beq.n	8002cb4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <prvResetNextTaskUnblockTime+0x44>)
 8002cac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cb0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002cb2:	e008      	b.n	8002cc6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <prvResetNextTaskUnblockTime+0x40>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <prvResetNextTaskUnblockTime+0x44>)
 8002cc4:	6013      	str	r3, [r2, #0]
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr
 8002cd0:	200003a8 	.word	0x200003a8
 8002cd4:	20000410 	.word	0x20000410

08002cd8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002ce2:	4b29      	ldr	r3, [pc, #164]	; (8002d88 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ce8:	4b28      	ldr	r3, [pc, #160]	; (8002d8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3304      	adds	r3, #4
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fb0e 	bl	8002310 <uxListRemove>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10b      	bne.n	8002d12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002cfa:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	2201      	movs	r2, #1
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43da      	mvns	r2, r3
 8002d08:	4b21      	ldr	r3, [pc, #132]	; (8002d90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	4a20      	ldr	r2, [pc, #128]	; (8002d90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002d10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d18:	d10a      	bne.n	8002d30 <prvAddCurrentTaskToDelayedList+0x58>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d007      	beq.n	8002d30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d20:	4b1a      	ldr	r3, [pc, #104]	; (8002d8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	3304      	adds	r3, #4
 8002d26:	4619      	mov	r1, r3
 8002d28:	481a      	ldr	r0, [pc, #104]	; (8002d94 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002d2a:	f7ff fa96 	bl	800225a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002d2e:	e026      	b.n	8002d7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4413      	add	r3, r2
 8002d36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002d38:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d209      	bcs.n	8002d5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d48:	4b13      	ldr	r3, [pc, #76]	; (8002d98 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3304      	adds	r3, #4
 8002d52:	4619      	mov	r1, r3
 8002d54:	4610      	mov	r0, r2
 8002d56:	f7ff faa3 	bl	80022a0 <vListInsert>
}
 8002d5a:	e010      	b.n	8002d7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <prvAddCurrentTaskToDelayedList+0xc4>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	3304      	adds	r3, #4
 8002d66:	4619      	mov	r1, r3
 8002d68:	4610      	mov	r0, r2
 8002d6a:	f7ff fa99 	bl	80022a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002d6e:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68ba      	ldr	r2, [r7, #8]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d202      	bcs.n	8002d7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002d78:	4a09      	ldr	r2, [pc, #36]	; (8002da0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	6013      	str	r3, [r2, #0]
}
 8002d7e:	bf00      	nop
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	200003f4 	.word	0x200003f4
 8002d8c:	200002f0 	.word	0x200002f0
 8002d90:	200003f8 	.word	0x200003f8
 8002d94:	200003dc 	.word	0x200003dc
 8002d98:	200003ac 	.word	0x200003ac
 8002d9c:	200003a8 	.word	0x200003a8
 8002da0:	20000410 	.word	0x20000410

08002da4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	3b04      	subs	r3, #4
 8002db4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	3b04      	subs	r3, #4
 8002dc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f023 0201 	bic.w	r2, r3, #1
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3b04      	subs	r3, #4
 8002dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002dd4:	4a08      	ldr	r2, [pc, #32]	; (8002df8 <pxPortInitialiseStack+0x54>)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	3b14      	subs	r3, #20
 8002dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	3b20      	subs	r3, #32
 8002dea:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002dec:	68fb      	ldr	r3, [r7, #12]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr
 8002df8:	08002dfd 	.word	0x08002dfd

08002dfc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002e06:	4b12      	ldr	r3, [pc, #72]	; (8002e50 <prvTaskExitError+0x54>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e0e:	d00a      	beq.n	8002e26 <prvTaskExitError+0x2a>
	__asm volatile
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	f383 8811 	msr	BASEPRI, r3
 8002e18:	f3bf 8f6f 	isb	sy
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	60fb      	str	r3, [r7, #12]
}
 8002e22:	bf00      	nop
 8002e24:	e7fe      	b.n	8002e24 <prvTaskExitError+0x28>
	__asm volatile
 8002e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2a:	f383 8811 	msr	BASEPRI, r3
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f3bf 8f4f 	dsb	sy
 8002e36:	60bb      	str	r3, [r7, #8]
}
 8002e38:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002e3a:	bf00      	nop
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0fc      	beq.n	8002e3c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20000014 	.word	0x20000014
	...

08002e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002e60:	4b07      	ldr	r3, [pc, #28]	; (8002e80 <pxCurrentTCBConst2>)
 8002e62:	6819      	ldr	r1, [r3, #0]
 8002e64:	6808      	ldr	r0, [r1, #0]
 8002e66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002e6a:	f380 8809 	msr	PSP, r0
 8002e6e:	f3bf 8f6f 	isb	sy
 8002e72:	f04f 0000 	mov.w	r0, #0
 8002e76:	f380 8811 	msr	BASEPRI, r0
 8002e7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002e7e:	4770      	bx	lr

08002e80 <pxCurrentTCBConst2>:
 8002e80:	200002f0 	.word	0x200002f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop

08002e88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002e88:	4806      	ldr	r0, [pc, #24]	; (8002ea4 <prvPortStartFirstTask+0x1c>)
 8002e8a:	6800      	ldr	r0, [r0, #0]
 8002e8c:	6800      	ldr	r0, [r0, #0]
 8002e8e:	f380 8808 	msr	MSP, r0
 8002e92:	b662      	cpsie	i
 8002e94:	b661      	cpsie	f
 8002e96:	f3bf 8f4f 	dsb	sy
 8002e9a:	f3bf 8f6f 	isb	sy
 8002e9e:	df00      	svc	0
 8002ea0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002ea2:	bf00      	nop
 8002ea4:	e000ed08 	.word	0xe000ed08

08002ea8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002eae:	4b32      	ldr	r3, [pc, #200]	; (8002f78 <xPortStartScheduler+0xd0>)
 8002eb0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	22ff      	movs	r2, #255	; 0xff
 8002ebe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	4b2a      	ldr	r3, [pc, #168]	; (8002f7c <xPortStartScheduler+0xd4>)
 8002ed4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ed6:	4b2a      	ldr	r3, [pc, #168]	; (8002f80 <xPortStartScheduler+0xd8>)
 8002ed8:	2207      	movs	r2, #7
 8002eda:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002edc:	e009      	b.n	8002ef2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002ede:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <xPortStartScheduler+0xd8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	4a26      	ldr	r2, [pc, #152]	; (8002f80 <xPortStartScheduler+0xd8>)
 8002ee6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efa:	2b80      	cmp	r3, #128	; 0x80
 8002efc:	d0ef      	beq.n	8002ede <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002efe:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <xPortStartScheduler+0xd8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f1c3 0307 	rsb	r3, r3, #7
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d00a      	beq.n	8002f20 <xPortStartScheduler+0x78>
	__asm volatile
 8002f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	60bb      	str	r3, [r7, #8]
}
 8002f1c:	bf00      	nop
 8002f1e:	e7fe      	b.n	8002f1e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f20:	4b17      	ldr	r3, [pc, #92]	; (8002f80 <xPortStartScheduler+0xd8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	021b      	lsls	r3, r3, #8
 8002f26:	4a16      	ldr	r2, [pc, #88]	; (8002f80 <xPortStartScheduler+0xd8>)
 8002f28:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f2a:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <xPortStartScheduler+0xd8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f32:	4a13      	ldr	r2, [pc, #76]	; (8002f80 <xPortStartScheduler+0xd8>)
 8002f34:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002f3e:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <xPortStartScheduler+0xdc>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a10      	ldr	r2, [pc, #64]	; (8002f84 <xPortStartScheduler+0xdc>)
 8002f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002f4a:	4b0e      	ldr	r3, [pc, #56]	; (8002f84 <xPortStartScheduler+0xdc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a0d      	ldr	r2, [pc, #52]	; (8002f84 <xPortStartScheduler+0xdc>)
 8002f50:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002f54:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002f56:	f000 f8b9 	bl	80030cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <xPortStartScheduler+0xe0>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002f60:	f7ff ff92 	bl	8002e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002f64:	f7ff fd84 	bl	8002a70 <vTaskSwitchContext>
	prvTaskExitError();
 8002f68:	f7ff ff48 	bl	8002dfc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	e000e400 	.word	0xe000e400
 8002f7c:	2000041c 	.word	0x2000041c
 8002f80:	20000420 	.word	0x20000420
 8002f84:	e000ed20 	.word	0xe000ed20
 8002f88:	20000014 	.word	0x20000014

08002f8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
	__asm volatile
 8002f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f96:	f383 8811 	msr	BASEPRI, r3
 8002f9a:	f3bf 8f6f 	isb	sy
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	607b      	str	r3, [r7, #4]
}
 8002fa4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002fa6:	4b0f      	ldr	r3, [pc, #60]	; (8002fe4 <vPortEnterCritical+0x58>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	3301      	adds	r3, #1
 8002fac:	4a0d      	ldr	r2, [pc, #52]	; (8002fe4 <vPortEnterCritical+0x58>)
 8002fae:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002fb0:	4b0c      	ldr	r3, [pc, #48]	; (8002fe4 <vPortEnterCritical+0x58>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d10f      	bne.n	8002fd8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002fb8:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <vPortEnterCritical+0x5c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <vPortEnterCritical+0x4c>
	__asm volatile
 8002fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc6:	f383 8811 	msr	BASEPRI, r3
 8002fca:	f3bf 8f6f 	isb	sy
 8002fce:	f3bf 8f4f 	dsb	sy
 8002fd2:	603b      	str	r3, [r7, #0]
}
 8002fd4:	bf00      	nop
 8002fd6:	e7fe      	b.n	8002fd6 <vPortEnterCritical+0x4a>
	}
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	20000014 	.word	0x20000014
 8002fe8:	e000ed04 	.word	0xe000ed04

08002fec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002ff2:	4b11      	ldr	r3, [pc, #68]	; (8003038 <vPortExitCritical+0x4c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10a      	bne.n	8003010 <vPortExitCritical+0x24>
	__asm volatile
 8002ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	607b      	str	r3, [r7, #4]
}
 800300c:	bf00      	nop
 800300e:	e7fe      	b.n	800300e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003010:	4b09      	ldr	r3, [pc, #36]	; (8003038 <vPortExitCritical+0x4c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3b01      	subs	r3, #1
 8003016:	4a08      	ldr	r2, [pc, #32]	; (8003038 <vPortExitCritical+0x4c>)
 8003018:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800301a:	4b07      	ldr	r3, [pc, #28]	; (8003038 <vPortExitCritical+0x4c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d105      	bne.n	800302e <vPortExitCritical+0x42>
 8003022:	2300      	movs	r3, #0
 8003024:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800302c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	bc80      	pop	{r7}
 8003036:	4770      	bx	lr
 8003038:	20000014 	.word	0x20000014
 800303c:	00000000 	.word	0x00000000

08003040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003040:	f3ef 8009 	mrs	r0, PSP
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <pxCurrentTCBConst>)
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003050:	6010      	str	r0, [r2, #0]
 8003052:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003056:	f04f 0050 	mov.w	r0, #80	; 0x50
 800305a:	f380 8811 	msr	BASEPRI, r0
 800305e:	f7ff fd07 	bl	8002a70 <vTaskSwitchContext>
 8003062:	f04f 0000 	mov.w	r0, #0
 8003066:	f380 8811 	msr	BASEPRI, r0
 800306a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800306e:	6819      	ldr	r1, [r3, #0]
 8003070:	6808      	ldr	r0, [r1, #0]
 8003072:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003076:	f380 8809 	msr	PSP, r0
 800307a:	f3bf 8f6f 	isb	sy
 800307e:	4770      	bx	lr

08003080 <pxCurrentTCBConst>:
 8003080:	200002f0 	.word	0x200002f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop

08003088 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
	__asm volatile
 800308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	607b      	str	r3, [r7, #4]
}
 80030a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80030a2:	f7ff fc27 	bl	80028f4 <xTaskIncrementTick>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <SysTick_Handler+0x40>)
 80030ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	2300      	movs	r3, #0
 80030b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	f383 8811 	msr	BASEPRI, r3
}
 80030be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80030c0:	bf00      	nop
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	e000ed04 	.word	0xe000ed04

080030cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80030d0:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <vPortSetupTimerInterrupt+0x30>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80030d6:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <vPortSetupTimerInterrupt+0x34>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80030dc:	4b09      	ldr	r3, [pc, #36]	; (8003104 <vPortSetupTimerInterrupt+0x38>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a09      	ldr	r2, [pc, #36]	; (8003108 <vPortSetupTimerInterrupt+0x3c>)
 80030e2:	fba2 2303 	umull	r2, r3, r2, r3
 80030e6:	099b      	lsrs	r3, r3, #6
 80030e8:	4a08      	ldr	r2, [pc, #32]	; (800310c <vPortSetupTimerInterrupt+0x40>)
 80030ea:	3b01      	subs	r3, #1
 80030ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80030ee:	4b03      	ldr	r3, [pc, #12]	; (80030fc <vPortSetupTimerInterrupt+0x30>)
 80030f0:	2207      	movs	r2, #7
 80030f2:	601a      	str	r2, [r3, #0]
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bc80      	pop	{r7}
 80030fa:	4770      	bx	lr
 80030fc:	e000e010 	.word	0xe000e010
 8003100:	e000e018 	.word	0xe000e018
 8003104:	20000008 	.word	0x20000008
 8003108:	10624dd3 	.word	0x10624dd3
 800310c:	e000e014 	.word	0xe000e014

08003110 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08a      	sub	sp, #40	; 0x28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003118:	2300      	movs	r3, #0
 800311a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800311c:	f7ff fb40 	bl	80027a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003120:	4b58      	ldr	r3, [pc, #352]	; (8003284 <pvPortMalloc+0x174>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003128:	f000 f910 	bl	800334c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800312c:	4b56      	ldr	r3, [pc, #344]	; (8003288 <pvPortMalloc+0x178>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4013      	ands	r3, r2
 8003134:	2b00      	cmp	r3, #0
 8003136:	f040 808e 	bne.w	8003256 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d01d      	beq.n	800317c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003140:	2208      	movs	r2, #8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4413      	add	r3, r2
 8003146:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	2b00      	cmp	r3, #0
 8003150:	d014      	beq.n	800317c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f023 0307 	bic.w	r3, r3, #7
 8003158:	3308      	adds	r3, #8
 800315a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <pvPortMalloc+0x6c>
	__asm volatile
 8003166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800316a:	f383 8811 	msr	BASEPRI, r3
 800316e:	f3bf 8f6f 	isb	sy
 8003172:	f3bf 8f4f 	dsb	sy
 8003176:	617b      	str	r3, [r7, #20]
}
 8003178:	bf00      	nop
 800317a:	e7fe      	b.n	800317a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d069      	beq.n	8003256 <pvPortMalloc+0x146>
 8003182:	4b42      	ldr	r3, [pc, #264]	; (800328c <pvPortMalloc+0x17c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	429a      	cmp	r2, r3
 800318a:	d864      	bhi.n	8003256 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800318c:	4b40      	ldr	r3, [pc, #256]	; (8003290 <pvPortMalloc+0x180>)
 800318e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003190:	4b3f      	ldr	r3, [pc, #252]	; (8003290 <pvPortMalloc+0x180>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003196:	e004      	b.n	80031a2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800319c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d903      	bls.n	80031b4 <pvPortMalloc+0xa4>
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f1      	bne.n	8003198 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80031b4:	4b33      	ldr	r3, [pc, #204]	; (8003284 <pvPortMalloc+0x174>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d04b      	beq.n	8003256 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2208      	movs	r2, #8
 80031c4:	4413      	add	r3, r2
 80031c6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	1ad2      	subs	r2, r2, r3
 80031d8:	2308      	movs	r3, #8
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	429a      	cmp	r2, r3
 80031de:	d91f      	bls.n	8003220 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80031e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4413      	add	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <pvPortMalloc+0xf8>
	__asm volatile
 80031f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	613b      	str	r3, [r7, #16]
}
 8003204:	bf00      	nop
 8003206:	e7fe      	b.n	8003206 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	1ad2      	subs	r2, r2, r3
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800321a:	69b8      	ldr	r0, [r7, #24]
 800321c:	f000 f8f8 	bl	8003410 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003220:	4b1a      	ldr	r3, [pc, #104]	; (800328c <pvPortMalloc+0x17c>)
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	4a18      	ldr	r2, [pc, #96]	; (800328c <pvPortMalloc+0x17c>)
 800322c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800322e:	4b17      	ldr	r3, [pc, #92]	; (800328c <pvPortMalloc+0x17c>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	4b18      	ldr	r3, [pc, #96]	; (8003294 <pvPortMalloc+0x184>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d203      	bcs.n	8003242 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800323a:	4b14      	ldr	r3, [pc, #80]	; (800328c <pvPortMalloc+0x17c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a15      	ldr	r2, [pc, #84]	; (8003294 <pvPortMalloc+0x184>)
 8003240:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	4b10      	ldr	r3, [pc, #64]	; (8003288 <pvPortMalloc+0x178>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	431a      	orrs	r2, r3
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003256:	f7ff fab1 	bl	80027bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00a      	beq.n	800327a <pvPortMalloc+0x16a>
	__asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	60fb      	str	r3, [r7, #12]
}
 8003276:	bf00      	nop
 8003278:	e7fe      	b.n	8003278 <pvPortMalloc+0x168>
	return pvReturn;
 800327a:	69fb      	ldr	r3, [r7, #28]
}
 800327c:	4618      	mov	r0, r3
 800327e:	3728      	adds	r7, #40	; 0x28
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	2000102c 	.word	0x2000102c
 8003288:	20001038 	.word	0x20001038
 800328c:	20001030 	.word	0x20001030
 8003290:	20001024 	.word	0x20001024
 8003294:	20001034 	.word	0x20001034

08003298 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d048      	beq.n	800333c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80032aa:	2308      	movs	r3, #8
 80032ac:	425b      	negs	r3, r3
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4413      	add	r3, r2
 80032b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	4b21      	ldr	r3, [pc, #132]	; (8003344 <vPortFree+0xac>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10a      	bne.n	80032dc <vPortFree+0x44>
	__asm volatile
 80032c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ca:	f383 8811 	msr	BASEPRI, r3
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	60fb      	str	r3, [r7, #12]
}
 80032d8:	bf00      	nop
 80032da:	e7fe      	b.n	80032da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <vPortFree+0x62>
	__asm volatile
 80032e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e8:	f383 8811 	msr	BASEPRI, r3
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	60bb      	str	r3, [r7, #8]
}
 80032f6:	bf00      	nop
 80032f8:	e7fe      	b.n	80032f8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	4b11      	ldr	r3, [pc, #68]	; (8003344 <vPortFree+0xac>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4013      	ands	r3, r2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d019      	beq.n	800333c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d115      	bne.n	800333c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <vPortFree+0xac>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	43db      	mvns	r3, r3
 800331a:	401a      	ands	r2, r3
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003320:	f7ff fa3e 	bl	80027a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	4b07      	ldr	r3, [pc, #28]	; (8003348 <vPortFree+0xb0>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4413      	add	r3, r2
 800332e:	4a06      	ldr	r2, [pc, #24]	; (8003348 <vPortFree+0xb0>)
 8003330:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003332:	6938      	ldr	r0, [r7, #16]
 8003334:	f000 f86c 	bl	8003410 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003338:	f7ff fa40 	bl	80027bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800333c:	bf00      	nop
 800333e:	3718      	adds	r7, #24
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20001038 	.word	0x20001038
 8003348:	20001030 	.word	0x20001030

0800334c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003352:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003356:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003358:	4b27      	ldr	r3, [pc, #156]	; (80033f8 <prvHeapInit+0xac>)
 800335a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00c      	beq.n	8003380 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	3307      	adds	r3, #7
 800336a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f023 0307 	bic.w	r3, r3, #7
 8003372:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	4a1f      	ldr	r2, [pc, #124]	; (80033f8 <prvHeapInit+0xac>)
 800337c:	4413      	add	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003384:	4a1d      	ldr	r2, [pc, #116]	; (80033fc <prvHeapInit+0xb0>)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800338a:	4b1c      	ldr	r3, [pc, #112]	; (80033fc <prvHeapInit+0xb0>)
 800338c:	2200      	movs	r2, #0
 800338e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	4413      	add	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003398:	2208      	movs	r2, #8
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0307 	bic.w	r3, r3, #7
 80033a6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4a15      	ldr	r2, [pc, #84]	; (8003400 <prvHeapInit+0xb4>)
 80033ac:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80033ae:	4b14      	ldr	r3, [pc, #80]	; (8003400 <prvHeapInit+0xb4>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2200      	movs	r2, #0
 80033b4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80033b6:	4b12      	ldr	r3, [pc, #72]	; (8003400 <prvHeapInit+0xb4>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	68fa      	ldr	r2, [r7, #12]
 80033c6:	1ad2      	subs	r2, r2, r3
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80033cc:	4b0c      	ldr	r3, [pc, #48]	; (8003400 <prvHeapInit+0xb4>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <prvHeapInit+0xb8>)
 80033da:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	4a09      	ldr	r2, [pc, #36]	; (8003408 <prvHeapInit+0xbc>)
 80033e2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80033e4:	4b09      	ldr	r3, [pc, #36]	; (800340c <prvHeapInit+0xc0>)
 80033e6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80033ea:	601a      	str	r2, [r3, #0]
}
 80033ec:	bf00      	nop
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	20000424 	.word	0x20000424
 80033fc:	20001024 	.word	0x20001024
 8003400:	2000102c 	.word	0x2000102c
 8003404:	20001034 	.word	0x20001034
 8003408:	20001030 	.word	0x20001030
 800340c:	20001038 	.word	0x20001038

08003410 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003418:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <prvInsertBlockIntoFreeList+0xa8>)
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	e002      	b.n	8003424 <prvInsertBlockIntoFreeList+0x14>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	429a      	cmp	r2, r3
 800342c:	d8f7      	bhi.n	800341e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	4413      	add	r3, r2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	429a      	cmp	r2, r3
 800343e:	d108      	bne.n	8003452 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	441a      	add	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	441a      	add	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d118      	bne.n	8003498 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	4b14      	ldr	r3, [pc, #80]	; (80034bc <prvInsertBlockIntoFreeList+0xac>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	429a      	cmp	r2, r3
 8003470:	d00d      	beq.n	800348e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685a      	ldr	r2, [r3, #4]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	441a      	add	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	601a      	str	r2, [r3, #0]
 800348c:	e008      	b.n	80034a0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <prvInsertBlockIntoFreeList+0xac>)
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e003      	b.n	80034a0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d002      	beq.n	80034ae <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034ae:	bf00      	nop
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr
 80034b8:	20001024 	.word	0x20001024
 80034bc:	2000102c 	.word	0x2000102c

080034c0 <__errno>:
 80034c0:	4b01      	ldr	r3, [pc, #4]	; (80034c8 <__errno+0x8>)
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	20000018 	.word	0x20000018

080034cc <__libc_init_array>:
 80034cc:	b570      	push	{r4, r5, r6, lr}
 80034ce:	2600      	movs	r6, #0
 80034d0:	4d0c      	ldr	r5, [pc, #48]	; (8003504 <__libc_init_array+0x38>)
 80034d2:	4c0d      	ldr	r4, [pc, #52]	; (8003508 <__libc_init_array+0x3c>)
 80034d4:	1b64      	subs	r4, r4, r5
 80034d6:	10a4      	asrs	r4, r4, #2
 80034d8:	42a6      	cmp	r6, r4
 80034da:	d109      	bne.n	80034f0 <__libc_init_array+0x24>
 80034dc:	f001 fa72 	bl	80049c4 <_init>
 80034e0:	2600      	movs	r6, #0
 80034e2:	4d0a      	ldr	r5, [pc, #40]	; (800350c <__libc_init_array+0x40>)
 80034e4:	4c0a      	ldr	r4, [pc, #40]	; (8003510 <__libc_init_array+0x44>)
 80034e6:	1b64      	subs	r4, r4, r5
 80034e8:	10a4      	asrs	r4, r4, #2
 80034ea:	42a6      	cmp	r6, r4
 80034ec:	d105      	bne.n	80034fa <__libc_init_array+0x2e>
 80034ee:	bd70      	pop	{r4, r5, r6, pc}
 80034f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f4:	4798      	blx	r3
 80034f6:	3601      	adds	r6, #1
 80034f8:	e7ee      	b.n	80034d8 <__libc_init_array+0xc>
 80034fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80034fe:	4798      	blx	r3
 8003500:	3601      	adds	r6, #1
 8003502:	e7f2      	b.n	80034ea <__libc_init_array+0x1e>
 8003504:	08004bc0 	.word	0x08004bc0
 8003508:	08004bc0 	.word	0x08004bc0
 800350c:	08004bc0 	.word	0x08004bc0
 8003510:	08004bc4 	.word	0x08004bc4

08003514 <memcpy>:
 8003514:	440a      	add	r2, r1
 8003516:	4291      	cmp	r1, r2
 8003518:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800351c:	d100      	bne.n	8003520 <memcpy+0xc>
 800351e:	4770      	bx	lr
 8003520:	b510      	push	{r4, lr}
 8003522:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003526:	4291      	cmp	r1, r2
 8003528:	f803 4f01 	strb.w	r4, [r3, #1]!
 800352c:	d1f9      	bne.n	8003522 <memcpy+0xe>
 800352e:	bd10      	pop	{r4, pc}

08003530 <memset>:
 8003530:	4603      	mov	r3, r0
 8003532:	4402      	add	r2, r0
 8003534:	4293      	cmp	r3, r2
 8003536:	d100      	bne.n	800353a <memset+0xa>
 8003538:	4770      	bx	lr
 800353a:	f803 1b01 	strb.w	r1, [r3], #1
 800353e:	e7f9      	b.n	8003534 <memset+0x4>

08003540 <srand>:
 8003540:	b538      	push	{r3, r4, r5, lr}
 8003542:	4b10      	ldr	r3, [pc, #64]	; (8003584 <srand+0x44>)
 8003544:	4604      	mov	r4, r0
 8003546:	681d      	ldr	r5, [r3, #0]
 8003548:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800354a:	b9b3      	cbnz	r3, 800357a <srand+0x3a>
 800354c:	2018      	movs	r0, #24
 800354e:	f000 f8f1 	bl	8003734 <malloc>
 8003552:	4602      	mov	r2, r0
 8003554:	63a8      	str	r0, [r5, #56]	; 0x38
 8003556:	b920      	cbnz	r0, 8003562 <srand+0x22>
 8003558:	2142      	movs	r1, #66	; 0x42
 800355a:	4b0b      	ldr	r3, [pc, #44]	; (8003588 <srand+0x48>)
 800355c:	480b      	ldr	r0, [pc, #44]	; (800358c <srand+0x4c>)
 800355e:	f000 f8a7 	bl	80036b0 <__assert_func>
 8003562:	490b      	ldr	r1, [pc, #44]	; (8003590 <srand+0x50>)
 8003564:	4b0b      	ldr	r3, [pc, #44]	; (8003594 <srand+0x54>)
 8003566:	e9c0 1300 	strd	r1, r3, [r0]
 800356a:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <srand+0x58>)
 800356c:	2100      	movs	r1, #0
 800356e:	6083      	str	r3, [r0, #8]
 8003570:	230b      	movs	r3, #11
 8003572:	8183      	strh	r3, [r0, #12]
 8003574:	2001      	movs	r0, #1
 8003576:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800357a:	2200      	movs	r2, #0
 800357c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800357e:	611c      	str	r4, [r3, #16]
 8003580:	615a      	str	r2, [r3, #20]
 8003582:	bd38      	pop	{r3, r4, r5, pc}
 8003584:	20000018 	.word	0x20000018
 8003588:	08004a78 	.word	0x08004a78
 800358c:	08004a8f 	.word	0x08004a8f
 8003590:	abcd330e 	.word	0xabcd330e
 8003594:	e66d1234 	.word	0xe66d1234
 8003598:	0005deec 	.word	0x0005deec

0800359c <rand>:
 800359c:	4b17      	ldr	r3, [pc, #92]	; (80035fc <rand+0x60>)
 800359e:	b510      	push	{r4, lr}
 80035a0:	681c      	ldr	r4, [r3, #0]
 80035a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80035a4:	b9b3      	cbnz	r3, 80035d4 <rand+0x38>
 80035a6:	2018      	movs	r0, #24
 80035a8:	f000 f8c4 	bl	8003734 <malloc>
 80035ac:	4602      	mov	r2, r0
 80035ae:	63a0      	str	r0, [r4, #56]	; 0x38
 80035b0:	b920      	cbnz	r0, 80035bc <rand+0x20>
 80035b2:	214e      	movs	r1, #78	; 0x4e
 80035b4:	4b12      	ldr	r3, [pc, #72]	; (8003600 <rand+0x64>)
 80035b6:	4813      	ldr	r0, [pc, #76]	; (8003604 <rand+0x68>)
 80035b8:	f000 f87a 	bl	80036b0 <__assert_func>
 80035bc:	4912      	ldr	r1, [pc, #72]	; (8003608 <rand+0x6c>)
 80035be:	4b13      	ldr	r3, [pc, #76]	; (800360c <rand+0x70>)
 80035c0:	e9c0 1300 	strd	r1, r3, [r0]
 80035c4:	4b12      	ldr	r3, [pc, #72]	; (8003610 <rand+0x74>)
 80035c6:	2100      	movs	r1, #0
 80035c8:	6083      	str	r3, [r0, #8]
 80035ca:	230b      	movs	r3, #11
 80035cc:	8183      	strh	r3, [r0, #12]
 80035ce:	2001      	movs	r0, #1
 80035d0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80035d4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80035d6:	480f      	ldr	r0, [pc, #60]	; (8003614 <rand+0x78>)
 80035d8:	690a      	ldr	r2, [r1, #16]
 80035da:	694b      	ldr	r3, [r1, #20]
 80035dc:	4350      	muls	r0, r2
 80035de:	4c0e      	ldr	r4, [pc, #56]	; (8003618 <rand+0x7c>)
 80035e0:	fb04 0003 	mla	r0, r4, r3, r0
 80035e4:	fba2 3404 	umull	r3, r4, r2, r4
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	4404      	add	r4, r0
 80035ec:	f144 0000 	adc.w	r0, r4, #0
 80035f0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80035f4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80035f8:	bd10      	pop	{r4, pc}
 80035fa:	bf00      	nop
 80035fc:	20000018 	.word	0x20000018
 8003600:	08004a78 	.word	0x08004a78
 8003604:	08004a8f 	.word	0x08004a8f
 8003608:	abcd330e 	.word	0xabcd330e
 800360c:	e66d1234 	.word	0xe66d1234
 8003610:	0005deec 	.word	0x0005deec
 8003614:	5851f42d 	.word	0x5851f42d
 8003618:	4c957f2d 	.word	0x4c957f2d

0800361c <siprintf>:
 800361c:	b40e      	push	{r1, r2, r3}
 800361e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003622:	b500      	push	{lr}
 8003624:	b09c      	sub	sp, #112	; 0x70
 8003626:	ab1d      	add	r3, sp, #116	; 0x74
 8003628:	9002      	str	r0, [sp, #8]
 800362a:	9006      	str	r0, [sp, #24]
 800362c:	9107      	str	r1, [sp, #28]
 800362e:	9104      	str	r1, [sp, #16]
 8003630:	4808      	ldr	r0, [pc, #32]	; (8003654 <siprintf+0x38>)
 8003632:	4909      	ldr	r1, [pc, #36]	; (8003658 <siprintf+0x3c>)
 8003634:	f853 2b04 	ldr.w	r2, [r3], #4
 8003638:	9105      	str	r1, [sp, #20]
 800363a:	6800      	ldr	r0, [r0, #0]
 800363c:	a902      	add	r1, sp, #8
 800363e:	9301      	str	r3, [sp, #4]
 8003640:	f000 f982 	bl	8003948 <_svfiprintf_r>
 8003644:	2200      	movs	r2, #0
 8003646:	9b02      	ldr	r3, [sp, #8]
 8003648:	701a      	strb	r2, [r3, #0]
 800364a:	b01c      	add	sp, #112	; 0x70
 800364c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003650:	b003      	add	sp, #12
 8003652:	4770      	bx	lr
 8003654:	20000018 	.word	0x20000018
 8003658:	ffff0208 	.word	0xffff0208

0800365c <strcat>:
 800365c:	4602      	mov	r2, r0
 800365e:	b510      	push	{r4, lr}
 8003660:	7814      	ldrb	r4, [r2, #0]
 8003662:	4613      	mov	r3, r2
 8003664:	3201      	adds	r2, #1
 8003666:	2c00      	cmp	r4, #0
 8003668:	d1fa      	bne.n	8003660 <strcat+0x4>
 800366a:	3b01      	subs	r3, #1
 800366c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003670:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003674:	2a00      	cmp	r2, #0
 8003676:	d1f9      	bne.n	800366c <strcat+0x10>
 8003678:	bd10      	pop	{r4, pc}
	...

0800367c <time>:
 800367c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800367e:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <time+0x30>)
 8003680:	4604      	mov	r4, r0
 8003682:	2200      	movs	r2, #0
 8003684:	4669      	mov	r1, sp
 8003686:	6818      	ldr	r0, [r3, #0]
 8003688:	f000 f842 	bl	8003710 <_gettimeofday_r>
 800368c:	2800      	cmp	r0, #0
 800368e:	da05      	bge.n	800369c <time+0x20>
 8003690:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003694:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003698:	e9cd 2300 	strd	r2, r3, [sp]
 800369c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80036a0:	b10c      	cbz	r4, 80036a6 <time+0x2a>
 80036a2:	e9c4 0100 	strd	r0, r1, [r4]
 80036a6:	b004      	add	sp, #16
 80036a8:	bd10      	pop	{r4, pc}
 80036aa:	bf00      	nop
 80036ac:	20000018 	.word	0x20000018

080036b0 <__assert_func>:
 80036b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80036b2:	4614      	mov	r4, r2
 80036b4:	461a      	mov	r2, r3
 80036b6:	4b09      	ldr	r3, [pc, #36]	; (80036dc <__assert_func+0x2c>)
 80036b8:	4605      	mov	r5, r0
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68d8      	ldr	r0, [r3, #12]
 80036be:	b14c      	cbz	r4, 80036d4 <__assert_func+0x24>
 80036c0:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <__assert_func+0x30>)
 80036c2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80036c6:	9100      	str	r1, [sp, #0]
 80036c8:	462b      	mov	r3, r5
 80036ca:	4906      	ldr	r1, [pc, #24]	; (80036e4 <__assert_func+0x34>)
 80036cc:	f000 f80e 	bl	80036ec <fiprintf>
 80036d0:	f000 fdf8 	bl	80042c4 <abort>
 80036d4:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <__assert_func+0x38>)
 80036d6:	461c      	mov	r4, r3
 80036d8:	e7f3      	b.n	80036c2 <__assert_func+0x12>
 80036da:	bf00      	nop
 80036dc:	20000018 	.word	0x20000018
 80036e0:	08004aee 	.word	0x08004aee
 80036e4:	08004afb 	.word	0x08004afb
 80036e8:	08004b29 	.word	0x08004b29

080036ec <fiprintf>:
 80036ec:	b40e      	push	{r1, r2, r3}
 80036ee:	b503      	push	{r0, r1, lr}
 80036f0:	4601      	mov	r1, r0
 80036f2:	ab03      	add	r3, sp, #12
 80036f4:	4805      	ldr	r0, [pc, #20]	; (800370c <fiprintf+0x20>)
 80036f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80036fa:	6800      	ldr	r0, [r0, #0]
 80036fc:	9301      	str	r3, [sp, #4]
 80036fe:	f000 fa4b 	bl	8003b98 <_vfiprintf_r>
 8003702:	b002      	add	sp, #8
 8003704:	f85d eb04 	ldr.w	lr, [sp], #4
 8003708:	b003      	add	sp, #12
 800370a:	4770      	bx	lr
 800370c:	20000018 	.word	0x20000018

08003710 <_gettimeofday_r>:
 8003710:	b538      	push	{r3, r4, r5, lr}
 8003712:	2300      	movs	r3, #0
 8003714:	4d06      	ldr	r5, [pc, #24]	; (8003730 <_gettimeofday_r+0x20>)
 8003716:	4604      	mov	r4, r0
 8003718:	4608      	mov	r0, r1
 800371a:	4611      	mov	r1, r2
 800371c:	602b      	str	r3, [r5, #0]
 800371e:	f001 f949 	bl	80049b4 <_gettimeofday>
 8003722:	1c43      	adds	r3, r0, #1
 8003724:	d102      	bne.n	800372c <_gettimeofday_r+0x1c>
 8003726:	682b      	ldr	r3, [r5, #0]
 8003728:	b103      	cbz	r3, 800372c <_gettimeofday_r+0x1c>
 800372a:	6023      	str	r3, [r4, #0]
 800372c:	bd38      	pop	{r3, r4, r5, pc}
 800372e:	bf00      	nop
 8003730:	20001280 	.word	0x20001280

08003734 <malloc>:
 8003734:	4b02      	ldr	r3, [pc, #8]	; (8003740 <malloc+0xc>)
 8003736:	4601      	mov	r1, r0
 8003738:	6818      	ldr	r0, [r3, #0]
 800373a:	f000 b84f 	b.w	80037dc <_malloc_r>
 800373e:	bf00      	nop
 8003740:	20000018 	.word	0x20000018

08003744 <_free_r>:
 8003744:	b538      	push	{r3, r4, r5, lr}
 8003746:	4605      	mov	r5, r0
 8003748:	2900      	cmp	r1, #0
 800374a:	d043      	beq.n	80037d4 <_free_r+0x90>
 800374c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003750:	1f0c      	subs	r4, r1, #4
 8003752:	2b00      	cmp	r3, #0
 8003754:	bfb8      	it	lt
 8003756:	18e4      	addlt	r4, r4, r3
 8003758:	f001 f802 	bl	8004760 <__malloc_lock>
 800375c:	4a1e      	ldr	r2, [pc, #120]	; (80037d8 <_free_r+0x94>)
 800375e:	6813      	ldr	r3, [r2, #0]
 8003760:	4610      	mov	r0, r2
 8003762:	b933      	cbnz	r3, 8003772 <_free_r+0x2e>
 8003764:	6063      	str	r3, [r4, #4]
 8003766:	6014      	str	r4, [r2, #0]
 8003768:	4628      	mov	r0, r5
 800376a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800376e:	f000 bffd 	b.w	800476c <__malloc_unlock>
 8003772:	42a3      	cmp	r3, r4
 8003774:	d90a      	bls.n	800378c <_free_r+0x48>
 8003776:	6821      	ldr	r1, [r4, #0]
 8003778:	1862      	adds	r2, r4, r1
 800377a:	4293      	cmp	r3, r2
 800377c:	bf01      	itttt	eq
 800377e:	681a      	ldreq	r2, [r3, #0]
 8003780:	685b      	ldreq	r3, [r3, #4]
 8003782:	1852      	addeq	r2, r2, r1
 8003784:	6022      	streq	r2, [r4, #0]
 8003786:	6063      	str	r3, [r4, #4]
 8003788:	6004      	str	r4, [r0, #0]
 800378a:	e7ed      	b.n	8003768 <_free_r+0x24>
 800378c:	461a      	mov	r2, r3
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	b10b      	cbz	r3, 8003796 <_free_r+0x52>
 8003792:	42a3      	cmp	r3, r4
 8003794:	d9fa      	bls.n	800378c <_free_r+0x48>
 8003796:	6811      	ldr	r1, [r2, #0]
 8003798:	1850      	adds	r0, r2, r1
 800379a:	42a0      	cmp	r0, r4
 800379c:	d10b      	bne.n	80037b6 <_free_r+0x72>
 800379e:	6820      	ldr	r0, [r4, #0]
 80037a0:	4401      	add	r1, r0
 80037a2:	1850      	adds	r0, r2, r1
 80037a4:	4283      	cmp	r3, r0
 80037a6:	6011      	str	r1, [r2, #0]
 80037a8:	d1de      	bne.n	8003768 <_free_r+0x24>
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	4401      	add	r1, r0
 80037b0:	6011      	str	r1, [r2, #0]
 80037b2:	6053      	str	r3, [r2, #4]
 80037b4:	e7d8      	b.n	8003768 <_free_r+0x24>
 80037b6:	d902      	bls.n	80037be <_free_r+0x7a>
 80037b8:	230c      	movs	r3, #12
 80037ba:	602b      	str	r3, [r5, #0]
 80037bc:	e7d4      	b.n	8003768 <_free_r+0x24>
 80037be:	6820      	ldr	r0, [r4, #0]
 80037c0:	1821      	adds	r1, r4, r0
 80037c2:	428b      	cmp	r3, r1
 80037c4:	bf01      	itttt	eq
 80037c6:	6819      	ldreq	r1, [r3, #0]
 80037c8:	685b      	ldreq	r3, [r3, #4]
 80037ca:	1809      	addeq	r1, r1, r0
 80037cc:	6021      	streq	r1, [r4, #0]
 80037ce:	6063      	str	r3, [r4, #4]
 80037d0:	6054      	str	r4, [r2, #4]
 80037d2:	e7c9      	b.n	8003768 <_free_r+0x24>
 80037d4:	bd38      	pop	{r3, r4, r5, pc}
 80037d6:	bf00      	nop
 80037d8:	2000103c 	.word	0x2000103c

080037dc <_malloc_r>:
 80037dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037de:	1ccd      	adds	r5, r1, #3
 80037e0:	f025 0503 	bic.w	r5, r5, #3
 80037e4:	3508      	adds	r5, #8
 80037e6:	2d0c      	cmp	r5, #12
 80037e8:	bf38      	it	cc
 80037ea:	250c      	movcc	r5, #12
 80037ec:	2d00      	cmp	r5, #0
 80037ee:	4606      	mov	r6, r0
 80037f0:	db01      	blt.n	80037f6 <_malloc_r+0x1a>
 80037f2:	42a9      	cmp	r1, r5
 80037f4:	d903      	bls.n	80037fe <_malloc_r+0x22>
 80037f6:	230c      	movs	r3, #12
 80037f8:	6033      	str	r3, [r6, #0]
 80037fa:	2000      	movs	r0, #0
 80037fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037fe:	f000 ffaf 	bl	8004760 <__malloc_lock>
 8003802:	4921      	ldr	r1, [pc, #132]	; (8003888 <_malloc_r+0xac>)
 8003804:	680a      	ldr	r2, [r1, #0]
 8003806:	4614      	mov	r4, r2
 8003808:	b99c      	cbnz	r4, 8003832 <_malloc_r+0x56>
 800380a:	4f20      	ldr	r7, [pc, #128]	; (800388c <_malloc_r+0xb0>)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	b923      	cbnz	r3, 800381a <_malloc_r+0x3e>
 8003810:	4621      	mov	r1, r4
 8003812:	4630      	mov	r0, r6
 8003814:	f000 fc86 	bl	8004124 <_sbrk_r>
 8003818:	6038      	str	r0, [r7, #0]
 800381a:	4629      	mov	r1, r5
 800381c:	4630      	mov	r0, r6
 800381e:	f000 fc81 	bl	8004124 <_sbrk_r>
 8003822:	1c43      	adds	r3, r0, #1
 8003824:	d123      	bne.n	800386e <_malloc_r+0x92>
 8003826:	230c      	movs	r3, #12
 8003828:	4630      	mov	r0, r6
 800382a:	6033      	str	r3, [r6, #0]
 800382c:	f000 ff9e 	bl	800476c <__malloc_unlock>
 8003830:	e7e3      	b.n	80037fa <_malloc_r+0x1e>
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	1b5b      	subs	r3, r3, r5
 8003836:	d417      	bmi.n	8003868 <_malloc_r+0x8c>
 8003838:	2b0b      	cmp	r3, #11
 800383a:	d903      	bls.n	8003844 <_malloc_r+0x68>
 800383c:	6023      	str	r3, [r4, #0]
 800383e:	441c      	add	r4, r3
 8003840:	6025      	str	r5, [r4, #0]
 8003842:	e004      	b.n	800384e <_malloc_r+0x72>
 8003844:	6863      	ldr	r3, [r4, #4]
 8003846:	42a2      	cmp	r2, r4
 8003848:	bf0c      	ite	eq
 800384a:	600b      	streq	r3, [r1, #0]
 800384c:	6053      	strne	r3, [r2, #4]
 800384e:	4630      	mov	r0, r6
 8003850:	f000 ff8c 	bl	800476c <__malloc_unlock>
 8003854:	f104 000b 	add.w	r0, r4, #11
 8003858:	1d23      	adds	r3, r4, #4
 800385a:	f020 0007 	bic.w	r0, r0, #7
 800385e:	1ac2      	subs	r2, r0, r3
 8003860:	d0cc      	beq.n	80037fc <_malloc_r+0x20>
 8003862:	1a1b      	subs	r3, r3, r0
 8003864:	50a3      	str	r3, [r4, r2]
 8003866:	e7c9      	b.n	80037fc <_malloc_r+0x20>
 8003868:	4622      	mov	r2, r4
 800386a:	6864      	ldr	r4, [r4, #4]
 800386c:	e7cc      	b.n	8003808 <_malloc_r+0x2c>
 800386e:	1cc4      	adds	r4, r0, #3
 8003870:	f024 0403 	bic.w	r4, r4, #3
 8003874:	42a0      	cmp	r0, r4
 8003876:	d0e3      	beq.n	8003840 <_malloc_r+0x64>
 8003878:	1a21      	subs	r1, r4, r0
 800387a:	4630      	mov	r0, r6
 800387c:	f000 fc52 	bl	8004124 <_sbrk_r>
 8003880:	3001      	adds	r0, #1
 8003882:	d1dd      	bne.n	8003840 <_malloc_r+0x64>
 8003884:	e7cf      	b.n	8003826 <_malloc_r+0x4a>
 8003886:	bf00      	nop
 8003888:	2000103c 	.word	0x2000103c
 800388c:	20001040 	.word	0x20001040

08003890 <__ssputs_r>:
 8003890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003894:	688e      	ldr	r6, [r1, #8]
 8003896:	4682      	mov	sl, r0
 8003898:	429e      	cmp	r6, r3
 800389a:	460c      	mov	r4, r1
 800389c:	4690      	mov	r8, r2
 800389e:	461f      	mov	r7, r3
 80038a0:	d838      	bhi.n	8003914 <__ssputs_r+0x84>
 80038a2:	898a      	ldrh	r2, [r1, #12]
 80038a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038a8:	d032      	beq.n	8003910 <__ssputs_r+0x80>
 80038aa:	6825      	ldr	r5, [r4, #0]
 80038ac:	6909      	ldr	r1, [r1, #16]
 80038ae:	3301      	adds	r3, #1
 80038b0:	eba5 0901 	sub.w	r9, r5, r1
 80038b4:	6965      	ldr	r5, [r4, #20]
 80038b6:	444b      	add	r3, r9
 80038b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038c0:	106d      	asrs	r5, r5, #1
 80038c2:	429d      	cmp	r5, r3
 80038c4:	bf38      	it	cc
 80038c6:	461d      	movcc	r5, r3
 80038c8:	0553      	lsls	r3, r2, #21
 80038ca:	d531      	bpl.n	8003930 <__ssputs_r+0xa0>
 80038cc:	4629      	mov	r1, r5
 80038ce:	f7ff ff85 	bl	80037dc <_malloc_r>
 80038d2:	4606      	mov	r6, r0
 80038d4:	b950      	cbnz	r0, 80038ec <__ssputs_r+0x5c>
 80038d6:	230c      	movs	r3, #12
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038dc:	f8ca 3000 	str.w	r3, [sl]
 80038e0:	89a3      	ldrh	r3, [r4, #12]
 80038e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038e6:	81a3      	strh	r3, [r4, #12]
 80038e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ec:	464a      	mov	r2, r9
 80038ee:	6921      	ldr	r1, [r4, #16]
 80038f0:	f7ff fe10 	bl	8003514 <memcpy>
 80038f4:	89a3      	ldrh	r3, [r4, #12]
 80038f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038fe:	81a3      	strh	r3, [r4, #12]
 8003900:	6126      	str	r6, [r4, #16]
 8003902:	444e      	add	r6, r9
 8003904:	6026      	str	r6, [r4, #0]
 8003906:	463e      	mov	r6, r7
 8003908:	6165      	str	r5, [r4, #20]
 800390a:	eba5 0509 	sub.w	r5, r5, r9
 800390e:	60a5      	str	r5, [r4, #8]
 8003910:	42be      	cmp	r6, r7
 8003912:	d900      	bls.n	8003916 <__ssputs_r+0x86>
 8003914:	463e      	mov	r6, r7
 8003916:	4632      	mov	r2, r6
 8003918:	4641      	mov	r1, r8
 800391a:	6820      	ldr	r0, [r4, #0]
 800391c:	f000 ff06 	bl	800472c <memmove>
 8003920:	68a3      	ldr	r3, [r4, #8]
 8003922:	6822      	ldr	r2, [r4, #0]
 8003924:	1b9b      	subs	r3, r3, r6
 8003926:	4432      	add	r2, r6
 8003928:	2000      	movs	r0, #0
 800392a:	60a3      	str	r3, [r4, #8]
 800392c:	6022      	str	r2, [r4, #0]
 800392e:	e7db      	b.n	80038e8 <__ssputs_r+0x58>
 8003930:	462a      	mov	r2, r5
 8003932:	f000 ff21 	bl	8004778 <_realloc_r>
 8003936:	4606      	mov	r6, r0
 8003938:	2800      	cmp	r0, #0
 800393a:	d1e1      	bne.n	8003900 <__ssputs_r+0x70>
 800393c:	4650      	mov	r0, sl
 800393e:	6921      	ldr	r1, [r4, #16]
 8003940:	f7ff ff00 	bl	8003744 <_free_r>
 8003944:	e7c7      	b.n	80038d6 <__ssputs_r+0x46>
	...

08003948 <_svfiprintf_r>:
 8003948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800394c:	4698      	mov	r8, r3
 800394e:	898b      	ldrh	r3, [r1, #12]
 8003950:	4607      	mov	r7, r0
 8003952:	061b      	lsls	r3, r3, #24
 8003954:	460d      	mov	r5, r1
 8003956:	4614      	mov	r4, r2
 8003958:	b09d      	sub	sp, #116	; 0x74
 800395a:	d50e      	bpl.n	800397a <_svfiprintf_r+0x32>
 800395c:	690b      	ldr	r3, [r1, #16]
 800395e:	b963      	cbnz	r3, 800397a <_svfiprintf_r+0x32>
 8003960:	2140      	movs	r1, #64	; 0x40
 8003962:	f7ff ff3b 	bl	80037dc <_malloc_r>
 8003966:	6028      	str	r0, [r5, #0]
 8003968:	6128      	str	r0, [r5, #16]
 800396a:	b920      	cbnz	r0, 8003976 <_svfiprintf_r+0x2e>
 800396c:	230c      	movs	r3, #12
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003974:	e0d1      	b.n	8003b1a <_svfiprintf_r+0x1d2>
 8003976:	2340      	movs	r3, #64	; 0x40
 8003978:	616b      	str	r3, [r5, #20]
 800397a:	2300      	movs	r3, #0
 800397c:	9309      	str	r3, [sp, #36]	; 0x24
 800397e:	2320      	movs	r3, #32
 8003980:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003984:	2330      	movs	r3, #48	; 0x30
 8003986:	f04f 0901 	mov.w	r9, #1
 800398a:	f8cd 800c 	str.w	r8, [sp, #12]
 800398e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003b34 <_svfiprintf_r+0x1ec>
 8003992:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003996:	4623      	mov	r3, r4
 8003998:	469a      	mov	sl, r3
 800399a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800399e:	b10a      	cbz	r2, 80039a4 <_svfiprintf_r+0x5c>
 80039a0:	2a25      	cmp	r2, #37	; 0x25
 80039a2:	d1f9      	bne.n	8003998 <_svfiprintf_r+0x50>
 80039a4:	ebba 0b04 	subs.w	fp, sl, r4
 80039a8:	d00b      	beq.n	80039c2 <_svfiprintf_r+0x7a>
 80039aa:	465b      	mov	r3, fp
 80039ac:	4622      	mov	r2, r4
 80039ae:	4629      	mov	r1, r5
 80039b0:	4638      	mov	r0, r7
 80039b2:	f7ff ff6d 	bl	8003890 <__ssputs_r>
 80039b6:	3001      	adds	r0, #1
 80039b8:	f000 80aa 	beq.w	8003b10 <_svfiprintf_r+0x1c8>
 80039bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039be:	445a      	add	r2, fp
 80039c0:	9209      	str	r2, [sp, #36]	; 0x24
 80039c2:	f89a 3000 	ldrb.w	r3, [sl]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 80a2 	beq.w	8003b10 <_svfiprintf_r+0x1c8>
 80039cc:	2300      	movs	r3, #0
 80039ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039d6:	f10a 0a01 	add.w	sl, sl, #1
 80039da:	9304      	str	r3, [sp, #16]
 80039dc:	9307      	str	r3, [sp, #28]
 80039de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039e2:	931a      	str	r3, [sp, #104]	; 0x68
 80039e4:	4654      	mov	r4, sl
 80039e6:	2205      	movs	r2, #5
 80039e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039ec:	4851      	ldr	r0, [pc, #324]	; (8003b34 <_svfiprintf_r+0x1ec>)
 80039ee:	f000 fe8f 	bl	8004710 <memchr>
 80039f2:	9a04      	ldr	r2, [sp, #16]
 80039f4:	b9d8      	cbnz	r0, 8003a2e <_svfiprintf_r+0xe6>
 80039f6:	06d0      	lsls	r0, r2, #27
 80039f8:	bf44      	itt	mi
 80039fa:	2320      	movmi	r3, #32
 80039fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a00:	0711      	lsls	r1, r2, #28
 8003a02:	bf44      	itt	mi
 8003a04:	232b      	movmi	r3, #43	; 0x2b
 8003a06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a0e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a10:	d015      	beq.n	8003a3e <_svfiprintf_r+0xf6>
 8003a12:	4654      	mov	r4, sl
 8003a14:	2000      	movs	r0, #0
 8003a16:	f04f 0c0a 	mov.w	ip, #10
 8003a1a:	9a07      	ldr	r2, [sp, #28]
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a22:	3b30      	subs	r3, #48	; 0x30
 8003a24:	2b09      	cmp	r3, #9
 8003a26:	d94e      	bls.n	8003ac6 <_svfiprintf_r+0x17e>
 8003a28:	b1b0      	cbz	r0, 8003a58 <_svfiprintf_r+0x110>
 8003a2a:	9207      	str	r2, [sp, #28]
 8003a2c:	e014      	b.n	8003a58 <_svfiprintf_r+0x110>
 8003a2e:	eba0 0308 	sub.w	r3, r0, r8
 8003a32:	fa09 f303 	lsl.w	r3, r9, r3
 8003a36:	4313      	orrs	r3, r2
 8003a38:	46a2      	mov	sl, r4
 8003a3a:	9304      	str	r3, [sp, #16]
 8003a3c:	e7d2      	b.n	80039e4 <_svfiprintf_r+0x9c>
 8003a3e:	9b03      	ldr	r3, [sp, #12]
 8003a40:	1d19      	adds	r1, r3, #4
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	9103      	str	r1, [sp, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	bfbb      	ittet	lt
 8003a4a:	425b      	neglt	r3, r3
 8003a4c:	f042 0202 	orrlt.w	r2, r2, #2
 8003a50:	9307      	strge	r3, [sp, #28]
 8003a52:	9307      	strlt	r3, [sp, #28]
 8003a54:	bfb8      	it	lt
 8003a56:	9204      	strlt	r2, [sp, #16]
 8003a58:	7823      	ldrb	r3, [r4, #0]
 8003a5a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a5c:	d10c      	bne.n	8003a78 <_svfiprintf_r+0x130>
 8003a5e:	7863      	ldrb	r3, [r4, #1]
 8003a60:	2b2a      	cmp	r3, #42	; 0x2a
 8003a62:	d135      	bne.n	8003ad0 <_svfiprintf_r+0x188>
 8003a64:	9b03      	ldr	r3, [sp, #12]
 8003a66:	3402      	adds	r4, #2
 8003a68:	1d1a      	adds	r2, r3, #4
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	9203      	str	r2, [sp, #12]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bfb8      	it	lt
 8003a72:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003a76:	9305      	str	r3, [sp, #20]
 8003a78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b44 <_svfiprintf_r+0x1fc>
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	4650      	mov	r0, sl
 8003a80:	7821      	ldrb	r1, [r4, #0]
 8003a82:	f000 fe45 	bl	8004710 <memchr>
 8003a86:	b140      	cbz	r0, 8003a9a <_svfiprintf_r+0x152>
 8003a88:	2340      	movs	r3, #64	; 0x40
 8003a8a:	eba0 000a 	sub.w	r0, r0, sl
 8003a8e:	fa03 f000 	lsl.w	r0, r3, r0
 8003a92:	9b04      	ldr	r3, [sp, #16]
 8003a94:	3401      	adds	r4, #1
 8003a96:	4303      	orrs	r3, r0
 8003a98:	9304      	str	r3, [sp, #16]
 8003a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a9e:	2206      	movs	r2, #6
 8003aa0:	4825      	ldr	r0, [pc, #148]	; (8003b38 <_svfiprintf_r+0x1f0>)
 8003aa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003aa6:	f000 fe33 	bl	8004710 <memchr>
 8003aaa:	2800      	cmp	r0, #0
 8003aac:	d038      	beq.n	8003b20 <_svfiprintf_r+0x1d8>
 8003aae:	4b23      	ldr	r3, [pc, #140]	; (8003b3c <_svfiprintf_r+0x1f4>)
 8003ab0:	bb1b      	cbnz	r3, 8003afa <_svfiprintf_r+0x1b2>
 8003ab2:	9b03      	ldr	r3, [sp, #12]
 8003ab4:	3307      	adds	r3, #7
 8003ab6:	f023 0307 	bic.w	r3, r3, #7
 8003aba:	3308      	adds	r3, #8
 8003abc:	9303      	str	r3, [sp, #12]
 8003abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ac0:	4433      	add	r3, r6
 8003ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ac4:	e767      	b.n	8003996 <_svfiprintf_r+0x4e>
 8003ac6:	460c      	mov	r4, r1
 8003ac8:	2001      	movs	r0, #1
 8003aca:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ace:	e7a5      	b.n	8003a1c <_svfiprintf_r+0xd4>
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f04f 0c0a 	mov.w	ip, #10
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	3401      	adds	r4, #1
 8003ada:	9305      	str	r3, [sp, #20]
 8003adc:	4620      	mov	r0, r4
 8003ade:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ae2:	3a30      	subs	r2, #48	; 0x30
 8003ae4:	2a09      	cmp	r2, #9
 8003ae6:	d903      	bls.n	8003af0 <_svfiprintf_r+0x1a8>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0c5      	beq.n	8003a78 <_svfiprintf_r+0x130>
 8003aec:	9105      	str	r1, [sp, #20]
 8003aee:	e7c3      	b.n	8003a78 <_svfiprintf_r+0x130>
 8003af0:	4604      	mov	r4, r0
 8003af2:	2301      	movs	r3, #1
 8003af4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003af8:	e7f0      	b.n	8003adc <_svfiprintf_r+0x194>
 8003afa:	ab03      	add	r3, sp, #12
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	462a      	mov	r2, r5
 8003b00:	4638      	mov	r0, r7
 8003b02:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <_svfiprintf_r+0x1f8>)
 8003b04:	a904      	add	r1, sp, #16
 8003b06:	f3af 8000 	nop.w
 8003b0a:	1c42      	adds	r2, r0, #1
 8003b0c:	4606      	mov	r6, r0
 8003b0e:	d1d6      	bne.n	8003abe <_svfiprintf_r+0x176>
 8003b10:	89ab      	ldrh	r3, [r5, #12]
 8003b12:	065b      	lsls	r3, r3, #25
 8003b14:	f53f af2c 	bmi.w	8003970 <_svfiprintf_r+0x28>
 8003b18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b1a:	b01d      	add	sp, #116	; 0x74
 8003b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b20:	ab03      	add	r3, sp, #12
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	462a      	mov	r2, r5
 8003b26:	4638      	mov	r0, r7
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <_svfiprintf_r+0x1f8>)
 8003b2a:	a904      	add	r1, sp, #16
 8003b2c:	f000 f9d4 	bl	8003ed8 <_printf_i>
 8003b30:	e7eb      	b.n	8003b0a <_svfiprintf_r+0x1c2>
 8003b32:	bf00      	nop
 8003b34:	08004b2a 	.word	0x08004b2a
 8003b38:	08004b34 	.word	0x08004b34
 8003b3c:	00000000 	.word	0x00000000
 8003b40:	08003891 	.word	0x08003891
 8003b44:	08004b30 	.word	0x08004b30

08003b48 <__sfputc_r>:
 8003b48:	6893      	ldr	r3, [r2, #8]
 8003b4a:	b410      	push	{r4}
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	6093      	str	r3, [r2, #8]
 8003b52:	da07      	bge.n	8003b64 <__sfputc_r+0x1c>
 8003b54:	6994      	ldr	r4, [r2, #24]
 8003b56:	42a3      	cmp	r3, r4
 8003b58:	db01      	blt.n	8003b5e <__sfputc_r+0x16>
 8003b5a:	290a      	cmp	r1, #10
 8003b5c:	d102      	bne.n	8003b64 <__sfputc_r+0x1c>
 8003b5e:	bc10      	pop	{r4}
 8003b60:	f000 baf0 	b.w	8004144 <__swbuf_r>
 8003b64:	6813      	ldr	r3, [r2, #0]
 8003b66:	1c58      	adds	r0, r3, #1
 8003b68:	6010      	str	r0, [r2, #0]
 8003b6a:	7019      	strb	r1, [r3, #0]
 8003b6c:	4608      	mov	r0, r1
 8003b6e:	bc10      	pop	{r4}
 8003b70:	4770      	bx	lr

08003b72 <__sfputs_r>:
 8003b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b74:	4606      	mov	r6, r0
 8003b76:	460f      	mov	r7, r1
 8003b78:	4614      	mov	r4, r2
 8003b7a:	18d5      	adds	r5, r2, r3
 8003b7c:	42ac      	cmp	r4, r5
 8003b7e:	d101      	bne.n	8003b84 <__sfputs_r+0x12>
 8003b80:	2000      	movs	r0, #0
 8003b82:	e007      	b.n	8003b94 <__sfputs_r+0x22>
 8003b84:	463a      	mov	r2, r7
 8003b86:	4630      	mov	r0, r6
 8003b88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b8c:	f7ff ffdc 	bl	8003b48 <__sfputc_r>
 8003b90:	1c43      	adds	r3, r0, #1
 8003b92:	d1f3      	bne.n	8003b7c <__sfputs_r+0xa>
 8003b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003b98 <_vfiprintf_r>:
 8003b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b9c:	460d      	mov	r5, r1
 8003b9e:	4614      	mov	r4, r2
 8003ba0:	4698      	mov	r8, r3
 8003ba2:	4606      	mov	r6, r0
 8003ba4:	b09d      	sub	sp, #116	; 0x74
 8003ba6:	b118      	cbz	r0, 8003bb0 <_vfiprintf_r+0x18>
 8003ba8:	6983      	ldr	r3, [r0, #24]
 8003baa:	b90b      	cbnz	r3, 8003bb0 <_vfiprintf_r+0x18>
 8003bac:	f000 fcac 	bl	8004508 <__sinit>
 8003bb0:	4b89      	ldr	r3, [pc, #548]	; (8003dd8 <_vfiprintf_r+0x240>)
 8003bb2:	429d      	cmp	r5, r3
 8003bb4:	d11b      	bne.n	8003bee <_vfiprintf_r+0x56>
 8003bb6:	6875      	ldr	r5, [r6, #4]
 8003bb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003bba:	07d9      	lsls	r1, r3, #31
 8003bbc:	d405      	bmi.n	8003bca <_vfiprintf_r+0x32>
 8003bbe:	89ab      	ldrh	r3, [r5, #12]
 8003bc0:	059a      	lsls	r2, r3, #22
 8003bc2:	d402      	bmi.n	8003bca <_vfiprintf_r+0x32>
 8003bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003bc6:	f000 fd3d 	bl	8004644 <__retarget_lock_acquire_recursive>
 8003bca:	89ab      	ldrh	r3, [r5, #12]
 8003bcc:	071b      	lsls	r3, r3, #28
 8003bce:	d501      	bpl.n	8003bd4 <_vfiprintf_r+0x3c>
 8003bd0:	692b      	ldr	r3, [r5, #16]
 8003bd2:	b9eb      	cbnz	r3, 8003c10 <_vfiprintf_r+0x78>
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	4630      	mov	r0, r6
 8003bd8:	f000 fb06 	bl	80041e8 <__swsetup_r>
 8003bdc:	b1c0      	cbz	r0, 8003c10 <_vfiprintf_r+0x78>
 8003bde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003be0:	07dc      	lsls	r4, r3, #31
 8003be2:	d50e      	bpl.n	8003c02 <_vfiprintf_r+0x6a>
 8003be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003be8:	b01d      	add	sp, #116	; 0x74
 8003bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bee:	4b7b      	ldr	r3, [pc, #492]	; (8003ddc <_vfiprintf_r+0x244>)
 8003bf0:	429d      	cmp	r5, r3
 8003bf2:	d101      	bne.n	8003bf8 <_vfiprintf_r+0x60>
 8003bf4:	68b5      	ldr	r5, [r6, #8]
 8003bf6:	e7df      	b.n	8003bb8 <_vfiprintf_r+0x20>
 8003bf8:	4b79      	ldr	r3, [pc, #484]	; (8003de0 <_vfiprintf_r+0x248>)
 8003bfa:	429d      	cmp	r5, r3
 8003bfc:	bf08      	it	eq
 8003bfe:	68f5      	ldreq	r5, [r6, #12]
 8003c00:	e7da      	b.n	8003bb8 <_vfiprintf_r+0x20>
 8003c02:	89ab      	ldrh	r3, [r5, #12]
 8003c04:	0598      	lsls	r0, r3, #22
 8003c06:	d4ed      	bmi.n	8003be4 <_vfiprintf_r+0x4c>
 8003c08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003c0a:	f000 fd1c 	bl	8004646 <__retarget_lock_release_recursive>
 8003c0e:	e7e9      	b.n	8003be4 <_vfiprintf_r+0x4c>
 8003c10:	2300      	movs	r3, #0
 8003c12:	9309      	str	r3, [sp, #36]	; 0x24
 8003c14:	2320      	movs	r3, #32
 8003c16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c1a:	2330      	movs	r3, #48	; 0x30
 8003c1c:	f04f 0901 	mov.w	r9, #1
 8003c20:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c24:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003de4 <_vfiprintf_r+0x24c>
 8003c28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c2c:	4623      	mov	r3, r4
 8003c2e:	469a      	mov	sl, r3
 8003c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c34:	b10a      	cbz	r2, 8003c3a <_vfiprintf_r+0xa2>
 8003c36:	2a25      	cmp	r2, #37	; 0x25
 8003c38:	d1f9      	bne.n	8003c2e <_vfiprintf_r+0x96>
 8003c3a:	ebba 0b04 	subs.w	fp, sl, r4
 8003c3e:	d00b      	beq.n	8003c58 <_vfiprintf_r+0xc0>
 8003c40:	465b      	mov	r3, fp
 8003c42:	4622      	mov	r2, r4
 8003c44:	4629      	mov	r1, r5
 8003c46:	4630      	mov	r0, r6
 8003c48:	f7ff ff93 	bl	8003b72 <__sfputs_r>
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	f000 80aa 	beq.w	8003da6 <_vfiprintf_r+0x20e>
 8003c52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c54:	445a      	add	r2, fp
 8003c56:	9209      	str	r2, [sp, #36]	; 0x24
 8003c58:	f89a 3000 	ldrb.w	r3, [sl]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80a2 	beq.w	8003da6 <_vfiprintf_r+0x20e>
 8003c62:	2300      	movs	r3, #0
 8003c64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c6c:	f10a 0a01 	add.w	sl, sl, #1
 8003c70:	9304      	str	r3, [sp, #16]
 8003c72:	9307      	str	r3, [sp, #28]
 8003c74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c78:	931a      	str	r3, [sp, #104]	; 0x68
 8003c7a:	4654      	mov	r4, sl
 8003c7c:	2205      	movs	r2, #5
 8003c7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c82:	4858      	ldr	r0, [pc, #352]	; (8003de4 <_vfiprintf_r+0x24c>)
 8003c84:	f000 fd44 	bl	8004710 <memchr>
 8003c88:	9a04      	ldr	r2, [sp, #16]
 8003c8a:	b9d8      	cbnz	r0, 8003cc4 <_vfiprintf_r+0x12c>
 8003c8c:	06d1      	lsls	r1, r2, #27
 8003c8e:	bf44      	itt	mi
 8003c90:	2320      	movmi	r3, #32
 8003c92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003c96:	0713      	lsls	r3, r2, #28
 8003c98:	bf44      	itt	mi
 8003c9a:	232b      	movmi	r3, #43	; 0x2b
 8003c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8003ca6:	d015      	beq.n	8003cd4 <_vfiprintf_r+0x13c>
 8003ca8:	4654      	mov	r4, sl
 8003caa:	2000      	movs	r0, #0
 8003cac:	f04f 0c0a 	mov.w	ip, #10
 8003cb0:	9a07      	ldr	r2, [sp, #28]
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cb8:	3b30      	subs	r3, #48	; 0x30
 8003cba:	2b09      	cmp	r3, #9
 8003cbc:	d94e      	bls.n	8003d5c <_vfiprintf_r+0x1c4>
 8003cbe:	b1b0      	cbz	r0, 8003cee <_vfiprintf_r+0x156>
 8003cc0:	9207      	str	r2, [sp, #28]
 8003cc2:	e014      	b.n	8003cee <_vfiprintf_r+0x156>
 8003cc4:	eba0 0308 	sub.w	r3, r0, r8
 8003cc8:	fa09 f303 	lsl.w	r3, r9, r3
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	46a2      	mov	sl, r4
 8003cd0:	9304      	str	r3, [sp, #16]
 8003cd2:	e7d2      	b.n	8003c7a <_vfiprintf_r+0xe2>
 8003cd4:	9b03      	ldr	r3, [sp, #12]
 8003cd6:	1d19      	adds	r1, r3, #4
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	9103      	str	r1, [sp, #12]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bfbb      	ittet	lt
 8003ce0:	425b      	neglt	r3, r3
 8003ce2:	f042 0202 	orrlt.w	r2, r2, #2
 8003ce6:	9307      	strge	r3, [sp, #28]
 8003ce8:	9307      	strlt	r3, [sp, #28]
 8003cea:	bfb8      	it	lt
 8003cec:	9204      	strlt	r2, [sp, #16]
 8003cee:	7823      	ldrb	r3, [r4, #0]
 8003cf0:	2b2e      	cmp	r3, #46	; 0x2e
 8003cf2:	d10c      	bne.n	8003d0e <_vfiprintf_r+0x176>
 8003cf4:	7863      	ldrb	r3, [r4, #1]
 8003cf6:	2b2a      	cmp	r3, #42	; 0x2a
 8003cf8:	d135      	bne.n	8003d66 <_vfiprintf_r+0x1ce>
 8003cfa:	9b03      	ldr	r3, [sp, #12]
 8003cfc:	3402      	adds	r4, #2
 8003cfe:	1d1a      	adds	r2, r3, #4
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	9203      	str	r2, [sp, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	bfb8      	it	lt
 8003d08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003d0c:	9305      	str	r3, [sp, #20]
 8003d0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003df4 <_vfiprintf_r+0x25c>
 8003d12:	2203      	movs	r2, #3
 8003d14:	4650      	mov	r0, sl
 8003d16:	7821      	ldrb	r1, [r4, #0]
 8003d18:	f000 fcfa 	bl	8004710 <memchr>
 8003d1c:	b140      	cbz	r0, 8003d30 <_vfiprintf_r+0x198>
 8003d1e:	2340      	movs	r3, #64	; 0x40
 8003d20:	eba0 000a 	sub.w	r0, r0, sl
 8003d24:	fa03 f000 	lsl.w	r0, r3, r0
 8003d28:	9b04      	ldr	r3, [sp, #16]
 8003d2a:	3401      	adds	r4, #1
 8003d2c:	4303      	orrs	r3, r0
 8003d2e:	9304      	str	r3, [sp, #16]
 8003d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d34:	2206      	movs	r2, #6
 8003d36:	482c      	ldr	r0, [pc, #176]	; (8003de8 <_vfiprintf_r+0x250>)
 8003d38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d3c:	f000 fce8 	bl	8004710 <memchr>
 8003d40:	2800      	cmp	r0, #0
 8003d42:	d03f      	beq.n	8003dc4 <_vfiprintf_r+0x22c>
 8003d44:	4b29      	ldr	r3, [pc, #164]	; (8003dec <_vfiprintf_r+0x254>)
 8003d46:	bb1b      	cbnz	r3, 8003d90 <_vfiprintf_r+0x1f8>
 8003d48:	9b03      	ldr	r3, [sp, #12]
 8003d4a:	3307      	adds	r3, #7
 8003d4c:	f023 0307 	bic.w	r3, r3, #7
 8003d50:	3308      	adds	r3, #8
 8003d52:	9303      	str	r3, [sp, #12]
 8003d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d56:	443b      	add	r3, r7
 8003d58:	9309      	str	r3, [sp, #36]	; 0x24
 8003d5a:	e767      	b.n	8003c2c <_vfiprintf_r+0x94>
 8003d5c:	460c      	mov	r4, r1
 8003d5e:	2001      	movs	r0, #1
 8003d60:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d64:	e7a5      	b.n	8003cb2 <_vfiprintf_r+0x11a>
 8003d66:	2300      	movs	r3, #0
 8003d68:	f04f 0c0a 	mov.w	ip, #10
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	3401      	adds	r4, #1
 8003d70:	9305      	str	r3, [sp, #20]
 8003d72:	4620      	mov	r0, r4
 8003d74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d78:	3a30      	subs	r2, #48	; 0x30
 8003d7a:	2a09      	cmp	r2, #9
 8003d7c:	d903      	bls.n	8003d86 <_vfiprintf_r+0x1ee>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d0c5      	beq.n	8003d0e <_vfiprintf_r+0x176>
 8003d82:	9105      	str	r1, [sp, #20]
 8003d84:	e7c3      	b.n	8003d0e <_vfiprintf_r+0x176>
 8003d86:	4604      	mov	r4, r0
 8003d88:	2301      	movs	r3, #1
 8003d8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d8e:	e7f0      	b.n	8003d72 <_vfiprintf_r+0x1da>
 8003d90:	ab03      	add	r3, sp, #12
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	462a      	mov	r2, r5
 8003d96:	4630      	mov	r0, r6
 8003d98:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <_vfiprintf_r+0x258>)
 8003d9a:	a904      	add	r1, sp, #16
 8003d9c:	f3af 8000 	nop.w
 8003da0:	4607      	mov	r7, r0
 8003da2:	1c78      	adds	r0, r7, #1
 8003da4:	d1d6      	bne.n	8003d54 <_vfiprintf_r+0x1bc>
 8003da6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003da8:	07d9      	lsls	r1, r3, #31
 8003daa:	d405      	bmi.n	8003db8 <_vfiprintf_r+0x220>
 8003dac:	89ab      	ldrh	r3, [r5, #12]
 8003dae:	059a      	lsls	r2, r3, #22
 8003db0:	d402      	bmi.n	8003db8 <_vfiprintf_r+0x220>
 8003db2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003db4:	f000 fc47 	bl	8004646 <__retarget_lock_release_recursive>
 8003db8:	89ab      	ldrh	r3, [r5, #12]
 8003dba:	065b      	lsls	r3, r3, #25
 8003dbc:	f53f af12 	bmi.w	8003be4 <_vfiprintf_r+0x4c>
 8003dc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003dc2:	e711      	b.n	8003be8 <_vfiprintf_r+0x50>
 8003dc4:	ab03      	add	r3, sp, #12
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	462a      	mov	r2, r5
 8003dca:	4630      	mov	r0, r6
 8003dcc:	4b08      	ldr	r3, [pc, #32]	; (8003df0 <_vfiprintf_r+0x258>)
 8003dce:	a904      	add	r1, sp, #16
 8003dd0:	f000 f882 	bl	8003ed8 <_printf_i>
 8003dd4:	e7e4      	b.n	8003da0 <_vfiprintf_r+0x208>
 8003dd6:	bf00      	nop
 8003dd8:	08004b80 	.word	0x08004b80
 8003ddc:	08004ba0 	.word	0x08004ba0
 8003de0:	08004b60 	.word	0x08004b60
 8003de4:	08004b2a 	.word	0x08004b2a
 8003de8:	08004b34 	.word	0x08004b34
 8003dec:	00000000 	.word	0x00000000
 8003df0:	08003b73 	.word	0x08003b73
 8003df4:	08004b30 	.word	0x08004b30

08003df8 <_printf_common>:
 8003df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dfc:	4616      	mov	r6, r2
 8003dfe:	4699      	mov	r9, r3
 8003e00:	688a      	ldr	r2, [r1, #8]
 8003e02:	690b      	ldr	r3, [r1, #16]
 8003e04:	4607      	mov	r7, r0
 8003e06:	4293      	cmp	r3, r2
 8003e08:	bfb8      	it	lt
 8003e0a:	4613      	movlt	r3, r2
 8003e0c:	6033      	str	r3, [r6, #0]
 8003e0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e12:	460c      	mov	r4, r1
 8003e14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e18:	b10a      	cbz	r2, 8003e1e <_printf_common+0x26>
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	6033      	str	r3, [r6, #0]
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	0699      	lsls	r1, r3, #26
 8003e22:	bf42      	ittt	mi
 8003e24:	6833      	ldrmi	r3, [r6, #0]
 8003e26:	3302      	addmi	r3, #2
 8003e28:	6033      	strmi	r3, [r6, #0]
 8003e2a:	6825      	ldr	r5, [r4, #0]
 8003e2c:	f015 0506 	ands.w	r5, r5, #6
 8003e30:	d106      	bne.n	8003e40 <_printf_common+0x48>
 8003e32:	f104 0a19 	add.w	sl, r4, #25
 8003e36:	68e3      	ldr	r3, [r4, #12]
 8003e38:	6832      	ldr	r2, [r6, #0]
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	42ab      	cmp	r3, r5
 8003e3e:	dc28      	bgt.n	8003e92 <_printf_common+0x9a>
 8003e40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e44:	1e13      	subs	r3, r2, #0
 8003e46:	6822      	ldr	r2, [r4, #0]
 8003e48:	bf18      	it	ne
 8003e4a:	2301      	movne	r3, #1
 8003e4c:	0692      	lsls	r2, r2, #26
 8003e4e:	d42d      	bmi.n	8003eac <_printf_common+0xb4>
 8003e50:	4649      	mov	r1, r9
 8003e52:	4638      	mov	r0, r7
 8003e54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e58:	47c0      	blx	r8
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	d020      	beq.n	8003ea0 <_printf_common+0xa8>
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	68e5      	ldr	r5, [r4, #12]
 8003e62:	f003 0306 	and.w	r3, r3, #6
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	bf18      	it	ne
 8003e6a:	2500      	movne	r5, #0
 8003e6c:	6832      	ldr	r2, [r6, #0]
 8003e6e:	f04f 0600 	mov.w	r6, #0
 8003e72:	68a3      	ldr	r3, [r4, #8]
 8003e74:	bf08      	it	eq
 8003e76:	1aad      	subeq	r5, r5, r2
 8003e78:	6922      	ldr	r2, [r4, #16]
 8003e7a:	bf08      	it	eq
 8003e7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e80:	4293      	cmp	r3, r2
 8003e82:	bfc4      	itt	gt
 8003e84:	1a9b      	subgt	r3, r3, r2
 8003e86:	18ed      	addgt	r5, r5, r3
 8003e88:	341a      	adds	r4, #26
 8003e8a:	42b5      	cmp	r5, r6
 8003e8c:	d11a      	bne.n	8003ec4 <_printf_common+0xcc>
 8003e8e:	2000      	movs	r0, #0
 8003e90:	e008      	b.n	8003ea4 <_printf_common+0xac>
 8003e92:	2301      	movs	r3, #1
 8003e94:	4652      	mov	r2, sl
 8003e96:	4649      	mov	r1, r9
 8003e98:	4638      	mov	r0, r7
 8003e9a:	47c0      	blx	r8
 8003e9c:	3001      	adds	r0, #1
 8003e9e:	d103      	bne.n	8003ea8 <_printf_common+0xb0>
 8003ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea8:	3501      	adds	r5, #1
 8003eaa:	e7c4      	b.n	8003e36 <_printf_common+0x3e>
 8003eac:	2030      	movs	r0, #48	; 0x30
 8003eae:	18e1      	adds	r1, r4, r3
 8003eb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003eb4:	1c5a      	adds	r2, r3, #1
 8003eb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003eba:	4422      	add	r2, r4
 8003ebc:	3302      	adds	r3, #2
 8003ebe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ec2:	e7c5      	b.n	8003e50 <_printf_common+0x58>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	4622      	mov	r2, r4
 8003ec8:	4649      	mov	r1, r9
 8003eca:	4638      	mov	r0, r7
 8003ecc:	47c0      	blx	r8
 8003ece:	3001      	adds	r0, #1
 8003ed0:	d0e6      	beq.n	8003ea0 <_printf_common+0xa8>
 8003ed2:	3601      	adds	r6, #1
 8003ed4:	e7d9      	b.n	8003e8a <_printf_common+0x92>
	...

08003ed8 <_printf_i>:
 8003ed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003edc:	460c      	mov	r4, r1
 8003ede:	7e27      	ldrb	r7, [r4, #24]
 8003ee0:	4691      	mov	r9, r2
 8003ee2:	2f78      	cmp	r7, #120	; 0x78
 8003ee4:	4680      	mov	r8, r0
 8003ee6:	469a      	mov	sl, r3
 8003ee8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003eea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003eee:	d807      	bhi.n	8003f00 <_printf_i+0x28>
 8003ef0:	2f62      	cmp	r7, #98	; 0x62
 8003ef2:	d80a      	bhi.n	8003f0a <_printf_i+0x32>
 8003ef4:	2f00      	cmp	r7, #0
 8003ef6:	f000 80d9 	beq.w	80040ac <_printf_i+0x1d4>
 8003efa:	2f58      	cmp	r7, #88	; 0x58
 8003efc:	f000 80a4 	beq.w	8004048 <_printf_i+0x170>
 8003f00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003f08:	e03a      	b.n	8003f80 <_printf_i+0xa8>
 8003f0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003f0e:	2b15      	cmp	r3, #21
 8003f10:	d8f6      	bhi.n	8003f00 <_printf_i+0x28>
 8003f12:	a001      	add	r0, pc, #4	; (adr r0, 8003f18 <_printf_i+0x40>)
 8003f14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003f18:	08003f71 	.word	0x08003f71
 8003f1c:	08003f85 	.word	0x08003f85
 8003f20:	08003f01 	.word	0x08003f01
 8003f24:	08003f01 	.word	0x08003f01
 8003f28:	08003f01 	.word	0x08003f01
 8003f2c:	08003f01 	.word	0x08003f01
 8003f30:	08003f85 	.word	0x08003f85
 8003f34:	08003f01 	.word	0x08003f01
 8003f38:	08003f01 	.word	0x08003f01
 8003f3c:	08003f01 	.word	0x08003f01
 8003f40:	08003f01 	.word	0x08003f01
 8003f44:	08004093 	.word	0x08004093
 8003f48:	08003fb5 	.word	0x08003fb5
 8003f4c:	08004075 	.word	0x08004075
 8003f50:	08003f01 	.word	0x08003f01
 8003f54:	08003f01 	.word	0x08003f01
 8003f58:	080040b5 	.word	0x080040b5
 8003f5c:	08003f01 	.word	0x08003f01
 8003f60:	08003fb5 	.word	0x08003fb5
 8003f64:	08003f01 	.word	0x08003f01
 8003f68:	08003f01 	.word	0x08003f01
 8003f6c:	0800407d 	.word	0x0800407d
 8003f70:	680b      	ldr	r3, [r1, #0]
 8003f72:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f76:	1d1a      	adds	r2, r3, #4
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	600a      	str	r2, [r1, #0]
 8003f7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0a4      	b.n	80040ce <_printf_i+0x1f6>
 8003f84:	6825      	ldr	r5, [r4, #0]
 8003f86:	6808      	ldr	r0, [r1, #0]
 8003f88:	062e      	lsls	r6, r5, #24
 8003f8a:	f100 0304 	add.w	r3, r0, #4
 8003f8e:	d50a      	bpl.n	8003fa6 <_printf_i+0xce>
 8003f90:	6805      	ldr	r5, [r0, #0]
 8003f92:	600b      	str	r3, [r1, #0]
 8003f94:	2d00      	cmp	r5, #0
 8003f96:	da03      	bge.n	8003fa0 <_printf_i+0xc8>
 8003f98:	232d      	movs	r3, #45	; 0x2d
 8003f9a:	426d      	negs	r5, r5
 8003f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fa0:	230a      	movs	r3, #10
 8003fa2:	485e      	ldr	r0, [pc, #376]	; (800411c <_printf_i+0x244>)
 8003fa4:	e019      	b.n	8003fda <_printf_i+0x102>
 8003fa6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003faa:	6805      	ldr	r5, [r0, #0]
 8003fac:	600b      	str	r3, [r1, #0]
 8003fae:	bf18      	it	ne
 8003fb0:	b22d      	sxthne	r5, r5
 8003fb2:	e7ef      	b.n	8003f94 <_printf_i+0xbc>
 8003fb4:	680b      	ldr	r3, [r1, #0]
 8003fb6:	6825      	ldr	r5, [r4, #0]
 8003fb8:	1d18      	adds	r0, r3, #4
 8003fba:	6008      	str	r0, [r1, #0]
 8003fbc:	0628      	lsls	r0, r5, #24
 8003fbe:	d501      	bpl.n	8003fc4 <_printf_i+0xec>
 8003fc0:	681d      	ldr	r5, [r3, #0]
 8003fc2:	e002      	b.n	8003fca <_printf_i+0xf2>
 8003fc4:	0669      	lsls	r1, r5, #25
 8003fc6:	d5fb      	bpl.n	8003fc0 <_printf_i+0xe8>
 8003fc8:	881d      	ldrh	r5, [r3, #0]
 8003fca:	2f6f      	cmp	r7, #111	; 0x6f
 8003fcc:	bf0c      	ite	eq
 8003fce:	2308      	moveq	r3, #8
 8003fd0:	230a      	movne	r3, #10
 8003fd2:	4852      	ldr	r0, [pc, #328]	; (800411c <_printf_i+0x244>)
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fda:	6866      	ldr	r6, [r4, #4]
 8003fdc:	2e00      	cmp	r6, #0
 8003fde:	bfa8      	it	ge
 8003fe0:	6821      	ldrge	r1, [r4, #0]
 8003fe2:	60a6      	str	r6, [r4, #8]
 8003fe4:	bfa4      	itt	ge
 8003fe6:	f021 0104 	bicge.w	r1, r1, #4
 8003fea:	6021      	strge	r1, [r4, #0]
 8003fec:	b90d      	cbnz	r5, 8003ff2 <_printf_i+0x11a>
 8003fee:	2e00      	cmp	r6, #0
 8003ff0:	d04d      	beq.n	800408e <_printf_i+0x1b6>
 8003ff2:	4616      	mov	r6, r2
 8003ff4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003ff8:	fb03 5711 	mls	r7, r3, r1, r5
 8003ffc:	5dc7      	ldrb	r7, [r0, r7]
 8003ffe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004002:	462f      	mov	r7, r5
 8004004:	42bb      	cmp	r3, r7
 8004006:	460d      	mov	r5, r1
 8004008:	d9f4      	bls.n	8003ff4 <_printf_i+0x11c>
 800400a:	2b08      	cmp	r3, #8
 800400c:	d10b      	bne.n	8004026 <_printf_i+0x14e>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	07df      	lsls	r7, r3, #31
 8004012:	d508      	bpl.n	8004026 <_printf_i+0x14e>
 8004014:	6923      	ldr	r3, [r4, #16]
 8004016:	6861      	ldr	r1, [r4, #4]
 8004018:	4299      	cmp	r1, r3
 800401a:	bfde      	ittt	le
 800401c:	2330      	movle	r3, #48	; 0x30
 800401e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004022:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004026:	1b92      	subs	r2, r2, r6
 8004028:	6122      	str	r2, [r4, #16]
 800402a:	464b      	mov	r3, r9
 800402c:	4621      	mov	r1, r4
 800402e:	4640      	mov	r0, r8
 8004030:	f8cd a000 	str.w	sl, [sp]
 8004034:	aa03      	add	r2, sp, #12
 8004036:	f7ff fedf 	bl	8003df8 <_printf_common>
 800403a:	3001      	adds	r0, #1
 800403c:	d14c      	bne.n	80040d8 <_printf_i+0x200>
 800403e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004042:	b004      	add	sp, #16
 8004044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004048:	4834      	ldr	r0, [pc, #208]	; (800411c <_printf_i+0x244>)
 800404a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800404e:	680e      	ldr	r6, [r1, #0]
 8004050:	6823      	ldr	r3, [r4, #0]
 8004052:	f856 5b04 	ldr.w	r5, [r6], #4
 8004056:	061f      	lsls	r7, r3, #24
 8004058:	600e      	str	r6, [r1, #0]
 800405a:	d514      	bpl.n	8004086 <_printf_i+0x1ae>
 800405c:	07d9      	lsls	r1, r3, #31
 800405e:	bf44      	itt	mi
 8004060:	f043 0320 	orrmi.w	r3, r3, #32
 8004064:	6023      	strmi	r3, [r4, #0]
 8004066:	b91d      	cbnz	r5, 8004070 <_printf_i+0x198>
 8004068:	6823      	ldr	r3, [r4, #0]
 800406a:	f023 0320 	bic.w	r3, r3, #32
 800406e:	6023      	str	r3, [r4, #0]
 8004070:	2310      	movs	r3, #16
 8004072:	e7af      	b.n	8003fd4 <_printf_i+0xfc>
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	f043 0320 	orr.w	r3, r3, #32
 800407a:	6023      	str	r3, [r4, #0]
 800407c:	2378      	movs	r3, #120	; 0x78
 800407e:	4828      	ldr	r0, [pc, #160]	; (8004120 <_printf_i+0x248>)
 8004080:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004084:	e7e3      	b.n	800404e <_printf_i+0x176>
 8004086:	065e      	lsls	r6, r3, #25
 8004088:	bf48      	it	mi
 800408a:	b2ad      	uxthmi	r5, r5
 800408c:	e7e6      	b.n	800405c <_printf_i+0x184>
 800408e:	4616      	mov	r6, r2
 8004090:	e7bb      	b.n	800400a <_printf_i+0x132>
 8004092:	680b      	ldr	r3, [r1, #0]
 8004094:	6826      	ldr	r6, [r4, #0]
 8004096:	1d1d      	adds	r5, r3, #4
 8004098:	6960      	ldr	r0, [r4, #20]
 800409a:	600d      	str	r5, [r1, #0]
 800409c:	0635      	lsls	r5, r6, #24
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	d501      	bpl.n	80040a6 <_printf_i+0x1ce>
 80040a2:	6018      	str	r0, [r3, #0]
 80040a4:	e002      	b.n	80040ac <_printf_i+0x1d4>
 80040a6:	0671      	lsls	r1, r6, #25
 80040a8:	d5fb      	bpl.n	80040a2 <_printf_i+0x1ca>
 80040aa:	8018      	strh	r0, [r3, #0]
 80040ac:	2300      	movs	r3, #0
 80040ae:	4616      	mov	r6, r2
 80040b0:	6123      	str	r3, [r4, #16]
 80040b2:	e7ba      	b.n	800402a <_printf_i+0x152>
 80040b4:	680b      	ldr	r3, [r1, #0]
 80040b6:	1d1a      	adds	r2, r3, #4
 80040b8:	600a      	str	r2, [r1, #0]
 80040ba:	681e      	ldr	r6, [r3, #0]
 80040bc:	2100      	movs	r1, #0
 80040be:	4630      	mov	r0, r6
 80040c0:	6862      	ldr	r2, [r4, #4]
 80040c2:	f000 fb25 	bl	8004710 <memchr>
 80040c6:	b108      	cbz	r0, 80040cc <_printf_i+0x1f4>
 80040c8:	1b80      	subs	r0, r0, r6
 80040ca:	6060      	str	r0, [r4, #4]
 80040cc:	6863      	ldr	r3, [r4, #4]
 80040ce:	6123      	str	r3, [r4, #16]
 80040d0:	2300      	movs	r3, #0
 80040d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040d6:	e7a8      	b.n	800402a <_printf_i+0x152>
 80040d8:	4632      	mov	r2, r6
 80040da:	4649      	mov	r1, r9
 80040dc:	4640      	mov	r0, r8
 80040de:	6923      	ldr	r3, [r4, #16]
 80040e0:	47d0      	blx	sl
 80040e2:	3001      	adds	r0, #1
 80040e4:	d0ab      	beq.n	800403e <_printf_i+0x166>
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	079b      	lsls	r3, r3, #30
 80040ea:	d413      	bmi.n	8004114 <_printf_i+0x23c>
 80040ec:	68e0      	ldr	r0, [r4, #12]
 80040ee:	9b03      	ldr	r3, [sp, #12]
 80040f0:	4298      	cmp	r0, r3
 80040f2:	bfb8      	it	lt
 80040f4:	4618      	movlt	r0, r3
 80040f6:	e7a4      	b.n	8004042 <_printf_i+0x16a>
 80040f8:	2301      	movs	r3, #1
 80040fa:	4632      	mov	r2, r6
 80040fc:	4649      	mov	r1, r9
 80040fe:	4640      	mov	r0, r8
 8004100:	47d0      	blx	sl
 8004102:	3001      	adds	r0, #1
 8004104:	d09b      	beq.n	800403e <_printf_i+0x166>
 8004106:	3501      	adds	r5, #1
 8004108:	68e3      	ldr	r3, [r4, #12]
 800410a:	9903      	ldr	r1, [sp, #12]
 800410c:	1a5b      	subs	r3, r3, r1
 800410e:	42ab      	cmp	r3, r5
 8004110:	dcf2      	bgt.n	80040f8 <_printf_i+0x220>
 8004112:	e7eb      	b.n	80040ec <_printf_i+0x214>
 8004114:	2500      	movs	r5, #0
 8004116:	f104 0619 	add.w	r6, r4, #25
 800411a:	e7f5      	b.n	8004108 <_printf_i+0x230>
 800411c:	08004b3b 	.word	0x08004b3b
 8004120:	08004b4c 	.word	0x08004b4c

08004124 <_sbrk_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	2300      	movs	r3, #0
 8004128:	4d05      	ldr	r5, [pc, #20]	; (8004140 <_sbrk_r+0x1c>)
 800412a:	4604      	mov	r4, r0
 800412c:	4608      	mov	r0, r1
 800412e:	602b      	str	r3, [r5, #0]
 8004130:	f7fc fc74 	bl	8000a1c <_sbrk>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d102      	bne.n	800413e <_sbrk_r+0x1a>
 8004138:	682b      	ldr	r3, [r5, #0]
 800413a:	b103      	cbz	r3, 800413e <_sbrk_r+0x1a>
 800413c:	6023      	str	r3, [r4, #0]
 800413e:	bd38      	pop	{r3, r4, r5, pc}
 8004140:	20001280 	.word	0x20001280

08004144 <__swbuf_r>:
 8004144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004146:	460e      	mov	r6, r1
 8004148:	4614      	mov	r4, r2
 800414a:	4605      	mov	r5, r0
 800414c:	b118      	cbz	r0, 8004156 <__swbuf_r+0x12>
 800414e:	6983      	ldr	r3, [r0, #24]
 8004150:	b90b      	cbnz	r3, 8004156 <__swbuf_r+0x12>
 8004152:	f000 f9d9 	bl	8004508 <__sinit>
 8004156:	4b21      	ldr	r3, [pc, #132]	; (80041dc <__swbuf_r+0x98>)
 8004158:	429c      	cmp	r4, r3
 800415a:	d12b      	bne.n	80041b4 <__swbuf_r+0x70>
 800415c:	686c      	ldr	r4, [r5, #4]
 800415e:	69a3      	ldr	r3, [r4, #24]
 8004160:	60a3      	str	r3, [r4, #8]
 8004162:	89a3      	ldrh	r3, [r4, #12]
 8004164:	071a      	lsls	r2, r3, #28
 8004166:	d52f      	bpl.n	80041c8 <__swbuf_r+0x84>
 8004168:	6923      	ldr	r3, [r4, #16]
 800416a:	b36b      	cbz	r3, 80041c8 <__swbuf_r+0x84>
 800416c:	6923      	ldr	r3, [r4, #16]
 800416e:	6820      	ldr	r0, [r4, #0]
 8004170:	b2f6      	uxtb	r6, r6
 8004172:	1ac0      	subs	r0, r0, r3
 8004174:	6963      	ldr	r3, [r4, #20]
 8004176:	4637      	mov	r7, r6
 8004178:	4283      	cmp	r3, r0
 800417a:	dc04      	bgt.n	8004186 <__swbuf_r+0x42>
 800417c:	4621      	mov	r1, r4
 800417e:	4628      	mov	r0, r5
 8004180:	f000 f92e 	bl	80043e0 <_fflush_r>
 8004184:	bb30      	cbnz	r0, 80041d4 <__swbuf_r+0x90>
 8004186:	68a3      	ldr	r3, [r4, #8]
 8004188:	3001      	adds	r0, #1
 800418a:	3b01      	subs	r3, #1
 800418c:	60a3      	str	r3, [r4, #8]
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	6022      	str	r2, [r4, #0]
 8004194:	701e      	strb	r6, [r3, #0]
 8004196:	6963      	ldr	r3, [r4, #20]
 8004198:	4283      	cmp	r3, r0
 800419a:	d004      	beq.n	80041a6 <__swbuf_r+0x62>
 800419c:	89a3      	ldrh	r3, [r4, #12]
 800419e:	07db      	lsls	r3, r3, #31
 80041a0:	d506      	bpl.n	80041b0 <__swbuf_r+0x6c>
 80041a2:	2e0a      	cmp	r6, #10
 80041a4:	d104      	bne.n	80041b0 <__swbuf_r+0x6c>
 80041a6:	4621      	mov	r1, r4
 80041a8:	4628      	mov	r0, r5
 80041aa:	f000 f919 	bl	80043e0 <_fflush_r>
 80041ae:	b988      	cbnz	r0, 80041d4 <__swbuf_r+0x90>
 80041b0:	4638      	mov	r0, r7
 80041b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041b4:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <__swbuf_r+0x9c>)
 80041b6:	429c      	cmp	r4, r3
 80041b8:	d101      	bne.n	80041be <__swbuf_r+0x7a>
 80041ba:	68ac      	ldr	r4, [r5, #8]
 80041bc:	e7cf      	b.n	800415e <__swbuf_r+0x1a>
 80041be:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <__swbuf_r+0xa0>)
 80041c0:	429c      	cmp	r4, r3
 80041c2:	bf08      	it	eq
 80041c4:	68ec      	ldreq	r4, [r5, #12]
 80041c6:	e7ca      	b.n	800415e <__swbuf_r+0x1a>
 80041c8:	4621      	mov	r1, r4
 80041ca:	4628      	mov	r0, r5
 80041cc:	f000 f80c 	bl	80041e8 <__swsetup_r>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d0cb      	beq.n	800416c <__swbuf_r+0x28>
 80041d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80041d8:	e7ea      	b.n	80041b0 <__swbuf_r+0x6c>
 80041da:	bf00      	nop
 80041dc:	08004b80 	.word	0x08004b80
 80041e0:	08004ba0 	.word	0x08004ba0
 80041e4:	08004b60 	.word	0x08004b60

080041e8 <__swsetup_r>:
 80041e8:	4b32      	ldr	r3, [pc, #200]	; (80042b4 <__swsetup_r+0xcc>)
 80041ea:	b570      	push	{r4, r5, r6, lr}
 80041ec:	681d      	ldr	r5, [r3, #0]
 80041ee:	4606      	mov	r6, r0
 80041f0:	460c      	mov	r4, r1
 80041f2:	b125      	cbz	r5, 80041fe <__swsetup_r+0x16>
 80041f4:	69ab      	ldr	r3, [r5, #24]
 80041f6:	b913      	cbnz	r3, 80041fe <__swsetup_r+0x16>
 80041f8:	4628      	mov	r0, r5
 80041fa:	f000 f985 	bl	8004508 <__sinit>
 80041fe:	4b2e      	ldr	r3, [pc, #184]	; (80042b8 <__swsetup_r+0xd0>)
 8004200:	429c      	cmp	r4, r3
 8004202:	d10f      	bne.n	8004224 <__swsetup_r+0x3c>
 8004204:	686c      	ldr	r4, [r5, #4]
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800420c:	0719      	lsls	r1, r3, #28
 800420e:	d42c      	bmi.n	800426a <__swsetup_r+0x82>
 8004210:	06dd      	lsls	r5, r3, #27
 8004212:	d411      	bmi.n	8004238 <__swsetup_r+0x50>
 8004214:	2309      	movs	r3, #9
 8004216:	6033      	str	r3, [r6, #0]
 8004218:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800421c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004220:	81a3      	strh	r3, [r4, #12]
 8004222:	e03e      	b.n	80042a2 <__swsetup_r+0xba>
 8004224:	4b25      	ldr	r3, [pc, #148]	; (80042bc <__swsetup_r+0xd4>)
 8004226:	429c      	cmp	r4, r3
 8004228:	d101      	bne.n	800422e <__swsetup_r+0x46>
 800422a:	68ac      	ldr	r4, [r5, #8]
 800422c:	e7eb      	b.n	8004206 <__swsetup_r+0x1e>
 800422e:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <__swsetup_r+0xd8>)
 8004230:	429c      	cmp	r4, r3
 8004232:	bf08      	it	eq
 8004234:	68ec      	ldreq	r4, [r5, #12]
 8004236:	e7e6      	b.n	8004206 <__swsetup_r+0x1e>
 8004238:	0758      	lsls	r0, r3, #29
 800423a:	d512      	bpl.n	8004262 <__swsetup_r+0x7a>
 800423c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800423e:	b141      	cbz	r1, 8004252 <__swsetup_r+0x6a>
 8004240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004244:	4299      	cmp	r1, r3
 8004246:	d002      	beq.n	800424e <__swsetup_r+0x66>
 8004248:	4630      	mov	r0, r6
 800424a:	f7ff fa7b 	bl	8003744 <_free_r>
 800424e:	2300      	movs	r3, #0
 8004250:	6363      	str	r3, [r4, #52]	; 0x34
 8004252:	89a3      	ldrh	r3, [r4, #12]
 8004254:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004258:	81a3      	strh	r3, [r4, #12]
 800425a:	2300      	movs	r3, #0
 800425c:	6063      	str	r3, [r4, #4]
 800425e:	6923      	ldr	r3, [r4, #16]
 8004260:	6023      	str	r3, [r4, #0]
 8004262:	89a3      	ldrh	r3, [r4, #12]
 8004264:	f043 0308 	orr.w	r3, r3, #8
 8004268:	81a3      	strh	r3, [r4, #12]
 800426a:	6923      	ldr	r3, [r4, #16]
 800426c:	b94b      	cbnz	r3, 8004282 <__swsetup_r+0x9a>
 800426e:	89a3      	ldrh	r3, [r4, #12]
 8004270:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004274:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004278:	d003      	beq.n	8004282 <__swsetup_r+0x9a>
 800427a:	4621      	mov	r1, r4
 800427c:	4630      	mov	r0, r6
 800427e:	f000 fa07 	bl	8004690 <__smakebuf_r>
 8004282:	89a0      	ldrh	r0, [r4, #12]
 8004284:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004288:	f010 0301 	ands.w	r3, r0, #1
 800428c:	d00a      	beq.n	80042a4 <__swsetup_r+0xbc>
 800428e:	2300      	movs	r3, #0
 8004290:	60a3      	str	r3, [r4, #8]
 8004292:	6963      	ldr	r3, [r4, #20]
 8004294:	425b      	negs	r3, r3
 8004296:	61a3      	str	r3, [r4, #24]
 8004298:	6923      	ldr	r3, [r4, #16]
 800429a:	b943      	cbnz	r3, 80042ae <__swsetup_r+0xc6>
 800429c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80042a0:	d1ba      	bne.n	8004218 <__swsetup_r+0x30>
 80042a2:	bd70      	pop	{r4, r5, r6, pc}
 80042a4:	0781      	lsls	r1, r0, #30
 80042a6:	bf58      	it	pl
 80042a8:	6963      	ldrpl	r3, [r4, #20]
 80042aa:	60a3      	str	r3, [r4, #8]
 80042ac:	e7f4      	b.n	8004298 <__swsetup_r+0xb0>
 80042ae:	2000      	movs	r0, #0
 80042b0:	e7f7      	b.n	80042a2 <__swsetup_r+0xba>
 80042b2:	bf00      	nop
 80042b4:	20000018 	.word	0x20000018
 80042b8:	08004b80 	.word	0x08004b80
 80042bc:	08004ba0 	.word	0x08004ba0
 80042c0:	08004b60 	.word	0x08004b60

080042c4 <abort>:
 80042c4:	2006      	movs	r0, #6
 80042c6:	b508      	push	{r3, lr}
 80042c8:	f000 faa4 	bl	8004814 <raise>
 80042cc:	2001      	movs	r0, #1
 80042ce:	f7fc fb32 	bl	8000936 <_exit>
	...

080042d4 <__sflush_r>:
 80042d4:	898a      	ldrh	r2, [r1, #12]
 80042d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042da:	4605      	mov	r5, r0
 80042dc:	0710      	lsls	r0, r2, #28
 80042de:	460c      	mov	r4, r1
 80042e0:	d458      	bmi.n	8004394 <__sflush_r+0xc0>
 80042e2:	684b      	ldr	r3, [r1, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	dc05      	bgt.n	80042f4 <__sflush_r+0x20>
 80042e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	dc02      	bgt.n	80042f4 <__sflush_r+0x20>
 80042ee:	2000      	movs	r0, #0
 80042f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80042f6:	2e00      	cmp	r6, #0
 80042f8:	d0f9      	beq.n	80042ee <__sflush_r+0x1a>
 80042fa:	2300      	movs	r3, #0
 80042fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004300:	682f      	ldr	r7, [r5, #0]
 8004302:	602b      	str	r3, [r5, #0]
 8004304:	d032      	beq.n	800436c <__sflush_r+0x98>
 8004306:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004308:	89a3      	ldrh	r3, [r4, #12]
 800430a:	075a      	lsls	r2, r3, #29
 800430c:	d505      	bpl.n	800431a <__sflush_r+0x46>
 800430e:	6863      	ldr	r3, [r4, #4]
 8004310:	1ac0      	subs	r0, r0, r3
 8004312:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004314:	b10b      	cbz	r3, 800431a <__sflush_r+0x46>
 8004316:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004318:	1ac0      	subs	r0, r0, r3
 800431a:	2300      	movs	r3, #0
 800431c:	4602      	mov	r2, r0
 800431e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004320:	4628      	mov	r0, r5
 8004322:	6a21      	ldr	r1, [r4, #32]
 8004324:	47b0      	blx	r6
 8004326:	1c43      	adds	r3, r0, #1
 8004328:	89a3      	ldrh	r3, [r4, #12]
 800432a:	d106      	bne.n	800433a <__sflush_r+0x66>
 800432c:	6829      	ldr	r1, [r5, #0]
 800432e:	291d      	cmp	r1, #29
 8004330:	d82c      	bhi.n	800438c <__sflush_r+0xb8>
 8004332:	4a2a      	ldr	r2, [pc, #168]	; (80043dc <__sflush_r+0x108>)
 8004334:	40ca      	lsrs	r2, r1
 8004336:	07d6      	lsls	r6, r2, #31
 8004338:	d528      	bpl.n	800438c <__sflush_r+0xb8>
 800433a:	2200      	movs	r2, #0
 800433c:	6062      	str	r2, [r4, #4]
 800433e:	6922      	ldr	r2, [r4, #16]
 8004340:	04d9      	lsls	r1, r3, #19
 8004342:	6022      	str	r2, [r4, #0]
 8004344:	d504      	bpl.n	8004350 <__sflush_r+0x7c>
 8004346:	1c42      	adds	r2, r0, #1
 8004348:	d101      	bne.n	800434e <__sflush_r+0x7a>
 800434a:	682b      	ldr	r3, [r5, #0]
 800434c:	b903      	cbnz	r3, 8004350 <__sflush_r+0x7c>
 800434e:	6560      	str	r0, [r4, #84]	; 0x54
 8004350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004352:	602f      	str	r7, [r5, #0]
 8004354:	2900      	cmp	r1, #0
 8004356:	d0ca      	beq.n	80042ee <__sflush_r+0x1a>
 8004358:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800435c:	4299      	cmp	r1, r3
 800435e:	d002      	beq.n	8004366 <__sflush_r+0x92>
 8004360:	4628      	mov	r0, r5
 8004362:	f7ff f9ef 	bl	8003744 <_free_r>
 8004366:	2000      	movs	r0, #0
 8004368:	6360      	str	r0, [r4, #52]	; 0x34
 800436a:	e7c1      	b.n	80042f0 <__sflush_r+0x1c>
 800436c:	6a21      	ldr	r1, [r4, #32]
 800436e:	2301      	movs	r3, #1
 8004370:	4628      	mov	r0, r5
 8004372:	47b0      	blx	r6
 8004374:	1c41      	adds	r1, r0, #1
 8004376:	d1c7      	bne.n	8004308 <__sflush_r+0x34>
 8004378:	682b      	ldr	r3, [r5, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0c4      	beq.n	8004308 <__sflush_r+0x34>
 800437e:	2b1d      	cmp	r3, #29
 8004380:	d001      	beq.n	8004386 <__sflush_r+0xb2>
 8004382:	2b16      	cmp	r3, #22
 8004384:	d101      	bne.n	800438a <__sflush_r+0xb6>
 8004386:	602f      	str	r7, [r5, #0]
 8004388:	e7b1      	b.n	80042ee <__sflush_r+0x1a>
 800438a:	89a3      	ldrh	r3, [r4, #12]
 800438c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004390:	81a3      	strh	r3, [r4, #12]
 8004392:	e7ad      	b.n	80042f0 <__sflush_r+0x1c>
 8004394:	690f      	ldr	r7, [r1, #16]
 8004396:	2f00      	cmp	r7, #0
 8004398:	d0a9      	beq.n	80042ee <__sflush_r+0x1a>
 800439a:	0793      	lsls	r3, r2, #30
 800439c:	bf18      	it	ne
 800439e:	2300      	movne	r3, #0
 80043a0:	680e      	ldr	r6, [r1, #0]
 80043a2:	bf08      	it	eq
 80043a4:	694b      	ldreq	r3, [r1, #20]
 80043a6:	eba6 0807 	sub.w	r8, r6, r7
 80043aa:	600f      	str	r7, [r1, #0]
 80043ac:	608b      	str	r3, [r1, #8]
 80043ae:	f1b8 0f00 	cmp.w	r8, #0
 80043b2:	dd9c      	ble.n	80042ee <__sflush_r+0x1a>
 80043b4:	4643      	mov	r3, r8
 80043b6:	463a      	mov	r2, r7
 80043b8:	4628      	mov	r0, r5
 80043ba:	6a21      	ldr	r1, [r4, #32]
 80043bc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80043be:	47b0      	blx	r6
 80043c0:	2800      	cmp	r0, #0
 80043c2:	dc06      	bgt.n	80043d2 <__sflush_r+0xfe>
 80043c4:	89a3      	ldrh	r3, [r4, #12]
 80043c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043ce:	81a3      	strh	r3, [r4, #12]
 80043d0:	e78e      	b.n	80042f0 <__sflush_r+0x1c>
 80043d2:	4407      	add	r7, r0
 80043d4:	eba8 0800 	sub.w	r8, r8, r0
 80043d8:	e7e9      	b.n	80043ae <__sflush_r+0xda>
 80043da:	bf00      	nop
 80043dc:	20400001 	.word	0x20400001

080043e0 <_fflush_r>:
 80043e0:	b538      	push	{r3, r4, r5, lr}
 80043e2:	690b      	ldr	r3, [r1, #16]
 80043e4:	4605      	mov	r5, r0
 80043e6:	460c      	mov	r4, r1
 80043e8:	b913      	cbnz	r3, 80043f0 <_fflush_r+0x10>
 80043ea:	2500      	movs	r5, #0
 80043ec:	4628      	mov	r0, r5
 80043ee:	bd38      	pop	{r3, r4, r5, pc}
 80043f0:	b118      	cbz	r0, 80043fa <_fflush_r+0x1a>
 80043f2:	6983      	ldr	r3, [r0, #24]
 80043f4:	b90b      	cbnz	r3, 80043fa <_fflush_r+0x1a>
 80043f6:	f000 f887 	bl	8004508 <__sinit>
 80043fa:	4b14      	ldr	r3, [pc, #80]	; (800444c <_fflush_r+0x6c>)
 80043fc:	429c      	cmp	r4, r3
 80043fe:	d11b      	bne.n	8004438 <_fflush_r+0x58>
 8004400:	686c      	ldr	r4, [r5, #4]
 8004402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0ef      	beq.n	80043ea <_fflush_r+0xa>
 800440a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800440c:	07d0      	lsls	r0, r2, #31
 800440e:	d404      	bmi.n	800441a <_fflush_r+0x3a>
 8004410:	0599      	lsls	r1, r3, #22
 8004412:	d402      	bmi.n	800441a <_fflush_r+0x3a>
 8004414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004416:	f000 f915 	bl	8004644 <__retarget_lock_acquire_recursive>
 800441a:	4628      	mov	r0, r5
 800441c:	4621      	mov	r1, r4
 800441e:	f7ff ff59 	bl	80042d4 <__sflush_r>
 8004422:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004424:	4605      	mov	r5, r0
 8004426:	07da      	lsls	r2, r3, #31
 8004428:	d4e0      	bmi.n	80043ec <_fflush_r+0xc>
 800442a:	89a3      	ldrh	r3, [r4, #12]
 800442c:	059b      	lsls	r3, r3, #22
 800442e:	d4dd      	bmi.n	80043ec <_fflush_r+0xc>
 8004430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004432:	f000 f908 	bl	8004646 <__retarget_lock_release_recursive>
 8004436:	e7d9      	b.n	80043ec <_fflush_r+0xc>
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <_fflush_r+0x70>)
 800443a:	429c      	cmp	r4, r3
 800443c:	d101      	bne.n	8004442 <_fflush_r+0x62>
 800443e:	68ac      	ldr	r4, [r5, #8]
 8004440:	e7df      	b.n	8004402 <_fflush_r+0x22>
 8004442:	4b04      	ldr	r3, [pc, #16]	; (8004454 <_fflush_r+0x74>)
 8004444:	429c      	cmp	r4, r3
 8004446:	bf08      	it	eq
 8004448:	68ec      	ldreq	r4, [r5, #12]
 800444a:	e7da      	b.n	8004402 <_fflush_r+0x22>
 800444c:	08004b80 	.word	0x08004b80
 8004450:	08004ba0 	.word	0x08004ba0
 8004454:	08004b60 	.word	0x08004b60

08004458 <std>:
 8004458:	2300      	movs	r3, #0
 800445a:	b510      	push	{r4, lr}
 800445c:	4604      	mov	r4, r0
 800445e:	e9c0 3300 	strd	r3, r3, [r0]
 8004462:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004466:	6083      	str	r3, [r0, #8]
 8004468:	8181      	strh	r1, [r0, #12]
 800446a:	6643      	str	r3, [r0, #100]	; 0x64
 800446c:	81c2      	strh	r2, [r0, #14]
 800446e:	6183      	str	r3, [r0, #24]
 8004470:	4619      	mov	r1, r3
 8004472:	2208      	movs	r2, #8
 8004474:	305c      	adds	r0, #92	; 0x5c
 8004476:	f7ff f85b 	bl	8003530 <memset>
 800447a:	4b05      	ldr	r3, [pc, #20]	; (8004490 <std+0x38>)
 800447c:	6224      	str	r4, [r4, #32]
 800447e:	6263      	str	r3, [r4, #36]	; 0x24
 8004480:	4b04      	ldr	r3, [pc, #16]	; (8004494 <std+0x3c>)
 8004482:	62a3      	str	r3, [r4, #40]	; 0x28
 8004484:	4b04      	ldr	r3, [pc, #16]	; (8004498 <std+0x40>)
 8004486:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004488:	4b04      	ldr	r3, [pc, #16]	; (800449c <std+0x44>)
 800448a:	6323      	str	r3, [r4, #48]	; 0x30
 800448c:	bd10      	pop	{r4, pc}
 800448e:	bf00      	nop
 8004490:	0800484d 	.word	0x0800484d
 8004494:	0800486f 	.word	0x0800486f
 8004498:	080048a7 	.word	0x080048a7
 800449c:	080048cb 	.word	0x080048cb

080044a0 <_cleanup_r>:
 80044a0:	4901      	ldr	r1, [pc, #4]	; (80044a8 <_cleanup_r+0x8>)
 80044a2:	f000 b8af 	b.w	8004604 <_fwalk_reent>
 80044a6:	bf00      	nop
 80044a8:	080043e1 	.word	0x080043e1

080044ac <__sfmoreglue>:
 80044ac:	b570      	push	{r4, r5, r6, lr}
 80044ae:	2568      	movs	r5, #104	; 0x68
 80044b0:	1e4a      	subs	r2, r1, #1
 80044b2:	4355      	muls	r5, r2
 80044b4:	460e      	mov	r6, r1
 80044b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80044ba:	f7ff f98f 	bl	80037dc <_malloc_r>
 80044be:	4604      	mov	r4, r0
 80044c0:	b140      	cbz	r0, 80044d4 <__sfmoreglue+0x28>
 80044c2:	2100      	movs	r1, #0
 80044c4:	e9c0 1600 	strd	r1, r6, [r0]
 80044c8:	300c      	adds	r0, #12
 80044ca:	60a0      	str	r0, [r4, #8]
 80044cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80044d0:	f7ff f82e 	bl	8003530 <memset>
 80044d4:	4620      	mov	r0, r4
 80044d6:	bd70      	pop	{r4, r5, r6, pc}

080044d8 <__sfp_lock_acquire>:
 80044d8:	4801      	ldr	r0, [pc, #4]	; (80044e0 <__sfp_lock_acquire+0x8>)
 80044da:	f000 b8b3 	b.w	8004644 <__retarget_lock_acquire_recursive>
 80044de:	bf00      	nop
 80044e0:	2000128c 	.word	0x2000128c

080044e4 <__sfp_lock_release>:
 80044e4:	4801      	ldr	r0, [pc, #4]	; (80044ec <__sfp_lock_release+0x8>)
 80044e6:	f000 b8ae 	b.w	8004646 <__retarget_lock_release_recursive>
 80044ea:	bf00      	nop
 80044ec:	2000128c 	.word	0x2000128c

080044f0 <__sinit_lock_acquire>:
 80044f0:	4801      	ldr	r0, [pc, #4]	; (80044f8 <__sinit_lock_acquire+0x8>)
 80044f2:	f000 b8a7 	b.w	8004644 <__retarget_lock_acquire_recursive>
 80044f6:	bf00      	nop
 80044f8:	20001287 	.word	0x20001287

080044fc <__sinit_lock_release>:
 80044fc:	4801      	ldr	r0, [pc, #4]	; (8004504 <__sinit_lock_release+0x8>)
 80044fe:	f000 b8a2 	b.w	8004646 <__retarget_lock_release_recursive>
 8004502:	bf00      	nop
 8004504:	20001287 	.word	0x20001287

08004508 <__sinit>:
 8004508:	b510      	push	{r4, lr}
 800450a:	4604      	mov	r4, r0
 800450c:	f7ff fff0 	bl	80044f0 <__sinit_lock_acquire>
 8004510:	69a3      	ldr	r3, [r4, #24]
 8004512:	b11b      	cbz	r3, 800451c <__sinit+0x14>
 8004514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004518:	f7ff bff0 	b.w	80044fc <__sinit_lock_release>
 800451c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004520:	6523      	str	r3, [r4, #80]	; 0x50
 8004522:	4b13      	ldr	r3, [pc, #76]	; (8004570 <__sinit+0x68>)
 8004524:	4a13      	ldr	r2, [pc, #76]	; (8004574 <__sinit+0x6c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	62a2      	str	r2, [r4, #40]	; 0x28
 800452a:	42a3      	cmp	r3, r4
 800452c:	bf08      	it	eq
 800452e:	2301      	moveq	r3, #1
 8004530:	4620      	mov	r0, r4
 8004532:	bf08      	it	eq
 8004534:	61a3      	streq	r3, [r4, #24]
 8004536:	f000 f81f 	bl	8004578 <__sfp>
 800453a:	6060      	str	r0, [r4, #4]
 800453c:	4620      	mov	r0, r4
 800453e:	f000 f81b 	bl	8004578 <__sfp>
 8004542:	60a0      	str	r0, [r4, #8]
 8004544:	4620      	mov	r0, r4
 8004546:	f000 f817 	bl	8004578 <__sfp>
 800454a:	2200      	movs	r2, #0
 800454c:	2104      	movs	r1, #4
 800454e:	60e0      	str	r0, [r4, #12]
 8004550:	6860      	ldr	r0, [r4, #4]
 8004552:	f7ff ff81 	bl	8004458 <std>
 8004556:	2201      	movs	r2, #1
 8004558:	2109      	movs	r1, #9
 800455a:	68a0      	ldr	r0, [r4, #8]
 800455c:	f7ff ff7c 	bl	8004458 <std>
 8004560:	2202      	movs	r2, #2
 8004562:	2112      	movs	r1, #18
 8004564:	68e0      	ldr	r0, [r4, #12]
 8004566:	f7ff ff77 	bl	8004458 <std>
 800456a:	2301      	movs	r3, #1
 800456c:	61a3      	str	r3, [r4, #24]
 800456e:	e7d1      	b.n	8004514 <__sinit+0xc>
 8004570:	08004a74 	.word	0x08004a74
 8004574:	080044a1 	.word	0x080044a1

08004578 <__sfp>:
 8004578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457a:	4607      	mov	r7, r0
 800457c:	f7ff ffac 	bl	80044d8 <__sfp_lock_acquire>
 8004580:	4b1e      	ldr	r3, [pc, #120]	; (80045fc <__sfp+0x84>)
 8004582:	681e      	ldr	r6, [r3, #0]
 8004584:	69b3      	ldr	r3, [r6, #24]
 8004586:	b913      	cbnz	r3, 800458e <__sfp+0x16>
 8004588:	4630      	mov	r0, r6
 800458a:	f7ff ffbd 	bl	8004508 <__sinit>
 800458e:	3648      	adds	r6, #72	; 0x48
 8004590:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004594:	3b01      	subs	r3, #1
 8004596:	d503      	bpl.n	80045a0 <__sfp+0x28>
 8004598:	6833      	ldr	r3, [r6, #0]
 800459a:	b30b      	cbz	r3, 80045e0 <__sfp+0x68>
 800459c:	6836      	ldr	r6, [r6, #0]
 800459e:	e7f7      	b.n	8004590 <__sfp+0x18>
 80045a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80045a4:	b9d5      	cbnz	r5, 80045dc <__sfp+0x64>
 80045a6:	4b16      	ldr	r3, [pc, #88]	; (8004600 <__sfp+0x88>)
 80045a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045ac:	60e3      	str	r3, [r4, #12]
 80045ae:	6665      	str	r5, [r4, #100]	; 0x64
 80045b0:	f000 f847 	bl	8004642 <__retarget_lock_init_recursive>
 80045b4:	f7ff ff96 	bl	80044e4 <__sfp_lock_release>
 80045b8:	2208      	movs	r2, #8
 80045ba:	4629      	mov	r1, r5
 80045bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80045c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80045c4:	6025      	str	r5, [r4, #0]
 80045c6:	61a5      	str	r5, [r4, #24]
 80045c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80045cc:	f7fe ffb0 	bl	8003530 <memset>
 80045d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80045d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80045d8:	4620      	mov	r0, r4
 80045da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045dc:	3468      	adds	r4, #104	; 0x68
 80045de:	e7d9      	b.n	8004594 <__sfp+0x1c>
 80045e0:	2104      	movs	r1, #4
 80045e2:	4638      	mov	r0, r7
 80045e4:	f7ff ff62 	bl	80044ac <__sfmoreglue>
 80045e8:	4604      	mov	r4, r0
 80045ea:	6030      	str	r0, [r6, #0]
 80045ec:	2800      	cmp	r0, #0
 80045ee:	d1d5      	bne.n	800459c <__sfp+0x24>
 80045f0:	f7ff ff78 	bl	80044e4 <__sfp_lock_release>
 80045f4:	230c      	movs	r3, #12
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	e7ee      	b.n	80045d8 <__sfp+0x60>
 80045fa:	bf00      	nop
 80045fc:	08004a74 	.word	0x08004a74
 8004600:	ffff0001 	.word	0xffff0001

08004604 <_fwalk_reent>:
 8004604:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004608:	4606      	mov	r6, r0
 800460a:	4688      	mov	r8, r1
 800460c:	2700      	movs	r7, #0
 800460e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004612:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004616:	f1b9 0901 	subs.w	r9, r9, #1
 800461a:	d505      	bpl.n	8004628 <_fwalk_reent+0x24>
 800461c:	6824      	ldr	r4, [r4, #0]
 800461e:	2c00      	cmp	r4, #0
 8004620:	d1f7      	bne.n	8004612 <_fwalk_reent+0xe>
 8004622:	4638      	mov	r0, r7
 8004624:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004628:	89ab      	ldrh	r3, [r5, #12]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d907      	bls.n	800463e <_fwalk_reent+0x3a>
 800462e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004632:	3301      	adds	r3, #1
 8004634:	d003      	beq.n	800463e <_fwalk_reent+0x3a>
 8004636:	4629      	mov	r1, r5
 8004638:	4630      	mov	r0, r6
 800463a:	47c0      	blx	r8
 800463c:	4307      	orrs	r7, r0
 800463e:	3568      	adds	r5, #104	; 0x68
 8004640:	e7e9      	b.n	8004616 <_fwalk_reent+0x12>

08004642 <__retarget_lock_init_recursive>:
 8004642:	4770      	bx	lr

08004644 <__retarget_lock_acquire_recursive>:
 8004644:	4770      	bx	lr

08004646 <__retarget_lock_release_recursive>:
 8004646:	4770      	bx	lr

08004648 <__swhatbuf_r>:
 8004648:	b570      	push	{r4, r5, r6, lr}
 800464a:	460e      	mov	r6, r1
 800464c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004650:	4614      	mov	r4, r2
 8004652:	2900      	cmp	r1, #0
 8004654:	461d      	mov	r5, r3
 8004656:	b096      	sub	sp, #88	; 0x58
 8004658:	da07      	bge.n	800466a <__swhatbuf_r+0x22>
 800465a:	2300      	movs	r3, #0
 800465c:	602b      	str	r3, [r5, #0]
 800465e:	89b3      	ldrh	r3, [r6, #12]
 8004660:	061a      	lsls	r2, r3, #24
 8004662:	d410      	bmi.n	8004686 <__swhatbuf_r+0x3e>
 8004664:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004668:	e00e      	b.n	8004688 <__swhatbuf_r+0x40>
 800466a:	466a      	mov	r2, sp
 800466c:	f000 f954 	bl	8004918 <_fstat_r>
 8004670:	2800      	cmp	r0, #0
 8004672:	dbf2      	blt.n	800465a <__swhatbuf_r+0x12>
 8004674:	9a01      	ldr	r2, [sp, #4]
 8004676:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800467a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800467e:	425a      	negs	r2, r3
 8004680:	415a      	adcs	r2, r3
 8004682:	602a      	str	r2, [r5, #0]
 8004684:	e7ee      	b.n	8004664 <__swhatbuf_r+0x1c>
 8004686:	2340      	movs	r3, #64	; 0x40
 8004688:	2000      	movs	r0, #0
 800468a:	6023      	str	r3, [r4, #0]
 800468c:	b016      	add	sp, #88	; 0x58
 800468e:	bd70      	pop	{r4, r5, r6, pc}

08004690 <__smakebuf_r>:
 8004690:	898b      	ldrh	r3, [r1, #12]
 8004692:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004694:	079d      	lsls	r5, r3, #30
 8004696:	4606      	mov	r6, r0
 8004698:	460c      	mov	r4, r1
 800469a:	d507      	bpl.n	80046ac <__smakebuf_r+0x1c>
 800469c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80046a0:	6023      	str	r3, [r4, #0]
 80046a2:	6123      	str	r3, [r4, #16]
 80046a4:	2301      	movs	r3, #1
 80046a6:	6163      	str	r3, [r4, #20]
 80046a8:	b002      	add	sp, #8
 80046aa:	bd70      	pop	{r4, r5, r6, pc}
 80046ac:	466a      	mov	r2, sp
 80046ae:	ab01      	add	r3, sp, #4
 80046b0:	f7ff ffca 	bl	8004648 <__swhatbuf_r>
 80046b4:	9900      	ldr	r1, [sp, #0]
 80046b6:	4605      	mov	r5, r0
 80046b8:	4630      	mov	r0, r6
 80046ba:	f7ff f88f 	bl	80037dc <_malloc_r>
 80046be:	b948      	cbnz	r0, 80046d4 <__smakebuf_r+0x44>
 80046c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046c4:	059a      	lsls	r2, r3, #22
 80046c6:	d4ef      	bmi.n	80046a8 <__smakebuf_r+0x18>
 80046c8:	f023 0303 	bic.w	r3, r3, #3
 80046cc:	f043 0302 	orr.w	r3, r3, #2
 80046d0:	81a3      	strh	r3, [r4, #12]
 80046d2:	e7e3      	b.n	800469c <__smakebuf_r+0xc>
 80046d4:	4b0d      	ldr	r3, [pc, #52]	; (800470c <__smakebuf_r+0x7c>)
 80046d6:	62b3      	str	r3, [r6, #40]	; 0x28
 80046d8:	89a3      	ldrh	r3, [r4, #12]
 80046da:	6020      	str	r0, [r4, #0]
 80046dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046e0:	81a3      	strh	r3, [r4, #12]
 80046e2:	9b00      	ldr	r3, [sp, #0]
 80046e4:	6120      	str	r0, [r4, #16]
 80046e6:	6163      	str	r3, [r4, #20]
 80046e8:	9b01      	ldr	r3, [sp, #4]
 80046ea:	b15b      	cbz	r3, 8004704 <__smakebuf_r+0x74>
 80046ec:	4630      	mov	r0, r6
 80046ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046f2:	f000 f923 	bl	800493c <_isatty_r>
 80046f6:	b128      	cbz	r0, 8004704 <__smakebuf_r+0x74>
 80046f8:	89a3      	ldrh	r3, [r4, #12]
 80046fa:	f023 0303 	bic.w	r3, r3, #3
 80046fe:	f043 0301 	orr.w	r3, r3, #1
 8004702:	81a3      	strh	r3, [r4, #12]
 8004704:	89a0      	ldrh	r0, [r4, #12]
 8004706:	4305      	orrs	r5, r0
 8004708:	81a5      	strh	r5, [r4, #12]
 800470a:	e7cd      	b.n	80046a8 <__smakebuf_r+0x18>
 800470c:	080044a1 	.word	0x080044a1

08004710 <memchr>:
 8004710:	4603      	mov	r3, r0
 8004712:	b510      	push	{r4, lr}
 8004714:	b2c9      	uxtb	r1, r1
 8004716:	4402      	add	r2, r0
 8004718:	4293      	cmp	r3, r2
 800471a:	4618      	mov	r0, r3
 800471c:	d101      	bne.n	8004722 <memchr+0x12>
 800471e:	2000      	movs	r0, #0
 8004720:	e003      	b.n	800472a <memchr+0x1a>
 8004722:	7804      	ldrb	r4, [r0, #0]
 8004724:	3301      	adds	r3, #1
 8004726:	428c      	cmp	r4, r1
 8004728:	d1f6      	bne.n	8004718 <memchr+0x8>
 800472a:	bd10      	pop	{r4, pc}

0800472c <memmove>:
 800472c:	4288      	cmp	r0, r1
 800472e:	b510      	push	{r4, lr}
 8004730:	eb01 0402 	add.w	r4, r1, r2
 8004734:	d902      	bls.n	800473c <memmove+0x10>
 8004736:	4284      	cmp	r4, r0
 8004738:	4623      	mov	r3, r4
 800473a:	d807      	bhi.n	800474c <memmove+0x20>
 800473c:	1e43      	subs	r3, r0, #1
 800473e:	42a1      	cmp	r1, r4
 8004740:	d008      	beq.n	8004754 <memmove+0x28>
 8004742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004746:	f803 2f01 	strb.w	r2, [r3, #1]!
 800474a:	e7f8      	b.n	800473e <memmove+0x12>
 800474c:	4601      	mov	r1, r0
 800474e:	4402      	add	r2, r0
 8004750:	428a      	cmp	r2, r1
 8004752:	d100      	bne.n	8004756 <memmove+0x2a>
 8004754:	bd10      	pop	{r4, pc}
 8004756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800475a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800475e:	e7f7      	b.n	8004750 <memmove+0x24>

08004760 <__malloc_lock>:
 8004760:	4801      	ldr	r0, [pc, #4]	; (8004768 <__malloc_lock+0x8>)
 8004762:	f7ff bf6f 	b.w	8004644 <__retarget_lock_acquire_recursive>
 8004766:	bf00      	nop
 8004768:	20001288 	.word	0x20001288

0800476c <__malloc_unlock>:
 800476c:	4801      	ldr	r0, [pc, #4]	; (8004774 <__malloc_unlock+0x8>)
 800476e:	f7ff bf6a 	b.w	8004646 <__retarget_lock_release_recursive>
 8004772:	bf00      	nop
 8004774:	20001288 	.word	0x20001288

08004778 <_realloc_r>:
 8004778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477a:	4607      	mov	r7, r0
 800477c:	4614      	mov	r4, r2
 800477e:	460e      	mov	r6, r1
 8004780:	b921      	cbnz	r1, 800478c <_realloc_r+0x14>
 8004782:	4611      	mov	r1, r2
 8004784:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004788:	f7ff b828 	b.w	80037dc <_malloc_r>
 800478c:	b922      	cbnz	r2, 8004798 <_realloc_r+0x20>
 800478e:	f7fe ffd9 	bl	8003744 <_free_r>
 8004792:	4625      	mov	r5, r4
 8004794:	4628      	mov	r0, r5
 8004796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004798:	f000 f8f2 	bl	8004980 <_malloc_usable_size_r>
 800479c:	42a0      	cmp	r0, r4
 800479e:	d20f      	bcs.n	80047c0 <_realloc_r+0x48>
 80047a0:	4621      	mov	r1, r4
 80047a2:	4638      	mov	r0, r7
 80047a4:	f7ff f81a 	bl	80037dc <_malloc_r>
 80047a8:	4605      	mov	r5, r0
 80047aa:	2800      	cmp	r0, #0
 80047ac:	d0f2      	beq.n	8004794 <_realloc_r+0x1c>
 80047ae:	4631      	mov	r1, r6
 80047b0:	4622      	mov	r2, r4
 80047b2:	f7fe feaf 	bl	8003514 <memcpy>
 80047b6:	4631      	mov	r1, r6
 80047b8:	4638      	mov	r0, r7
 80047ba:	f7fe ffc3 	bl	8003744 <_free_r>
 80047be:	e7e9      	b.n	8004794 <_realloc_r+0x1c>
 80047c0:	4635      	mov	r5, r6
 80047c2:	e7e7      	b.n	8004794 <_realloc_r+0x1c>

080047c4 <_raise_r>:
 80047c4:	291f      	cmp	r1, #31
 80047c6:	b538      	push	{r3, r4, r5, lr}
 80047c8:	4604      	mov	r4, r0
 80047ca:	460d      	mov	r5, r1
 80047cc:	d904      	bls.n	80047d8 <_raise_r+0x14>
 80047ce:	2316      	movs	r3, #22
 80047d0:	6003      	str	r3, [r0, #0]
 80047d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047d6:	bd38      	pop	{r3, r4, r5, pc}
 80047d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80047da:	b112      	cbz	r2, 80047e2 <_raise_r+0x1e>
 80047dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80047e0:	b94b      	cbnz	r3, 80047f6 <_raise_r+0x32>
 80047e2:	4620      	mov	r0, r4
 80047e4:	f000 f830 	bl	8004848 <_getpid_r>
 80047e8:	462a      	mov	r2, r5
 80047ea:	4601      	mov	r1, r0
 80047ec:	4620      	mov	r0, r4
 80047ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047f2:	f000 b817 	b.w	8004824 <_kill_r>
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d00a      	beq.n	8004810 <_raise_r+0x4c>
 80047fa:	1c59      	adds	r1, r3, #1
 80047fc:	d103      	bne.n	8004806 <_raise_r+0x42>
 80047fe:	2316      	movs	r3, #22
 8004800:	6003      	str	r3, [r0, #0]
 8004802:	2001      	movs	r0, #1
 8004804:	e7e7      	b.n	80047d6 <_raise_r+0x12>
 8004806:	2400      	movs	r4, #0
 8004808:	4628      	mov	r0, r5
 800480a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800480e:	4798      	blx	r3
 8004810:	2000      	movs	r0, #0
 8004812:	e7e0      	b.n	80047d6 <_raise_r+0x12>

08004814 <raise>:
 8004814:	4b02      	ldr	r3, [pc, #8]	; (8004820 <raise+0xc>)
 8004816:	4601      	mov	r1, r0
 8004818:	6818      	ldr	r0, [r3, #0]
 800481a:	f7ff bfd3 	b.w	80047c4 <_raise_r>
 800481e:	bf00      	nop
 8004820:	20000018 	.word	0x20000018

08004824 <_kill_r>:
 8004824:	b538      	push	{r3, r4, r5, lr}
 8004826:	2300      	movs	r3, #0
 8004828:	4d06      	ldr	r5, [pc, #24]	; (8004844 <_kill_r+0x20>)
 800482a:	4604      	mov	r4, r0
 800482c:	4608      	mov	r0, r1
 800482e:	4611      	mov	r1, r2
 8004830:	602b      	str	r3, [r5, #0]
 8004832:	f7fc f870 	bl	8000916 <_kill>
 8004836:	1c43      	adds	r3, r0, #1
 8004838:	d102      	bne.n	8004840 <_kill_r+0x1c>
 800483a:	682b      	ldr	r3, [r5, #0]
 800483c:	b103      	cbz	r3, 8004840 <_kill_r+0x1c>
 800483e:	6023      	str	r3, [r4, #0]
 8004840:	bd38      	pop	{r3, r4, r5, pc}
 8004842:	bf00      	nop
 8004844:	20001280 	.word	0x20001280

08004848 <_getpid_r>:
 8004848:	f7fc b85e 	b.w	8000908 <_getpid>

0800484c <__sread>:
 800484c:	b510      	push	{r4, lr}
 800484e:	460c      	mov	r4, r1
 8004850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004854:	f000 f89c 	bl	8004990 <_read_r>
 8004858:	2800      	cmp	r0, #0
 800485a:	bfab      	itete	ge
 800485c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800485e:	89a3      	ldrhlt	r3, [r4, #12]
 8004860:	181b      	addge	r3, r3, r0
 8004862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004866:	bfac      	ite	ge
 8004868:	6563      	strge	r3, [r4, #84]	; 0x54
 800486a:	81a3      	strhlt	r3, [r4, #12]
 800486c:	bd10      	pop	{r4, pc}

0800486e <__swrite>:
 800486e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004872:	461f      	mov	r7, r3
 8004874:	898b      	ldrh	r3, [r1, #12]
 8004876:	4605      	mov	r5, r0
 8004878:	05db      	lsls	r3, r3, #23
 800487a:	460c      	mov	r4, r1
 800487c:	4616      	mov	r6, r2
 800487e:	d505      	bpl.n	800488c <__swrite+0x1e>
 8004880:	2302      	movs	r3, #2
 8004882:	2200      	movs	r2, #0
 8004884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004888:	f000 f868 	bl	800495c <_lseek_r>
 800488c:	89a3      	ldrh	r3, [r4, #12]
 800488e:	4632      	mov	r2, r6
 8004890:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004894:	81a3      	strh	r3, [r4, #12]
 8004896:	4628      	mov	r0, r5
 8004898:	463b      	mov	r3, r7
 800489a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800489e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048a2:	f000 b817 	b.w	80048d4 <_write_r>

080048a6 <__sseek>:
 80048a6:	b510      	push	{r4, lr}
 80048a8:	460c      	mov	r4, r1
 80048aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ae:	f000 f855 	bl	800495c <_lseek_r>
 80048b2:	1c43      	adds	r3, r0, #1
 80048b4:	89a3      	ldrh	r3, [r4, #12]
 80048b6:	bf15      	itete	ne
 80048b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80048ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80048be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80048c2:	81a3      	strheq	r3, [r4, #12]
 80048c4:	bf18      	it	ne
 80048c6:	81a3      	strhne	r3, [r4, #12]
 80048c8:	bd10      	pop	{r4, pc}

080048ca <__sclose>:
 80048ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ce:	f000 b813 	b.w	80048f8 <_close_r>
	...

080048d4 <_write_r>:
 80048d4:	b538      	push	{r3, r4, r5, lr}
 80048d6:	4604      	mov	r4, r0
 80048d8:	4608      	mov	r0, r1
 80048da:	4611      	mov	r1, r2
 80048dc:	2200      	movs	r2, #0
 80048de:	4d05      	ldr	r5, [pc, #20]	; (80048f4 <_write_r+0x20>)
 80048e0:	602a      	str	r2, [r5, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	f7fc f84e 	bl	8000984 <_write>
 80048e8:	1c43      	adds	r3, r0, #1
 80048ea:	d102      	bne.n	80048f2 <_write_r+0x1e>
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	b103      	cbz	r3, 80048f2 <_write_r+0x1e>
 80048f0:	6023      	str	r3, [r4, #0]
 80048f2:	bd38      	pop	{r3, r4, r5, pc}
 80048f4:	20001280 	.word	0x20001280

080048f8 <_close_r>:
 80048f8:	b538      	push	{r3, r4, r5, lr}
 80048fa:	2300      	movs	r3, #0
 80048fc:	4d05      	ldr	r5, [pc, #20]	; (8004914 <_close_r+0x1c>)
 80048fe:	4604      	mov	r4, r0
 8004900:	4608      	mov	r0, r1
 8004902:	602b      	str	r3, [r5, #0]
 8004904:	f7fc f85a 	bl	80009bc <_close>
 8004908:	1c43      	adds	r3, r0, #1
 800490a:	d102      	bne.n	8004912 <_close_r+0x1a>
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	b103      	cbz	r3, 8004912 <_close_r+0x1a>
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	bd38      	pop	{r3, r4, r5, pc}
 8004914:	20001280 	.word	0x20001280

08004918 <_fstat_r>:
 8004918:	b538      	push	{r3, r4, r5, lr}
 800491a:	2300      	movs	r3, #0
 800491c:	4d06      	ldr	r5, [pc, #24]	; (8004938 <_fstat_r+0x20>)
 800491e:	4604      	mov	r4, r0
 8004920:	4608      	mov	r0, r1
 8004922:	4611      	mov	r1, r2
 8004924:	602b      	str	r3, [r5, #0]
 8004926:	f7fc f854 	bl	80009d2 <_fstat>
 800492a:	1c43      	adds	r3, r0, #1
 800492c:	d102      	bne.n	8004934 <_fstat_r+0x1c>
 800492e:	682b      	ldr	r3, [r5, #0]
 8004930:	b103      	cbz	r3, 8004934 <_fstat_r+0x1c>
 8004932:	6023      	str	r3, [r4, #0]
 8004934:	bd38      	pop	{r3, r4, r5, pc}
 8004936:	bf00      	nop
 8004938:	20001280 	.word	0x20001280

0800493c <_isatty_r>:
 800493c:	b538      	push	{r3, r4, r5, lr}
 800493e:	2300      	movs	r3, #0
 8004940:	4d05      	ldr	r5, [pc, #20]	; (8004958 <_isatty_r+0x1c>)
 8004942:	4604      	mov	r4, r0
 8004944:	4608      	mov	r0, r1
 8004946:	602b      	str	r3, [r5, #0]
 8004948:	f7fc f852 	bl	80009f0 <_isatty>
 800494c:	1c43      	adds	r3, r0, #1
 800494e:	d102      	bne.n	8004956 <_isatty_r+0x1a>
 8004950:	682b      	ldr	r3, [r5, #0]
 8004952:	b103      	cbz	r3, 8004956 <_isatty_r+0x1a>
 8004954:	6023      	str	r3, [r4, #0]
 8004956:	bd38      	pop	{r3, r4, r5, pc}
 8004958:	20001280 	.word	0x20001280

0800495c <_lseek_r>:
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	4604      	mov	r4, r0
 8004960:	4608      	mov	r0, r1
 8004962:	4611      	mov	r1, r2
 8004964:	2200      	movs	r2, #0
 8004966:	4d05      	ldr	r5, [pc, #20]	; (800497c <_lseek_r+0x20>)
 8004968:	602a      	str	r2, [r5, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	f7fc f84a 	bl	8000a04 <_lseek>
 8004970:	1c43      	adds	r3, r0, #1
 8004972:	d102      	bne.n	800497a <_lseek_r+0x1e>
 8004974:	682b      	ldr	r3, [r5, #0]
 8004976:	b103      	cbz	r3, 800497a <_lseek_r+0x1e>
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	bd38      	pop	{r3, r4, r5, pc}
 800497c:	20001280 	.word	0x20001280

08004980 <_malloc_usable_size_r>:
 8004980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004984:	1f18      	subs	r0, r3, #4
 8004986:	2b00      	cmp	r3, #0
 8004988:	bfbc      	itt	lt
 800498a:	580b      	ldrlt	r3, [r1, r0]
 800498c:	18c0      	addlt	r0, r0, r3
 800498e:	4770      	bx	lr

08004990 <_read_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4604      	mov	r4, r0
 8004994:	4608      	mov	r0, r1
 8004996:	4611      	mov	r1, r2
 8004998:	2200      	movs	r2, #0
 800499a:	4d05      	ldr	r5, [pc, #20]	; (80049b0 <_read_r+0x20>)
 800499c:	602a      	str	r2, [r5, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	f7fb ffd3 	bl	800094a <_read>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d102      	bne.n	80049ae <_read_r+0x1e>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	b103      	cbz	r3, 80049ae <_read_r+0x1e>
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	20001280 	.word	0x20001280

080049b4 <_gettimeofday>:
 80049b4:	2258      	movs	r2, #88	; 0x58
 80049b6:	4b02      	ldr	r3, [pc, #8]	; (80049c0 <_gettimeofday+0xc>)
 80049b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	4770      	bx	lr
 80049c0:	20001280 	.word	0x20001280

080049c4 <_init>:
 80049c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049c6:	bf00      	nop
 80049c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ca:	bc08      	pop	{r3}
 80049cc:	469e      	mov	lr, r3
 80049ce:	4770      	bx	lr

080049d0 <_fini>:
 80049d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d2:	bf00      	nop
 80049d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049d6:	bc08      	pop	{r3}
 80049d8:	469e      	mov	lr, r3
 80049da:	4770      	bx	lr
