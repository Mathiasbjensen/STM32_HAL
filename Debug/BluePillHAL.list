
BluePillHAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005268  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08005378  08005378  00015378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005540  08005540  00020150  2**0
                  CONTENTS
  4 .ARM          00000000  08005540  08005540  00020150  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005540  08005540  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005540  08005540  00015540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005544  08005544  00015544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  08005548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014e0  20000150  08005698  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001630  08005698  00021630  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d3e  00000000  00000000  00020179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e0c  00000000  00000000  00032eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00035cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  00036de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cc1  00000000  00000000  00037db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010c67  00000000  00000000  00051a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093b6f  00000000  00000000  000626d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6247  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005288  00000000  00000000  000f629c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000fb524  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000fb548  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000150 	.word	0x20000150
 800012c:	00000000 	.word	0x00000000
 8000130:	08005360 	.word	0x08005360

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000154 	.word	0x20000154
 800014c:	08005360 	.word	0x08005360

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	2000016c 	.word	0x2000016c
 800018c:	200001c0 	.word	0x200001c0

08000190 <SARA_Init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void SARA_Init() {
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, SARAate0, strlen(SARAate0), 50);
 8000194:	4833      	ldr	r0, [pc, #204]	; (8000264 <SARA_Init+0xd4>)
 8000196:	f7ff ffdb 	bl	8000150 <strlen>
 800019a:	4603      	mov	r3, r0
 800019c:	b29a      	uxth	r2, r3
 800019e:	2332      	movs	r3, #50	; 0x32
 80001a0:	4930      	ldr	r1, [pc, #192]	; (8000264 <SARA_Init+0xd4>)
 80001a2:	4831      	ldr	r0, [pc, #196]	; (8000268 <SARA_Init+0xd8>)
 80001a4:	f002 fa5d 	bl	8002662 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 80001a8:	2364      	movs	r3, #100	; 0x64
 80001aa:	2280      	movs	r2, #128	; 0x80
 80001ac:	492f      	ldr	r1, [pc, #188]	; (800026c <SARA_Init+0xdc>)
 80001ae:	482e      	ldr	r0, [pc, #184]	; (8000268 <SARA_Init+0xd8>)
 80001b0:	f002 fae9 	bl	8002786 <HAL_UART_Receive>
	osDelay(500);
 80001b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001b8:	f002 fcc6 	bl	8002b48 <osDelay>
	HAL_UART_Transmit(&huart1, SARAumnoprof, strlen(SARAumnoprof), 50);
 80001bc:	482c      	ldr	r0, [pc, #176]	; (8000270 <SARA_Init+0xe0>)
 80001be:	f7ff ffc7 	bl	8000150 <strlen>
 80001c2:	4603      	mov	r3, r0
 80001c4:	b29a      	uxth	r2, r3
 80001c6:	2332      	movs	r3, #50	; 0x32
 80001c8:	4929      	ldr	r1, [pc, #164]	; (8000270 <SARA_Init+0xe0>)
 80001ca:	4827      	ldr	r0, [pc, #156]	; (8000268 <SARA_Init+0xd8>)
 80001cc:	f002 fa49 	bl	8002662 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 80001d0:	2364      	movs	r3, #100	; 0x64
 80001d2:	2280      	movs	r2, #128	; 0x80
 80001d4:	4925      	ldr	r1, [pc, #148]	; (800026c <SARA_Init+0xdc>)
 80001d6:	4824      	ldr	r0, [pc, #144]	; (8000268 <SARA_Init+0xd8>)
 80001d8:	f002 fad5 	bl	8002786 <HAL_UART_Receive>
	osDelay(500);
 80001dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001e0:	f002 fcb2 	bl	8002b48 <osDelay>
	//HAL_UART_Transmit(&huart1, cereg, strlen(cereg), 10);
	//osDelay(250);
	HAL_UART_Transmit(&huart1, SARAcops, strlen(SARAcops), 50);
 80001e4:	4823      	ldr	r0, [pc, #140]	; (8000274 <SARA_Init+0xe4>)
 80001e6:	f7ff ffb3 	bl	8000150 <strlen>
 80001ea:	4603      	mov	r3, r0
 80001ec:	b29a      	uxth	r2, r3
 80001ee:	2332      	movs	r3, #50	; 0x32
 80001f0:	4920      	ldr	r1, [pc, #128]	; (8000274 <SARA_Init+0xe4>)
 80001f2:	481d      	ldr	r0, [pc, #116]	; (8000268 <SARA_Init+0xd8>)
 80001f4:	f002 fa35 	bl	8002662 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 80001f8:	2364      	movs	r3, #100	; 0x64
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	491b      	ldr	r1, [pc, #108]	; (800026c <SARA_Init+0xdc>)
 80001fe:	481a      	ldr	r0, [pc, #104]	; (8000268 <SARA_Init+0xd8>)
 8000200:	f002 fac1 	bl	8002786 <HAL_UART_Receive>
	osDelay(500);
 8000204:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000208:	f002 fc9e 	bl	8002b48 <osDelay>
	HAL_UART_Transmit(&huart1, SARAconnLTE, strlen(SARAconnLTE), 50);
 800020c:	481a      	ldr	r0, [pc, #104]	; (8000278 <SARA_Init+0xe8>)
 800020e:	f7ff ff9f 	bl	8000150 <strlen>
 8000212:	4603      	mov	r3, r0
 8000214:	b29a      	uxth	r2, r3
 8000216:	2332      	movs	r3, #50	; 0x32
 8000218:	4917      	ldr	r1, [pc, #92]	; (8000278 <SARA_Init+0xe8>)
 800021a:	4813      	ldr	r0, [pc, #76]	; (8000268 <SARA_Init+0xd8>)
 800021c:	f002 fa21 	bl	8002662 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 8000220:	2364      	movs	r3, #100	; 0x64
 8000222:	2280      	movs	r2, #128	; 0x80
 8000224:	4911      	ldr	r1, [pc, #68]	; (800026c <SARA_Init+0xdc>)
 8000226:	4810      	ldr	r0, [pc, #64]	; (8000268 <SARA_Init+0xd8>)
 8000228:	f002 faad 	bl	8002786 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart1, SARAate0, strlen(SARAate0), 50);
 800022c:	480d      	ldr	r0, [pc, #52]	; (8000264 <SARA_Init+0xd4>)
 800022e:	f7ff ff8f 	bl	8000150 <strlen>
 8000232:	4603      	mov	r3, r0
 8000234:	b29a      	uxth	r2, r3
 8000236:	2332      	movs	r3, #50	; 0x32
 8000238:	490a      	ldr	r1, [pc, #40]	; (8000264 <SARA_Init+0xd4>)
 800023a:	480b      	ldr	r0, [pc, #44]	; (8000268 <SARA_Init+0xd8>)
 800023c:	f002 fa11 	bl	8002662 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 8000240:	2364      	movs	r3, #100	; 0x64
 8000242:	2280      	movs	r2, #128	; 0x80
 8000244:	4909      	ldr	r1, [pc, #36]	; (800026c <SARA_Init+0xdc>)
 8000246:	4808      	ldr	r0, [pc, #32]	; (8000268 <SARA_Init+0xd8>)
 8000248:	f002 fa9d 	bl	8002786 <HAL_UART_Receive>

	osDelay(500);
 800024c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000250:	f002 fc7a 	bl	8002b48 <osDelay>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 8000254:	2364      	movs	r3, #100	; 0x64
 8000256:	2280      	movs	r2, #128	; 0x80
 8000258:	4904      	ldr	r1, [pc, #16]	; (800026c <SARA_Init+0xdc>)
 800025a:	4803      	ldr	r0, [pc, #12]	; (8000268 <SARA_Init+0xd8>)
 800025c:	f002 fa93 	bl	8002786 <HAL_UART_Receive>

}
 8000260:	bf00      	nop
 8000262:	bd80      	pop	{r7, pc}
 8000264:	20000000 	.word	0x20000000
 8000268:	200012b8 	.word	0x200012b8
 800026c:	200011e8 	.word	0x200011e8
 8000270:	20000008 	.word	0x20000008
 8000274:	2000001c 	.word	0x2000001c
 8000278:	2000002c 	.word	0x2000002c

0800027c <nemeus_Power_Cycle>:

void nemeus_Power_Cycle() {
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000286:	4832      	ldr	r0, [pc, #200]	; (8000350 <nemeus_Power_Cycle+0xd4>)
 8000288:	f001 fad8 	bl	800183c <HAL_GPIO_WritePin>
    osDelay(1500);
 800028c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000290:	f002 fc5a 	bl	8002b48 <osDelay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000294:	2201      	movs	r2, #1
 8000296:	f44f 7180 	mov.w	r1, #256	; 0x100
 800029a:	482d      	ldr	r0, [pc, #180]	; (8000350 <nemeus_Power_Cycle+0xd4>)
 800029c:	f001 face 	bl	800183c <HAL_GPIO_WritePin>
	//osDelay(150);
    HAL_UART_Receive(&huart3, trash, 128, 150);
 80002a0:	2396      	movs	r3, #150	; 0x96
 80002a2:	2280      	movs	r2, #128	; 0x80
 80002a4:	492b      	ldr	r1, [pc, #172]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 80002a6:	482c      	ldr	r0, [pc, #176]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 80002a8:	f002 fa6d 	bl	8002786 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart3, syncLora, strlen(syncLora), 10);
 80002ac:	482b      	ldr	r0, [pc, #172]	; (800035c <nemeus_Power_Cycle+0xe0>)
 80002ae:	f7ff ff4f 	bl	8000150 <strlen>
 80002b2:	4603      	mov	r3, r0
 80002b4:	b29a      	uxth	r2, r3
 80002b6:	230a      	movs	r3, #10
 80002b8:	4928      	ldr	r1, [pc, #160]	; (800035c <nemeus_Power_Cycle+0xe0>)
 80002ba:	4827      	ldr	r0, [pc, #156]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 80002bc:	f002 f9d1 	bl	8002662 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, trash, 128, 100);
 80002c0:	2364      	movs	r3, #100	; 0x64
 80002c2:	2280      	movs	r2, #128	; 0x80
 80002c4:	4923      	ldr	r1, [pc, #140]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 80002c6:	4824      	ldr	r0, [pc, #144]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 80002c8:	f002 fa5d 	bl	8002786 <HAL_UART_Receive>
	osDelay(500);
 80002cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002d0:	f002 fc3a 	bl	8002b48 <osDelay>

	HAL_UART_Transmit(&huart3, beginLora, strlen(beginLora), 10);
 80002d4:	4822      	ldr	r0, [pc, #136]	; (8000360 <nemeus_Power_Cycle+0xe4>)
 80002d6:	f7ff ff3b 	bl	8000150 <strlen>
 80002da:	4603      	mov	r3, r0
 80002dc:	b29a      	uxth	r2, r3
 80002de:	230a      	movs	r3, #10
 80002e0:	491f      	ldr	r1, [pc, #124]	; (8000360 <nemeus_Power_Cycle+0xe4>)
 80002e2:	481d      	ldr	r0, [pc, #116]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 80002e4:	f002 f9bd 	bl	8002662 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, trash, 128, 100);
 80002e8:	2364      	movs	r3, #100	; 0x64
 80002ea:	2280      	movs	r2, #128	; 0x80
 80002ec:	4919      	ldr	r1, [pc, #100]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 80002ee:	481a      	ldr	r0, [pc, #104]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 80002f0:	f002 fa49 	bl	8002786 <HAL_UART_Receive>
	//osDelay(1500);
	memset(trash, '\0', 128);
 80002f4:	2280      	movs	r2, #128	; 0x80
 80002f6:	2100      	movs	r1, #0
 80002f8:	4816      	ldr	r0, [pc, #88]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 80002fa:	f003 fdc9 	bl	8003e90 <memset>
	//HAL_UART_Receive(&huart3, trash, 128, 4000);
	HAL_UART_Receive(&huart3, trash, 10, 40000);
 80002fe:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000302:	220a      	movs	r2, #10
 8000304:	4913      	ldr	r1, [pc, #76]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 8000306:	4814      	ldr	r0, [pc, #80]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 8000308:	f002 fa3d 	bl	8002786 <HAL_UART_Receive>
	HAL_UART_Receive(&huart3, trash, 128, 100);
 800030c:	2364      	movs	r3, #100	; 0x64
 800030e:	2280      	movs	r2, #128	; 0x80
 8000310:	4910      	ldr	r1, [pc, #64]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 8000312:	4811      	ldr	r0, [pc, #68]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 8000314:	f002 fa37 	bl	8002786 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart3, beginSigfox, strlen(beginSigfox), 10);
 8000318:	4812      	ldr	r0, [pc, #72]	; (8000364 <nemeus_Power_Cycle+0xe8>)
 800031a:	f7ff ff19 	bl	8000150 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	b29a      	uxth	r2, r3
 8000322:	230a      	movs	r3, #10
 8000324:	490f      	ldr	r1, [pc, #60]	; (8000364 <nemeus_Power_Cycle+0xe8>)
 8000326:	480c      	ldr	r0, [pc, #48]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 8000328:	f002 f99b 	bl	8002662 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart3, trash, 128, 100);
 800032c:	2364      	movs	r3, #100	; 0x64
 800032e:	2280      	movs	r2, #128	; 0x80
 8000330:	4908      	ldr	r1, [pc, #32]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 8000332:	4809      	ldr	r0, [pc, #36]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 8000334:	f002 fa27 	bl	8002786 <HAL_UART_Receive>
	osDelay(50);
 8000338:	2032      	movs	r0, #50	; 0x32
 800033a:	f002 fc05 	bl	8002b48 <osDelay>
	HAL_UART_Receive(&huart3, trash, 128, 100);
 800033e:	2364      	movs	r3, #100	; 0x64
 8000340:	2280      	movs	r2, #128	; 0x80
 8000342:	4904      	ldr	r1, [pc, #16]	; (8000354 <nemeus_Power_Cycle+0xd8>)
 8000344:	4804      	ldr	r0, [pc, #16]	; (8000358 <nemeus_Power_Cycle+0xdc>)
 8000346:	f002 fa1e 	bl	8002786 <HAL_UART_Receive>


}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40010800 	.word	0x40010800
 8000354:	200011e8 	.word	0x200011e8
 8000358:	200011a0 	.word	0x200011a0
 800035c:	20000088 	.word	0x20000088
 8000360:	20000094 	.word	0x20000094
 8000364:	200000b8 	.word	0x200000b8

08000368 <SARA_ChangeTech>:
	HAL_UART_Transmit(&huart1, cmd, strlen(cmd), 10);
	HAL_UART_Receive(&huart1, SARAresult, 128, 100);
}


void SARA_ChangeTech(uint8_t tech){ //tech should be 9 for NB
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af00      	add	r7, sp, #0
 800036e:	4603      	mov	r3, r0
 8000370:	71fb      	strb	r3, [r7, #7]
	uint8_t lpwanTechnology[12];
	if(tech == '7'){
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	2b37      	cmp	r3, #55	; 0x37
 8000376:	d106      	bne.n	8000386 <SARA_ChangeTech+0x1e>
		strcpy(lpwanTechnology,SARAconnLTE);
 8000378:	f107 030c 	add.w	r3, r7, #12
 800037c:	494f      	ldr	r1, [pc, #316]	; (80004bc <SARA_ChangeTech+0x154>)
 800037e:	4618      	mov	r0, r3
 8000380:	f003 fe2b 	bl	8003fda <strcpy>
 8000384:	e008      	b.n	8000398 <SARA_ChangeTech+0x30>
	}
	else if (tech == '9') {
 8000386:	79fb      	ldrb	r3, [r7, #7]
 8000388:	2b39      	cmp	r3, #57	; 0x39
 800038a:	d105      	bne.n	8000398 <SARA_ChangeTech+0x30>
		strcpy(lpwanTechnology,SARAconnNB);
 800038c:	f107 030c 	add.w	r3, r7, #12
 8000390:	494b      	ldr	r1, [pc, #300]	; (80004c0 <SARA_ChangeTech+0x158>)
 8000392:	4618      	mov	r0, r3
 8000394:	f003 fe21 	bl	8003fda <strcpy>
	}
	HAL_UART_Transmit(&huart1, lpwanTechnology, strlen(lpwanTechnology), 50);
 8000398:	f107 030c 	add.w	r3, r7, #12
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff fed7 	bl	8000150 <strlen>
 80003a2:	4603      	mov	r3, r0
 80003a4:	b29a      	uxth	r2, r3
 80003a6:	f107 010c 	add.w	r1, r7, #12
 80003aa:	2332      	movs	r3, #50	; 0x32
 80003ac:	4845      	ldr	r0, [pc, #276]	; (80004c4 <SARA_ChangeTech+0x15c>)
 80003ae:	f002 f958 	bl	8002662 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 80003b2:	2364      	movs	r3, #100	; 0x64
 80003b4:	2280      	movs	r2, #128	; 0x80
 80003b6:	4944      	ldr	r1, [pc, #272]	; (80004c8 <SARA_ChangeTech+0x160>)
 80003b8:	4842      	ldr	r0, [pc, #264]	; (80004c4 <SARA_ChangeTech+0x15c>)
 80003ba:	f002 f9e4 	bl	8002786 <HAL_UART_Receive>

	HAL_UART_Transmit(&huart1, SARAcfun15, strlen(SARAcfun15), 50);
 80003be:	4843      	ldr	r0, [pc, #268]	; (80004cc <SARA_ChangeTech+0x164>)
 80003c0:	f7ff fec6 	bl	8000150 <strlen>
 80003c4:	4603      	mov	r3, r0
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	2332      	movs	r3, #50	; 0x32
 80003ca:	4940      	ldr	r1, [pc, #256]	; (80004cc <SARA_ChangeTech+0x164>)
 80003cc:	483d      	ldr	r0, [pc, #244]	; (80004c4 <SARA_ChangeTech+0x15c>)
 80003ce:	f002 f948 	bl	8002662 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 100);
 80003d2:	2364      	movs	r3, #100	; 0x64
 80003d4:	2280      	movs	r2, #128	; 0x80
 80003d6:	493c      	ldr	r1, [pc, #240]	; (80004c8 <SARA_ChangeTech+0x160>)
 80003d8:	483a      	ldr	r0, [pc, #232]	; (80004c4 <SARA_ChangeTech+0x15c>)
 80003da:	f002 f9d4 	bl	8002786 <HAL_UART_Receive>

	// Wait for device to restart and
	osDelay(7500);
 80003de:	f641 504c 	movw	r0, #7500	; 0x1d4c
 80003e2:	f002 fbb1 	bl	8002b48 <osDelay>

	HAL_UART_Transmit(&huart1, SARAate0, strlen(SARAate0), 50);
 80003e6:	483a      	ldr	r0, [pc, #232]	; (80004d0 <SARA_ChangeTech+0x168>)
 80003e8:	f7ff feb2 	bl	8000150 <strlen>
 80003ec:	4603      	mov	r3, r0
 80003ee:	b29a      	uxth	r2, r3
 80003f0:	2332      	movs	r3, #50	; 0x32
 80003f2:	4937      	ldr	r1, [pc, #220]	; (80004d0 <SARA_ChangeTech+0x168>)
 80003f4:	4833      	ldr	r0, [pc, #204]	; (80004c4 <SARA_ChangeTech+0x15c>)
 80003f6:	f002 f934 	bl	8002662 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 250);
 80003fa:	23fa      	movs	r3, #250	; 0xfa
 80003fc:	2280      	movs	r2, #128	; 0x80
 80003fe:	4932      	ldr	r1, [pc, #200]	; (80004c8 <SARA_ChangeTech+0x160>)
 8000400:	4830      	ldr	r0, [pc, #192]	; (80004c4 <SARA_ChangeTech+0x15c>)
 8000402:	f002 f9c0 	bl	8002786 <HAL_UART_Receive>

	if (tech == '9'){
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	2b39      	cmp	r3, #57	; 0x39
 800040a:	d103      	bne.n	8000414 <SARA_ChangeTech+0xac>
		osDelay(2000);
 800040c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000410:	f002 fb9a 	bl	8002b48 <osDelay>
	}

	HAL_UART_Transmit(&huart1, SARAate0, strlen(SARAate0), 50);
 8000414:	482e      	ldr	r0, [pc, #184]	; (80004d0 <SARA_ChangeTech+0x168>)
 8000416:	f7ff fe9b 	bl	8000150 <strlen>
 800041a:	4603      	mov	r3, r0
 800041c:	b29a      	uxth	r2, r3
 800041e:	2332      	movs	r3, #50	; 0x32
 8000420:	492b      	ldr	r1, [pc, #172]	; (80004d0 <SARA_ChangeTech+0x168>)
 8000422:	4828      	ldr	r0, [pc, #160]	; (80004c4 <SARA_ChangeTech+0x15c>)
 8000424:	f002 f91d 	bl	8002662 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, trash, 128, 250);
 8000428:	23fa      	movs	r3, #250	; 0xfa
 800042a:	2280      	movs	r2, #128	; 0x80
 800042c:	4926      	ldr	r1, [pc, #152]	; (80004c8 <SARA_ChangeTech+0x160>)
 800042e:	4825      	ldr	r0, [pc, #148]	; (80004c4 <SARA_ChangeTech+0x15c>)
 8000430:	f002 f9a9 	bl	8002786 <HAL_UART_Receive>

	int i = 0;
 8000434:	2300      	movs	r3, #0
 8000436:	61fb      	str	r3, [r7, #28]
	int msgLength;
	do {
		SARA_CheckTech();
 8000438:	f000 f852 	bl	80004e0 <SARA_CheckTech>
		msgLength = strlen(SARAtech);
 800043c:	4825      	ldr	r0, [pc, #148]	; (80004d4 <SARA_ChangeTech+0x16c>)
 800043e:	f7ff fe87 	bl	8000150 <strlen>
 8000442:	4603      	mov	r3, r0
 8000444:	61bb      	str	r3, [r7, #24]
		getResultParameterURAT(3, SARAtech, msgLength);
 8000446:	69ba      	ldr	r2, [r7, #24]
 8000448:	4922      	ldr	r1, [pc, #136]	; (80004d4 <SARA_ChangeTech+0x16c>)
 800044a:	2003      	movs	r0, #3
 800044c:	f000 f86c 	bl	8000528 <getResultParameterURAT>
		osDelay(200);//sendToESP(SARATechnology);
 8000450:	20c8      	movs	r0, #200	; 0xc8
 8000452:	f002 fb79 	bl	8002b48 <osDelay>
		osDelay(1500);
 8000456:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800045a:	f002 fb75 	bl	8002b48 <osDelay>
		i++;
 800045e:	69fb      	ldr	r3, [r7, #28]
 8000460:	3301      	adds	r3, #1
 8000462:	61fb      	str	r3, [r7, #28]
		if(i > 3){
 8000464:	69fb      	ldr	r3, [r7, #28]
 8000466:	2b03      	cmp	r3, #3
 8000468:	dd1b      	ble.n	80004a2 <SARA_ChangeTech+0x13a>
			__HAL_UART_FLUSH_DRREGISTER(&huart1);
 800046a:	4b16      	ldr	r3, [pc, #88]	; (80004c4 <SARA_ChangeTech+0x15c>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	685b      	ldr	r3, [r3, #4]
			if(&huart1.ErrorCode == HAL_UART_ERROR_ORE){
 8000470:	4b19      	ldr	r3, [pc, #100]	; (80004d8 <SARA_ChangeTech+0x170>)
 8000472:	2b08      	cmp	r3, #8
 8000474:	d105      	bne.n	8000482 <SARA_ChangeTech+0x11a>
				HAL_UART_Receive(&huart1, trash, 1, 20);
 8000476:	2314      	movs	r3, #20
 8000478:	2201      	movs	r2, #1
 800047a:	4913      	ldr	r1, [pc, #76]	; (80004c8 <SARA_ChangeTech+0x160>)
 800047c:	4811      	ldr	r0, [pc, #68]	; (80004c4 <SARA_ChangeTech+0x15c>)
 800047e:	f002 f982 	bl	8002786 <HAL_UART_Receive>
				//sendToESP("Overrun Error code!!!!");
			}

			HAL_UART_Transmit(&huart1, SARAate0, strlen(SARAate0), 50);
 8000482:	4813      	ldr	r0, [pc, #76]	; (80004d0 <SARA_ChangeTech+0x168>)
 8000484:	f7ff fe64 	bl	8000150 <strlen>
 8000488:	4603      	mov	r3, r0
 800048a:	b29a      	uxth	r2, r3
 800048c:	2332      	movs	r3, #50	; 0x32
 800048e:	4910      	ldr	r1, [pc, #64]	; (80004d0 <SARA_ChangeTech+0x168>)
 8000490:	480c      	ldr	r0, [pc, #48]	; (80004c4 <SARA_ChangeTech+0x15c>)
 8000492:	f002 f8e6 	bl	8002662 <HAL_UART_Transmit>
			HAL_UART_Receive(&huart1, trash, 128, 250);
 8000496:	23fa      	movs	r3, #250	; 0xfa
 8000498:	2280      	movs	r2, #128	; 0x80
 800049a:	490b      	ldr	r1, [pc, #44]	; (80004c8 <SARA_ChangeTech+0x160>)
 800049c:	4809      	ldr	r0, [pc, #36]	; (80004c4 <SARA_ChangeTech+0x15c>)
 800049e:	f002 f972 	bl	8002786 <HAL_UART_Receive>
		}
	} while (SARATechnology[0] != tech && i < 5);
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <SARA_ChangeTech+0x174>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	79fa      	ldrb	r2, [r7, #7]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d002      	beq.n	80004b2 <SARA_ChangeTech+0x14a>
 80004ac:	69fb      	ldr	r3, [r7, #28]
 80004ae:	2b04      	cmp	r3, #4
 80004b0:	ddc2      	ble.n	8000438 <SARA_ChangeTech+0xd0>

}
 80004b2:	bf00      	nop
 80004b4:	3720      	adds	r7, #32
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	2000002c 	.word	0x2000002c
 80004c0:	20000038 	.word	0x20000038
 80004c4:	200012b8 	.word	0x200012b8
 80004c8:	200011e8 	.word	0x200011e8
 80004cc:	20000068 	.word	0x20000068
 80004d0:	20000000 	.word	0x20000000
 80004d4:	20001544 	.word	0x20001544
 80004d8:	200012f4 	.word	0x200012f4
 80004dc:	200012b4 	.word	0x200012b4

080004e0 <SARA_CheckTech>:

void SARA_CheckTech(){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	memset(SARAtech,'\0',50);
 80004e4:	2232      	movs	r2, #50	; 0x32
 80004e6:	2100      	movs	r1, #0
 80004e8:	480c      	ldr	r0, [pc, #48]	; (800051c <SARA_CheckTech+0x3c>)
 80004ea:	f003 fcd1 	bl	8003e90 <memset>
	HAL_UART_Transmit(&huart1, SARAcopsCheck, strlen(SARAcopsCheck), 10);
 80004ee:	480c      	ldr	r0, [pc, #48]	; (8000520 <SARA_CheckTech+0x40>)
 80004f0:	f7ff fe2e 	bl	8000150 <strlen>
 80004f4:	4603      	mov	r3, r0
 80004f6:	b29a      	uxth	r2, r3
 80004f8:	230a      	movs	r3, #10
 80004fa:	4909      	ldr	r1, [pc, #36]	; (8000520 <SARA_CheckTech+0x40>)
 80004fc:	4809      	ldr	r0, [pc, #36]	; (8000524 <SARA_CheckTech+0x44>)
 80004fe:	f002 f8b0 	bl	8002662 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, SARAtech, 50, 1500);
 8000502:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000506:	2232      	movs	r2, #50	; 0x32
 8000508:	4904      	ldr	r1, [pc, #16]	; (800051c <SARA_CheckTech+0x3c>)
 800050a:	4806      	ldr	r0, [pc, #24]	; (8000524 <SARA_CheckTech+0x44>)
 800050c:	f002 f93b 	bl	8002786 <HAL_UART_Receive>
	osDelay(200);//sendToESP(SARAtech);
 8000510:	20c8      	movs	r0, #200	; 0xc8
 8000512:	f002 fb19 	bl	8002b48 <osDelay>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20001544 	.word	0x20001544
 8000520:	20000044 	.word	0x20000044
 8000524:	200012b8 	.word	0x200012b8

08000528 <getResultParameterURAT>:

void getResultParameterURAT(int nParam, uint8_t * msg, int msgLength){
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
 8000534:	4b1c      	ldr	r3, [pc, #112]	; (80005a8 <getResultParameterURAT+0x80>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
	memset(SARATechnology,'\0',1);
	int commaCnt = 0;
 800053a:	2300      	movs	r3, #0
 800053c:	617b      	str	r3, [r7, #20]
	int i = 0;
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
	//sendToESP(msg);
	osDelay(200);
 8000542:	20c8      	movs	r0, #200	; 0xc8
 8000544:	f002 fb00 	bl	8002b48 <osDelay>
	while (msg[i] != '\0' && i < msgLength){
 8000548:	e021      	b.n	800058e <getResultParameterURAT+0x66>
		osDelay(50);
 800054a:	2032      	movs	r0, #50	; 0x32
 800054c:	f002 fafc 	bl	8002b48 <osDelay>
		if(msg[i] == ',' && commaCnt == nParam-1){
 8000550:	693b      	ldr	r3, [r7, #16]
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	4413      	add	r3, r2
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	2b2c      	cmp	r3, #44	; 0x2c
 800055a:	d10c      	bne.n	8000576 <getResultParameterURAT+0x4e>
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	3b01      	subs	r3, #1
 8000560:	697a      	ldr	r2, [r7, #20]
 8000562:	429a      	cmp	r2, r3
 8000564:	d107      	bne.n	8000576 <getResultParameterURAT+0x4e>
			//memset(SARATechnology,'\0',1); //probably unnecessary since its already done in beg
			SARATechnology[0] = msg[i+1];
 8000566:	693b      	ldr	r3, [r7, #16]
 8000568:	3301      	adds	r3, #1
 800056a:	68ba      	ldr	r2, [r7, #8]
 800056c:	4413      	add	r3, r2
 800056e:	781a      	ldrb	r2, [r3, #0]
 8000570:	4b0d      	ldr	r3, [pc, #52]	; (80005a8 <getResultParameterURAT+0x80>)
 8000572:	701a      	strb	r2, [r3, #0]
			return;
 8000574:	e015      	b.n	80005a2 <getResultParameterURAT+0x7a>
		} else if(msg[i] == ','){
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	68ba      	ldr	r2, [r7, #8]
 800057a:	4413      	add	r3, r2
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b2c      	cmp	r3, #44	; 0x2c
 8000580:	d102      	bne.n	8000588 <getResultParameterURAT+0x60>
			commaCnt++;
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	3301      	adds	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
		}
		i++;	}
 8000588:	693b      	ldr	r3, [r7, #16]
 800058a:	3301      	adds	r3, #1
 800058c:	613b      	str	r3, [r7, #16]
	while (msg[i] != '\0' && i < msgLength){
 800058e:	693b      	ldr	r3, [r7, #16]
 8000590:	68ba      	ldr	r2, [r7, #8]
 8000592:	4413      	add	r3, r2
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d003      	beq.n	80005a2 <getResultParameterURAT+0x7a>
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	429a      	cmp	r2, r3
 80005a0:	dbd3      	blt.n	800054a <getResultParameterURAT+0x22>
}
 80005a2:	3718      	adds	r7, #24
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200012b4 	.word	0x200012b4

080005ac <getResultParameterCESQ>:


void getResultParameterCESQ(int nParam, uint8_t * msg){
 80005ac:	b480      	push	{r7}
 80005ae:	b087      	sub	sp, #28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	int commaCnt = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
	//uint8_t result;
	//for(int i = 0; i <= strlen(msg); i++){
	int i = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	613b      	str	r3, [r7, #16]
	int j = 1;
 80005be:	2301      	movs	r3, #1
 80005c0:	60fb      	str	r3, [r7, #12]
	while (msg[i] != '\0'){
 80005c2:	e03b      	b.n	800063c <getResultParameterCESQ+0x90>
		if(msg[i] == ',' && commaCnt == nParam-1){
 80005c4:	693b      	ldr	r3, [r7, #16]
 80005c6:	683a      	ldr	r2, [r7, #0]
 80005c8:	4413      	add	r3, r2
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b2c      	cmp	r3, #44	; 0x2c
 80005ce:	d129      	bne.n	8000624 <getResultParameterCESQ+0x78>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	3b01      	subs	r3, #1
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d124      	bne.n	8000624 <getResultParameterCESQ+0x78>
			while (j <= 5 && msg[i+j] != '\r' && msg[i+j] != '\n'){
 80005da:	e00d      	b.n	80005f8 <getResultParameterCESQ+0x4c>
				SARARsrpRsrq[j-1] = msg[i+j];
 80005dc:	693a      	ldr	r2, [r7, #16]
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	4413      	add	r3, r2
 80005e2:	461a      	mov	r2, r3
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	441a      	add	r2, r3
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	7811      	ldrb	r1, [r2, #0]
 80005ee:	4a19      	ldr	r2, [pc, #100]	; (8000654 <getResultParameterCESQ+0xa8>)
 80005f0:	54d1      	strb	r1, [r2, r3]
				j++;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	3301      	adds	r3, #1
 80005f6:	60fb      	str	r3, [r7, #12]
			while (j <= 5 && msg[i+j] != '\r' && msg[i+j] != '\n'){
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	2b05      	cmp	r3, #5
 80005fc:	dc25      	bgt.n	800064a <getResultParameterCESQ+0x9e>
 80005fe:	693a      	ldr	r2, [r7, #16]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4413      	add	r3, r2
 8000604:	461a      	mov	r2, r3
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b0d      	cmp	r3, #13
 800060e:	d01c      	beq.n	800064a <getResultParameterCESQ+0x9e>
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	4413      	add	r3, r2
 8000616:	461a      	mov	r2, r3
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	4413      	add	r3, r2
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b0a      	cmp	r3, #10
 8000620:	d1dc      	bne.n	80005dc <getResultParameterCESQ+0x30>
			}
			return;
 8000622:	e012      	b.n	800064a <getResultParameterCESQ+0x9e>
		} else if(msg[i] == ','){
 8000624:	693b      	ldr	r3, [r7, #16]
 8000626:	683a      	ldr	r2, [r7, #0]
 8000628:	4413      	add	r3, r2
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b2c      	cmp	r3, #44	; 0x2c
 800062e:	d102      	bne.n	8000636 <getResultParameterCESQ+0x8a>
			commaCnt++;
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	3301      	adds	r3, #1
 8000634:	617b      	str	r3, [r7, #20]
		}
		i++;
 8000636:	693b      	ldr	r3, [r7, #16]
 8000638:	3301      	adds	r3, #1
 800063a:	613b      	str	r3, [r7, #16]
	while (msg[i] != '\0'){
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	683a      	ldr	r2, [r7, #0]
 8000640:	4413      	add	r3, r2
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d1bd      	bne.n	80005c4 <getResultParameterCESQ+0x18>
 8000648:	e000      	b.n	800064c <getResultParameterCESQ+0xa0>
			return;
 800064a:	bf00      	nop
	}
}
 800064c:	371c      	adds	r7, #28
 800064e:	46bd      	mov	sp, r7
 8000650:	bc80      	pop	{r7}
 8000652:	4770      	bx	lr
 8000654:	200015c8 	.word	0x200015c8

08000658 <getCSQResult>:

void getCSQResult(uint8_t * msg){
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	int i = 8;
 8000660:	2308      	movs	r3, #8
 8000662:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
	while (msg[i] != ',' && msg[i] != '\0' && msg[i] != '\r' && msg[i] != '\n' && j < 4){
 8000668:	e00e      	b.n	8000688 <getCSQResult+0x30>
		SARAcsqResult[j] = msg[i];
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	4413      	add	r3, r2
 8000670:	7819      	ldrb	r1, [r3, #0]
 8000672:	4a15      	ldr	r2, [pc, #84]	; (80006c8 <getCSQResult+0x70>)
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	4413      	add	r3, r2
 8000678:	460a      	mov	r2, r1
 800067a:	701a      	strb	r2, [r3, #0]
		i++;
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3301      	adds	r3, #1
 8000680:	60fb      	str	r3, [r7, #12]
		j++;
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	3301      	adds	r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
	while (msg[i] != ',' && msg[i] != '\0' && msg[i] != '\r' && msg[i] != '\n' && j < 4){
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	4413      	add	r3, r2
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b2c      	cmp	r3, #44	; 0x2c
 8000692:	d014      	beq.n	80006be <getCSQResult+0x66>
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	4413      	add	r3, r2
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d00e      	beq.n	80006be <getCSQResult+0x66>
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	4413      	add	r3, r2
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b0d      	cmp	r3, #13
 80006aa:	d008      	beq.n	80006be <getCSQResult+0x66>
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b0a      	cmp	r3, #10
 80006b6:	d002      	beq.n	80006be <getCSQResult+0x66>
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	2b03      	cmp	r3, #3
 80006bc:	ddd5      	ble.n	800066a <getCSQResult+0x12>
	}
}
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	20001444 	.word	0x20001444

080006cc <getGPSCoordinates>:

void getGPSCoordinates(){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
	int cnt = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
	memset(currentGPSCoords,'\0',80);
 80006d6:	2250      	movs	r2, #80	; 0x50
 80006d8:	2100      	movs	r1, #0
 80006da:	4821      	ldr	r0, [pc, #132]	; (8000760 <getGPSCoordinates+0x94>)
 80006dc:	f003 fbd8 	bl	8003e90 <memset>
	//HAL_UART_Receive(&huart1, trash, 128, 200);
    HAL_UART_Transmit(&huart1, getGPSCoordsCommand, strlen(getGPSCoordsCommand), 50);
 80006e0:	4820      	ldr	r0, [pc, #128]	; (8000764 <getGPSCoordinates+0x98>)
 80006e2:	f7ff fd35 	bl	8000150 <strlen>
 80006e6:	4603      	mov	r3, r0
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	2332      	movs	r3, #50	; 0x32
 80006ec:	491d      	ldr	r1, [pc, #116]	; (8000764 <getGPSCoordinates+0x98>)
 80006ee:	481e      	ldr	r0, [pc, #120]	; (8000768 <getGPSCoordinates+0x9c>)
 80006f0:	f001 ffb7 	bl	8002662 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart1, currentGPSCoords, 80, 250);
 80006f4:	23fa      	movs	r3, #250	; 0xfa
 80006f6:	2250      	movs	r2, #80	; 0x50
 80006f8:	4919      	ldr	r1, [pc, #100]	; (8000760 <getGPSCoordinates+0x94>)
 80006fa:	481b      	ldr	r0, [pc, #108]	; (8000768 <getGPSCoordinates+0x9c>)
 80006fc:	f002 f843 	bl	8002786 <HAL_UART_Receive>

    while (strlen(currentGPSCoords) < 18 && cnt < 5){ //arbitrary number, should be tweaked.
 8000700:	e021      	b.n	8000746 <getGPSCoordinates+0x7a>
    	memset(currentGPSCoords,'\0',80);
 8000702:	2250      	movs	r2, #80	; 0x50
 8000704:	2100      	movs	r1, #0
 8000706:	4816      	ldr	r0, [pc, #88]	; (8000760 <getGPSCoordinates+0x94>)
 8000708:	f003 fbc2 	bl	8003e90 <memset>
    	HAL_UART_Receive(&huart1, trash, 128, 250);
 800070c:	23fa      	movs	r3, #250	; 0xfa
 800070e:	2280      	movs	r2, #128	; 0x80
 8000710:	4916      	ldr	r1, [pc, #88]	; (800076c <getGPSCoordinates+0xa0>)
 8000712:	4815      	ldr	r0, [pc, #84]	; (8000768 <getGPSCoordinates+0x9c>)
 8000714:	f002 f837 	bl	8002786 <HAL_UART_Receive>
        HAL_UART_Transmit(&huart1, getGPSCoordsCommand, strlen(getGPSCoordsCommand), 50);
 8000718:	4812      	ldr	r0, [pc, #72]	; (8000764 <getGPSCoordinates+0x98>)
 800071a:	f7ff fd19 	bl	8000150 <strlen>
 800071e:	4603      	mov	r3, r0
 8000720:	b29a      	uxth	r2, r3
 8000722:	2332      	movs	r3, #50	; 0x32
 8000724:	490f      	ldr	r1, [pc, #60]	; (8000764 <getGPSCoordinates+0x98>)
 8000726:	4810      	ldr	r0, [pc, #64]	; (8000768 <getGPSCoordinates+0x9c>)
 8000728:	f001 ff9b 	bl	8002662 <HAL_UART_Transmit>
        HAL_UART_Receive(&huart1, currentGPSCoords, 80, 500);
 800072c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000730:	2250      	movs	r2, #80	; 0x50
 8000732:	490b      	ldr	r1, [pc, #44]	; (8000760 <getGPSCoordinates+0x94>)
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <getGPSCoordinates+0x9c>)
 8000736:	f002 f826 	bl	8002786 <HAL_UART_Receive>
        osDelay(250);
 800073a:	20fa      	movs	r0, #250	; 0xfa
 800073c:	f002 fa04 	bl	8002b48 <osDelay>
        cnt++;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3301      	adds	r3, #1
 8000744:	607b      	str	r3, [r7, #4]
    while (strlen(currentGPSCoords) < 18 && cnt < 5){ //arbitrary number, should be tweaked.
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <getGPSCoordinates+0x94>)
 8000748:	f7ff fd02 	bl	8000150 <strlen>
 800074c:	4603      	mov	r3, r0
 800074e:	2b11      	cmp	r3, #17
 8000750:	d802      	bhi.n	8000758 <getGPSCoordinates+0x8c>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	2b04      	cmp	r3, #4
 8000756:	ddd4      	ble.n	8000702 <getGPSCoordinates+0x36>
    }

}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20001578 	.word	0x20001578
 8000764:	200000c4 	.word	0x200000c4
 8000768:	200012b8 	.word	0x200012b8
 800076c:	200011e8 	.word	0x200011e8

08000770 <prepareSaraMeasurement>:

void prepareSaraMeasurement(int technology){
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	memset(SaraMeasurements,'\0',128);
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	2100      	movs	r1, #0
 800077c:	4822      	ldr	r0, [pc, #136]	; (8000808 <prepareSaraMeasurement+0x98>)
 800077e:	f003 fb87 	bl	8003e90 <memset>
	if (technology == SARA_LTEM){
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b07      	cmp	r3, #7
 8000786:	d103      	bne.n	8000790 <prepareSaraMeasurement+0x20>
		strcpy(SaraMeasurements,LTEMTechName);
 8000788:	4920      	ldr	r1, [pc, #128]	; (800080c <prepareSaraMeasurement+0x9c>)
 800078a:	481f      	ldr	r0, [pc, #124]	; (8000808 <prepareSaraMeasurement+0x98>)
 800078c:	f003 fc25 	bl	8003fda <strcpy>
	}
	if (technology == SARA_NBIOT){
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b08      	cmp	r3, #8
 8000794:	d103      	bne.n	800079e <prepareSaraMeasurement+0x2e>
		strcpy(SaraMeasurements,NBIoTTechName);
 8000796:	491e      	ldr	r1, [pc, #120]	; (8000810 <prepareSaraMeasurement+0xa0>)
 8000798:	481b      	ldr	r0, [pc, #108]	; (8000808 <prepareSaraMeasurement+0x98>)
 800079a:	f003 fc1e 	bl	8003fda <strcpy>
	}

	strcat(SaraMeasurements,currentGPSCoords);
 800079e:	491d      	ldr	r1, [pc, #116]	; (8000814 <prepareSaraMeasurement+0xa4>)
 80007a0:	4819      	ldr	r0, [pc, #100]	; (8000808 <prepareSaraMeasurement+0x98>)
 80007a2:	f003 fc0b 	bl	8003fbc <strcat>
	strcat(SaraMeasurements,SARARsrpRsrq);
 80007a6:	491c      	ldr	r1, [pc, #112]	; (8000818 <prepareSaraMeasurement+0xa8>)
 80007a8:	4817      	ldr	r0, [pc, #92]	; (8000808 <prepareSaraMeasurement+0x98>)
 80007aa:	f003 fc07 	bl	8003fbc <strcat>
	strcat(SaraMeasurements,",");
 80007ae:	4816      	ldr	r0, [pc, #88]	; (8000808 <prepareSaraMeasurement+0x98>)
 80007b0:	f7ff fcce 	bl	8000150 <strlen>
 80007b4:	4603      	mov	r3, r0
 80007b6:	461a      	mov	r2, r3
 80007b8:	4b13      	ldr	r3, [pc, #76]	; (8000808 <prepareSaraMeasurement+0x98>)
 80007ba:	4413      	add	r3, r2
 80007bc:	4917      	ldr	r1, [pc, #92]	; (800081c <prepareSaraMeasurement+0xac>)
 80007be:	461a      	mov	r2, r3
 80007c0:	460b      	mov	r3, r1
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	8013      	strh	r3, [r2, #0]
	strcat(SaraMeasurements,SARAcsqResult);
 80007c6:	4916      	ldr	r1, [pc, #88]	; (8000820 <prepareSaraMeasurement+0xb0>)
 80007c8:	480f      	ldr	r0, [pc, #60]	; (8000808 <prepareSaraMeasurement+0x98>)
 80007ca:	f003 fbf7 	bl	8003fbc <strcat>

	memset(currentGPSCoords,'\0',80);
 80007ce:	2250      	movs	r2, #80	; 0x50
 80007d0:	2100      	movs	r1, #0
 80007d2:	4810      	ldr	r0, [pc, #64]	; (8000814 <prepareSaraMeasurement+0xa4>)
 80007d4:	f003 fb5c 	bl	8003e90 <memset>
	memset(SARARsrpRsrq,'\0',6);
 80007d8:	2206      	movs	r2, #6
 80007da:	2100      	movs	r1, #0
 80007dc:	480e      	ldr	r0, [pc, #56]	; (8000818 <prepareSaraMeasurement+0xa8>)
 80007de:	f003 fb57 	bl	8003e90 <memset>
	memset(SARAcsqResult,'\0',4);
 80007e2:	2204      	movs	r2, #4
 80007e4:	2100      	movs	r1, #0
 80007e6:	480e      	ldr	r0, [pc, #56]	; (8000820 <prepareSaraMeasurement+0xb0>)
 80007e8:	f003 fb52 	bl	8003e90 <memset>

	memset(saraCESQmessage,'\0',70);
 80007ec:	2246      	movs	r2, #70	; 0x46
 80007ee:	2100      	movs	r1, #0
 80007f0:	480c      	ldr	r0, [pc, #48]	; (8000824 <prepareSaraMeasurement+0xb4>)
 80007f2:	f003 fb4d 	bl	8003e90 <memset>
	memset(saraCSQmessage,'\0',50);
 80007f6:	2232      	movs	r2, #50	; 0x32
 80007f8:	2100      	movs	r1, #0
 80007fa:	480b      	ldr	r0, [pc, #44]	; (8000828 <prepareSaraMeasurement+0xb8>)
 80007fc:	f003 fb48 	bl	8003e90 <memset>
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200012fc 	.word	0x200012fc
 800080c:	20000078 	.word	0x20000078
 8000810:	20000080 	.word	0x20000080
 8000814:	20001578 	.word	0x20001578
 8000818:	200015c8 	.word	0x200015c8
 800081c:	08005384 	.word	0x08005384
 8000820:	20001444 	.word	0x20001444
 8000824:	2000137c 	.word	0x2000137c
 8000828:	20001510 	.word	0x20001510

0800082c <NEMEUS_Extract_Lora_Measurements>:

void NEMEUS_Extract_Lora_Measurements(uint8_t * cmd){
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	int i = 8; // start after '+MAC: ' also contains 2 more of some ascii stuff???
 8000834:	2308      	movs	r3, #8
 8000836:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	60bb      	str	r3, [r7, #8]

	while(i < 69 && cmd[i] != '\n' && cmd[i] != '\0' && cmd[i] != '\r'){
 800083c:	e00e      	b.n	800085c <NEMEUS_Extract_Lora_Measurements+0x30>
		currentLoraSignalQuality[j] = cmd[i];
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	4413      	add	r3, r2
 8000844:	7819      	ldrb	r1, [r3, #0]
 8000846:	4a12      	ldr	r2, [pc, #72]	; (8000890 <NEMEUS_Extract_Lora_Measurements+0x64>)
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	4413      	add	r3, r2
 800084c:	460a      	mov	r2, r1
 800084e:	701a      	strb	r2, [r3, #0]
		i++;
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	3301      	adds	r3, #1
 8000854:	60fb      	str	r3, [r7, #12]
		j++;
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	3301      	adds	r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
	while(i < 69 && cmd[i] != '\n' && cmd[i] != '\0' && cmd[i] != '\r'){
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	2b44      	cmp	r3, #68	; 0x44
 8000860:	dc11      	bgt.n	8000886 <NEMEUS_Extract_Lora_Measurements+0x5a>
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	4413      	add	r3, r2
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b0a      	cmp	r3, #10
 800086c:	d00b      	beq.n	8000886 <NEMEUS_Extract_Lora_Measurements+0x5a>
 800086e:	68fb      	ldr	r3, [r7, #12]
 8000870:	687a      	ldr	r2, [r7, #4]
 8000872:	4413      	add	r3, r2
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d005      	beq.n	8000886 <NEMEUS_Extract_Lora_Measurements+0x5a>
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	4413      	add	r3, r2
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b0d      	cmp	r3, #13
 8000884:	d1db      	bne.n	800083e <NEMEUS_Extract_Lora_Measurements+0x12>
	}
}
 8000886:	bf00      	nop
 8000888:	3714      	adds	r7, #20
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	2000126c 	.word	0x2000126c

08000894 <NEMEUS_Prepare_Lora_Measurements>:

void NEMEUS_Prepare_Lora_Measurements(){
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

	strcpy(loraMeasurements,loraTechName);
 8000898:	4909      	ldr	r1, [pc, #36]	; (80008c0 <NEMEUS_Prepare_Lora_Measurements+0x2c>)
 800089a:	480a      	ldr	r0, [pc, #40]	; (80008c4 <NEMEUS_Prepare_Lora_Measurements+0x30>)
 800089c:	f003 fb9d 	bl	8003fda <strcpy>
	strcat(loraMeasurements,currentGPSCoords);
 80008a0:	4909      	ldr	r1, [pc, #36]	; (80008c8 <NEMEUS_Prepare_Lora_Measurements+0x34>)
 80008a2:	4808      	ldr	r0, [pc, #32]	; (80008c4 <NEMEUS_Prepare_Lora_Measurements+0x30>)
 80008a4:	f003 fb8a 	bl	8003fbc <strcat>
	strcat(loraMeasurements,currentLoraSignalQuality);
 80008a8:	4908      	ldr	r1, [pc, #32]	; (80008cc <NEMEUS_Prepare_Lora_Measurements+0x38>)
 80008aa:	4806      	ldr	r0, [pc, #24]	; (80008c4 <NEMEUS_Prepare_Lora_Measurements+0x30>)
 80008ac:	f003 fb86 	bl	8003fbc <strcat>

	memset(currentGPSCoords,'\0',80);
 80008b0:	2250      	movs	r2, #80	; 0x50
 80008b2:	2100      	movs	r1, #0
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <NEMEUS_Prepare_Lora_Measurements+0x34>)
 80008b6:	f003 faeb 	bl	8003e90 <memset>
}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000cc 	.word	0x200000cc
 80008c4:	200013c4 	.word	0x200013c4
 80008c8:	20001578 	.word	0x20001578
 80008cc:	2000126c 	.word	0x2000126c

080008d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d0:	b5b0      	push	{r4, r5, r7, lr}
 80008d2:	b08a      	sub	sp, #40	; 0x28
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d6:	f000 fd1b 	bl	8001310 <HAL_Init>

  /* USER CODE BEGIN Init */

  srand(time(0));
 80008da:	2000      	movs	r0, #0
 80008dc:	f003 fb9c 	bl	8004018 <time>
 80008e0:	4603      	mov	r3, r0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f003 fadc 	bl	8003ea0 <srand>
  int x = rand();
 80008e8:	f003 fb08 	bl	8003efc <rand>
 80008ec:	6278      	str	r0, [r7, #36]	; 0x24
  int y = rand();
 80008ee:	f003 fb05 	bl	8003efc <rand>
 80008f2:	6238      	str	r0, [r7, #32]
  sprintf(randSeq, "%X", x%16);
 80008f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f6:	425a      	negs	r2, r3
 80008f8:	f003 030f 	and.w	r3, r3, #15
 80008fc:	f002 020f 	and.w	r2, r2, #15
 8000900:	bf58      	it	pl
 8000902:	4253      	negpl	r3, r2
 8000904:	461a      	mov	r2, r3
 8000906:	491c      	ldr	r1, [pc, #112]	; (8000978 <main+0xa8>)
 8000908:	481c      	ldr	r0, [pc, #112]	; (800097c <main+0xac>)
 800090a:	f003 fb37 	bl	8003f7c <siprintf>
  sprintf(stry, "%X", y%16);
 800090e:	6a3b      	ldr	r3, [r7, #32]
 8000910:	425a      	negs	r2, r3
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	f002 020f 	and.w	r2, r2, #15
 800091a:	bf58      	it	pl
 800091c:	4253      	negpl	r3, r2
 800091e:	461a      	mov	r2, r3
 8000920:	4915      	ldr	r1, [pc, #84]	; (8000978 <main+0xa8>)
 8000922:	4817      	ldr	r0, [pc, #92]	; (8000980 <main+0xb0>)
 8000924:	f003 fb2a 	bl	8003f7c <siprintf>
  strcat(randSeq, stry);
 8000928:	4915      	ldr	r1, [pc, #84]	; (8000980 <main+0xb0>)
 800092a:	4814      	ldr	r0, [pc, #80]	; (800097c <main+0xac>)
 800092c:	f003 fb46 	bl	8003fbc <strcat>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000930:	f000 f82e 	bl	8000990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000934:	f000 f8e6 	bl	8000b04 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000938:	f000 f866 	bl	8000a08 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800093c:	f000 f88e 	bl	8000a5c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000940:	f000 f8b6 	bl	8000ab0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 7180 	mov.w	r1, #256	; 0x100
 800094a:	480e      	ldr	r0, [pc, #56]	; (8000984 <main+0xb4>)
 800094c:	f000 ff76 	bl	800183c <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <main+0xb8>)
 8000952:	1d3c      	adds	r4, r7, #4
 8000954:	461d      	mov	r5, r3
 8000956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800095a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800095e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f002 f8a2 	bl	8002ab0 <osThreadCreate>
 800096c:	4603      	mov	r3, r0
 800096e:	4a07      	ldr	r2, [pc, #28]	; (800098c <main+0xbc>)
 8000970:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000972:	f002 f896 	bl	8002aa2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000976:	e7fe      	b.n	8000976 <main+0xa6>
 8000978:	08005388 	.word	0x08005388
 800097c:	200015d0 	.word	0x200015d0
 8000980:	2000144c 	.word	0x2000144c
 8000984:	40010800 	.word	0x40010800
 8000988:	0800538c 	.word	0x0800538c
 800098c:	2000119c 	.word	0x2000119c

08000990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b090      	sub	sp, #64	; 0x40
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0318 	add.w	r3, r7, #24
 800099a:	2228      	movs	r2, #40	; 0x28
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f003 fa76 	bl	8003e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b2:	2302      	movs	r3, #2
 80009b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009b6:	2301      	movs	r3, #1
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ba:	2310      	movs	r3, #16
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009be:	2300      	movs	r3, #0
 80009c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	f107 0318 	add.w	r3, r7, #24
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 ff6a 	bl	80018a0 <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009d2:	f000 fa3d 	bl	8000e50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 f9d6 	bl	8001da0 <HAL_RCC_ClockConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009fa:	f000 fa29 	bl	8000e50 <Error_Handler>
  }
}
 80009fe:	bf00      	nop
 8000a00:	3740      	adds	r7, #64	; 0x40
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a14:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000a18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a40:	f001 fdc2 	bl	80025c8 <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a4a:	f000 fa01 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200012b8 	.word	0x200012b8
 8000a58:	40013800 	.word	0x40013800

08000a5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	; (8000aac <MX_USART2_UART_Init+0x50>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a68:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000a6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a94:	f001 fd98 	bl	80025c8 <HAL_UART_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a9e:	f000 f9d7 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200014d0 	.word	0x200014d0
 8000aac:	40004400 	.word	0x40004400

08000ab0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <MX_USART3_UART_Init+0x50>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000abc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ac0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ae8:	f001 fd6e 	bl	80025c8 <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000af2:	f000 f9ad 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200011a0 	.word	0x200011a0
 8000b00:	40004800 	.word	0x40004800

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b088      	sub	sp, #32
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0310 	add.w	r3, r7, #16
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b18:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <MX_GPIO_Init+0xb8>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	4a27      	ldr	r2, [pc, #156]	; (8000bbc <MX_GPIO_Init+0xb8>)
 8000b1e:	f043 0310 	orr.w	r3, r3, #16
 8000b22:	6193      	str	r3, [r2, #24]
 8000b24:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <MX_GPIO_Init+0xb8>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	f003 0310 	and.w	r3, r3, #16
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <MX_GPIO_Init+0xb8>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a21      	ldr	r2, [pc, #132]	; (8000bbc <MX_GPIO_Init+0xb8>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <MX_GPIO_Init+0xb8>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <MX_GPIO_Init+0xb8>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a1b      	ldr	r2, [pc, #108]	; (8000bbc <MX_GPIO_Init+0xb8>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <MX_GPIO_Init+0xb8>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0308 	and.w	r3, r3, #8
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b66:	4816      	ldr	r0, [pc, #88]	; (8000bc0 <MX_GPIO_Init+0xbc>)
 8000b68:	f000 fe68 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b72:	4814      	ldr	r0, [pc, #80]	; (8000bc4 <MX_GPIO_Init+0xc0>)
 8000b74:	f000 fe62 	bl	800183c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <MX_GPIO_Init+0xbc>)
 8000b92:	f000 fccf 	bl	8001534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	4619      	mov	r1, r3
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_GPIO_Init+0xc0>)
 8000bb0:	f000 fcc0 	bl	8001534 <HAL_GPIO_Init>

}
 8000bb4:	bf00      	nop
 8000bb6:	3720      	adds	r7, #32
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40011000 	.word	0x40011000
 8000bc4:	40010800 	.word	0x40010800

08000bc8 <sendToESP>:

/* USER CODE BEGIN 4 */

void sendToESP(uint8_t * msg) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, beginDelim, 1, 50);
 8000bd0:	2332      	movs	r3, #50	; 0x32
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	490b      	ldr	r1, [pc, #44]	; (8000c04 <sendToESP+0x3c>)
 8000bd6:	480c      	ldr	r0, [pc, #48]	; (8000c08 <sendToESP+0x40>)
 8000bd8:	f001 fd43 	bl	8002662 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, msg, strlen(msg), 50);
 8000bdc:	6878      	ldr	r0, [r7, #4]
 8000bde:	f7ff fab7 	bl	8000150 <strlen>
 8000be2:	4603      	mov	r3, r0
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	2332      	movs	r3, #50	; 0x32
 8000be8:	6879      	ldr	r1, [r7, #4]
 8000bea:	4807      	ldr	r0, [pc, #28]	; (8000c08 <sendToESP+0x40>)
 8000bec:	f001 fd39 	bl	8002662 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, endDelim, 1, 50);
 8000bf0:	2332      	movs	r3, #50	; 0x32
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4905      	ldr	r1, [pc, #20]	; (8000c0c <sendToESP+0x44>)
 8000bf6:	4804      	ldr	r0, [pc, #16]	; (8000c08 <sendToESP+0x40>)
 8000bf8:	f001 fd33 	bl	8002662 <HAL_UART_Transmit>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	200000d4 	.word	0x200000d4
 8000c08:	200014d0 	.word	0x200014d0
 8000c0c:	200000d8 	.word	0x200000d8

08000c10 <collectAndTransmitSARAMeasurement>:


void collectAndTransmitSARAMeasurement(){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0

    HAL_UART_Transmit(&huart1, SARAcesq, strlen(SARAcesq), 50);
 8000c14:	4814      	ldr	r0, [pc, #80]	; (8000c68 <collectAndTransmitSARAMeasurement+0x58>)
 8000c16:	f7ff fa9b 	bl	8000150 <strlen>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	2332      	movs	r3, #50	; 0x32
 8000c20:	4911      	ldr	r1, [pc, #68]	; (8000c68 <collectAndTransmitSARAMeasurement+0x58>)
 8000c22:	4812      	ldr	r0, [pc, #72]	; (8000c6c <collectAndTransmitSARAMeasurement+0x5c>)
 8000c24:	f001 fd1d 	bl	8002662 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart1, saraCESQmessage, 70, 150);
 8000c28:	2396      	movs	r3, #150	; 0x96
 8000c2a:	2246      	movs	r2, #70	; 0x46
 8000c2c:	4910      	ldr	r1, [pc, #64]	; (8000c70 <collectAndTransmitSARAMeasurement+0x60>)
 8000c2e:	480f      	ldr	r0, [pc, #60]	; (8000c6c <collectAndTransmitSARAMeasurement+0x5c>)
 8000c30:	f001 fda9 	bl	8002786 <HAL_UART_Receive>
    getResultParameterCESQ(4, saraCESQmessage);
 8000c34:	490e      	ldr	r1, [pc, #56]	; (8000c70 <collectAndTransmitSARAMeasurement+0x60>)
 8000c36:	2004      	movs	r0, #4
 8000c38:	f7ff fcb8 	bl	80005ac <getResultParameterCESQ>

    HAL_UART_Transmit(&huart1, SARAcsq, strlen(SARAcsq), 50);
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <collectAndTransmitSARAMeasurement+0x64>)
 8000c3e:	f7ff fa87 	bl	8000150 <strlen>
 8000c42:	4603      	mov	r3, r0
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	2332      	movs	r3, #50	; 0x32
 8000c48:	490a      	ldr	r1, [pc, #40]	; (8000c74 <collectAndTransmitSARAMeasurement+0x64>)
 8000c4a:	4808      	ldr	r0, [pc, #32]	; (8000c6c <collectAndTransmitSARAMeasurement+0x5c>)
 8000c4c:	f001 fd09 	bl	8002662 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart1, saraCSQmessage, 50, 150);
 8000c50:	2396      	movs	r3, #150	; 0x96
 8000c52:	2232      	movs	r2, #50	; 0x32
 8000c54:	4908      	ldr	r1, [pc, #32]	; (8000c78 <collectAndTransmitSARAMeasurement+0x68>)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <collectAndTransmitSARAMeasurement+0x5c>)
 8000c58:	f001 fd95 	bl	8002786 <HAL_UART_Receive>

    getCSQResult(saraCSQmessage);
 8000c5c:	4806      	ldr	r0, [pc, #24]	; (8000c78 <collectAndTransmitSARAMeasurement+0x68>)
 8000c5e:	f7ff fcfb 	bl	8000658 <getCSQResult>

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000005c 	.word	0x2000005c
 8000c6c:	200012b8 	.word	0x200012b8
 8000c70:	2000137c 	.word	0x2000137c
 8000c74:	20000050 	.word	0x20000050
 8000c78:	20001510 	.word	0x20001510

08000c7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b0b3      	sub	sp, #204	; 0xcc
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  uint8_t debugTest[] = "AT+DEBUG=ME?";
 8000c84:	4b5b      	ldr	r3, [pc, #364]	; (8000df4 <StartDefaultTask+0x178>)
 8000c86:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 8000c8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c8c:	c407      	stmia	r4!, {r0, r1, r2}
 8000c8e:	7023      	strb	r3, [r4, #0]
  osDelay(4500);
 8000c90:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c94:	f001 ff58 	bl	8002b48 <osDelay>
  SARA_Init();
 8000c98:	f7ff fa7a 	bl	8000190 <SARA_Init>
  nemeus_Power_Cycle();
 8000c9c:	f7ff faee 	bl	800027c <nemeus_Power_Cycle>
  uint8_t SigFoxMessage[69];
  //uint8_t saraMSG[69];

  for(;;)
  {
    osDelay(1000);
 8000ca0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca4:	f001 ff50 	bl	8002b48 <osDelay>
    //sendToESP(test);

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000ca8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cac:	4852      	ldr	r0, [pc, #328]	; (8000df8 <StartDefaultTask+0x17c>)
 8000cae:	f000 fddd 	bl	800186c <HAL_GPIO_TogglePin>

    // **** SARA STUFF ****
    // ********************

    SARA_ChangeTech('7');
 8000cb2:	2037      	movs	r0, #55	; 0x37
 8000cb4:	f7ff fb58 	bl	8000368 <SARA_ChangeTech>

    collectAndTransmitSARAMeasurement();
 8000cb8:	f7ff ffaa 	bl	8000c10 <collectAndTransmitSARAMeasurement>
    getGPSCoordinates();
 8000cbc:	f7ff fd06 	bl	80006cc <getGPSCoordinates>
    prepareSaraMeasurement(SARA_LTEM);
 8000cc0:	2007      	movs	r0, #7
 8000cc2:	f7ff fd55 	bl	8000770 <prepareSaraMeasurement>
    sendToESP(SaraMeasurements);
 8000cc6:	484d      	ldr	r0, [pc, #308]	; (8000dfc <StartDefaultTask+0x180>)
 8000cc8:	f7ff ff7e 	bl	8000bc8 <sendToESP>

    memset(SaraMeasurements, '\0', 128);
 8000ccc:	2280      	movs	r2, #128	; 0x80
 8000cce:	2100      	movs	r1, #0
 8000cd0:	484a      	ldr	r0, [pc, #296]	; (8000dfc <StartDefaultTask+0x180>)
 8000cd2:	f003 f8dd 	bl	8003e90 <memset>

	SARA_ChangeTech('9');
 8000cd6:	2039      	movs	r0, #57	; 0x39
 8000cd8:	f7ff fb46 	bl	8000368 <SARA_ChangeTech>

    collectAndTransmitSARAMeasurement();
 8000cdc:	f7ff ff98 	bl	8000c10 <collectAndTransmitSARAMeasurement>
    getGPSCoordinates();
 8000ce0:	f7ff fcf4 	bl	80006cc <getGPSCoordinates>
    prepareSaraMeasurement(SARA_NBIOT);
 8000ce4:	2008      	movs	r0, #8
 8000ce6:	f7ff fd43 	bl	8000770 <prepareSaraMeasurement>
    sendToESP(SaraMeasurements);
 8000cea:	4844      	ldr	r0, [pc, #272]	; (8000dfc <StartDefaultTask+0x180>)
 8000cec:	f7ff ff6c 	bl	8000bc8 <sendToESP>

    memset(SaraMeasurements, '\0', 128);
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4841      	ldr	r0, [pc, #260]	; (8000dfc <StartDefaultTask+0x180>)
 8000cf6:	f003 f8cb 	bl	8003e90 <memset>

    // **** NEMEUS STUFF ****
    // **********************

    HAL_UART_Transmit(&huart3, getLoraLCR, strlen(getLoraLCR), 50);
 8000cfa:	4841      	ldr	r0, [pc, #260]	; (8000e00 <StartDefaultTask+0x184>)
 8000cfc:	f7ff fa28 	bl	8000150 <strlen>
 8000d00:	4603      	mov	r3, r0
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	2332      	movs	r3, #50	; 0x32
 8000d06:	493e      	ldr	r1, [pc, #248]	; (8000e00 <StartDefaultTask+0x184>)
 8000d08:	483e      	ldr	r0, [pc, #248]	; (8000e04 <StartDefaultTask+0x188>)
 8000d0a:	f001 fcaa 	bl	8002662 <HAL_UART_Transmit>
    HAL_UART_Receive(&huart3, LoRaMessage, 69, 5000);
 8000d0e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000d12:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d16:	2245      	movs	r2, #69	; 0x45
 8000d18:	483a      	ldr	r0, [pc, #232]	; (8000e04 <StartDefaultTask+0x188>)
 8000d1a:	f001 fd34 	bl	8002786 <HAL_UART_Receive>

    //if(strcmp("\r\nERROR\r\n",LoRaMessage) == 0){
    if(strstr("ERROR",LoRaMessage) != NULL){
 8000d1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d22:	4619      	mov	r1, r3
 8000d24:	4838      	ldr	r0, [pc, #224]	; (8000e08 <StartDefaultTask+0x18c>)
 8000d26:	f003 f960 	bl	8003fea <strstr>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d020      	beq.n	8000d72 <StartDefaultTask+0xf6>
    	nemeus_Power_Cycle();
 8000d30:	f7ff faa4 	bl	800027c <nemeus_Power_Cycle>
    	memset(LoRaMessage, '\0', 69);
 8000d34:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d38:	2245      	movs	r2, #69	; 0x45
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f003 f8a7 	bl	8003e90 <memset>
    	HAL_UART_Receive(&huart3, trash, 128, 150);
 8000d42:	2396      	movs	r3, #150	; 0x96
 8000d44:	2280      	movs	r2, #128	; 0x80
 8000d46:	4931      	ldr	r1, [pc, #196]	; (8000e0c <StartDefaultTask+0x190>)
 8000d48:	482e      	ldr	r0, [pc, #184]	; (8000e04 <StartDefaultTask+0x188>)
 8000d4a:	f001 fd1c 	bl	8002786 <HAL_UART_Receive>
        HAL_UART_Transmit(&huart3, getLoraLCR, strlen(getLoraLCR), 50);
 8000d4e:	482c      	ldr	r0, [pc, #176]	; (8000e00 <StartDefaultTask+0x184>)
 8000d50:	f7ff f9fe 	bl	8000150 <strlen>
 8000d54:	4603      	mov	r3, r0
 8000d56:	b29a      	uxth	r2, r3
 8000d58:	2332      	movs	r3, #50	; 0x32
 8000d5a:	4929      	ldr	r1, [pc, #164]	; (8000e00 <StartDefaultTask+0x184>)
 8000d5c:	4829      	ldr	r0, [pc, #164]	; (8000e04 <StartDefaultTask+0x188>)
 8000d5e:	f001 fc80 	bl	8002662 <HAL_UART_Transmit>
        HAL_UART_Receive(&huart3, LoRaMessage, 69, 10000);
 8000d62:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000d66:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d6a:	2245      	movs	r2, #69	; 0x45
 8000d6c:	4825      	ldr	r0, [pc, #148]	; (8000e04 <StartDefaultTask+0x188>)
 8000d6e:	f001 fd0a 	bl	8002786 <HAL_UART_Receive>
    }
    NEMEUS_Extract_Lora_Measurements(LoRaMessage);
 8000d72:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fd58 	bl	800082c <NEMEUS_Extract_Lora_Measurements>

    getGPSCoordinates();
 8000d7c:	f7ff fca6 	bl	80006cc <getGPSCoordinates>

    NEMEUS_Prepare_Lora_Measurements();
 8000d80:	f7ff fd88 	bl	8000894 <NEMEUS_Prepare_Lora_Measurements>

    sendToESP(loraMeasurements);
 8000d84:	4822      	ldr	r0, [pc, #136]	; (8000e10 <StartDefaultTask+0x194>)
 8000d86:	f7ff ff1f 	bl	8000bc8 <sendToESP>

    HAL_UART_Transmit(&huart2, crlf, strlen(crlf), 50);
 8000d8a:	2332      	movs	r3, #50	; 0x32
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	4921      	ldr	r1, [pc, #132]	; (8000e14 <StartDefaultTask+0x198>)
 8000d90:	4821      	ldr	r0, [pc, #132]	; (8000e18 <StartDefaultTask+0x19c>)
 8000d92:	f001 fc66 	bl	8002662 <HAL_UART_Transmit>

    //memset(saraMSG,'\0', 69);
	memset(SigFoxMessage, '\0', 69);
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	2245      	movs	r2, #69	; 0x45
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f003 f876 	bl	8003e90 <memset>
	memset(LoRaMessage, '\0', 69);
 8000da4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000da8:	2245      	movs	r2, #69	; 0x45
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f003 f86f 	bl	8003e90 <memset>
	memset(currentGPSCoords,'\0',80);
 8000db2:	2250      	movs	r2, #80	; 0x50
 8000db4:	2100      	movs	r1, #0
 8000db6:	4819      	ldr	r0, [pc, #100]	; (8000e1c <StartDefaultTask+0x1a0>)
 8000db8:	f003 f86a 	bl	8003e90 <memset>
	memset(currentLoraSignalQuality,'\0',69);
 8000dbc:	2245      	movs	r2, #69	; 0x45
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4817      	ldr	r0, [pc, #92]	; (8000e20 <StartDefaultTask+0x1a4>)
 8000dc2:	f003 f865 	bl	8003e90 <memset>
	memset(loraMeasurements,'\0',128);
 8000dc6:	2280      	movs	r2, #128	; 0x80
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4811      	ldr	r0, [pc, #68]	; (8000e10 <StartDefaultTask+0x194>)
 8000dcc:	f003 f860 	bl	8003e90 <memset>
	memset(sigfoxMeasurements,'\0',128);
 8000dd0:	2280      	movs	r2, #128	; 0x80
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4813      	ldr	r0, [pc, #76]	; (8000e24 <StartDefaultTask+0x1a8>)
 8000dd6:	f003 f85b 	bl	8003e90 <memset>
	memset(sigfoxSend,'\0',30);
 8000dda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000dde:	221e      	movs	r2, #30
 8000de0:	2100      	movs	r1, #0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 f854 	bl	8003e90 <memset>
	sigFoxSeq++;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <StartDefaultTask+0x1ac>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <StartDefaultTask+0x1ac>)
 8000df0:	6013      	str	r3, [r2, #0]
  {
 8000df2:	e755      	b.n	8000ca0 <StartDefaultTask+0x24>
 8000df4:	080053b0 	.word	0x080053b0
 8000df8:	40011000 	.word	0x40011000
 8000dfc:	200012fc 	.word	0x200012fc
 8000e00:	200000a8 	.word	0x200000a8
 8000e04:	200011a0 	.word	0x200011a0
 8000e08:	080053a8 	.word	0x080053a8
 8000e0c:	200011e8 	.word	0x200011e8
 8000e10:	200013c4 	.word	0x200013c4
 8000e14:	080053d8 	.word	0x080053d8
 8000e18:	200014d0 	.word	0x200014d0
 8000e1c:	20001578 	.word	0x20001578
 8000e20:	2000126c 	.word	0x2000126c
 8000e24:	20001450 	.word	0x20001450
 8000e28:	200003c0 	.word	0x200003c0

08000e2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d101      	bne.n	8000e42 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e3e:	f000 fa7d 	bl	800133c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40012c00 	.word	0x40012c00

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <Error_Handler+0x8>
	...

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e62:	4b18      	ldr	r3, [pc, #96]	; (8000ec4 <HAL_MspInit+0x68>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <HAL_MspInit+0x68>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6193      	str	r3, [r2, #24]
 8000e6e:	4b15      	ldr	r3, [pc, #84]	; (8000ec4 <HAL_MspInit+0x68>)
 8000e70:	699b      	ldr	r3, [r3, #24]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <HAL_MspInit+0x68>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	4a11      	ldr	r2, [pc, #68]	; (8000ec4 <HAL_MspInit+0x68>)
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e84:	61d3      	str	r3, [r2, #28]
 8000e86:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <HAL_MspInit+0x68>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e92:	2200      	movs	r2, #0
 8000e94:	210f      	movs	r1, #15
 8000e96:	f06f 0001 	mvn.w	r0, #1
 8000e9a:	f000 fb20 	bl	80014de <HAL_NVIC_SetPriority>

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <HAL_MspInit+0x6c>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_MspInit+0x6c>)
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	40010000 	.word	0x40010000

08000ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	; 0x30
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	f107 0320 	add.w	r3, r7, #32
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a53      	ldr	r2, [pc, #332]	; (8001034 <HAL_UART_MspInit+0x168>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d132      	bne.n	8000f52 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eec:	4b52      	ldr	r3, [pc, #328]	; (8001038 <HAL_UART_MspInit+0x16c>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a51      	ldr	r2, [pc, #324]	; (8001038 <HAL_UART_MspInit+0x16c>)
 8000ef2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b4f      	ldr	r3, [pc, #316]	; (8001038 <HAL_UART_MspInit+0x16c>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f00:	61fb      	str	r3, [r7, #28]
 8000f02:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4b4c      	ldr	r3, [pc, #304]	; (8001038 <HAL_UART_MspInit+0x16c>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a4b      	ldr	r2, [pc, #300]	; (8001038 <HAL_UART_MspInit+0x16c>)
 8000f0a:	f043 0304 	orr.w	r3, r3, #4
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b49      	ldr	r3, [pc, #292]	; (8001038 <HAL_UART_MspInit+0x16c>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0304 	and.w	r3, r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
 8000f1a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4842      	ldr	r0, [pc, #264]	; (800103c <HAL_UART_MspInit+0x170>)
 8000f32:	f000 faff 	bl	8001534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0320 	add.w	r3, r7, #32
 8000f48:	4619      	mov	r1, r3
 8000f4a:	483c      	ldr	r0, [pc, #240]	; (800103c <HAL_UART_MspInit+0x170>)
 8000f4c:	f000 faf2 	bl	8001534 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f50:	e06c      	b.n	800102c <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a3a      	ldr	r2, [pc, #232]	; (8001040 <HAL_UART_MspInit+0x174>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d130      	bne.n	8000fbe <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f5c:	4b36      	ldr	r3, [pc, #216]	; (8001038 <HAL_UART_MspInit+0x16c>)
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	4a35      	ldr	r2, [pc, #212]	; (8001038 <HAL_UART_MspInit+0x16c>)
 8000f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f66:	61d3      	str	r3, [r2, #28]
 8000f68:	4b33      	ldr	r3, [pc, #204]	; (8001038 <HAL_UART_MspInit+0x16c>)
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f74:	4b30      	ldr	r3, [pc, #192]	; (8001038 <HAL_UART_MspInit+0x16c>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a2f      	ldr	r2, [pc, #188]	; (8001038 <HAL_UART_MspInit+0x16c>)
 8000f7a:	f043 0304 	orr.w	r3, r3, #4
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <HAL_UART_MspInit+0x16c>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f107 0320 	add.w	r3, r7, #32
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4827      	ldr	r0, [pc, #156]	; (800103c <HAL_UART_MspInit+0x170>)
 8000fa0:	f000 fac8 	bl	8001534 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4821      	ldr	r0, [pc, #132]	; (800103c <HAL_UART_MspInit+0x170>)
 8000fb8:	f000 fabc 	bl	8001534 <HAL_GPIO_Init>
}
 8000fbc:	e036      	b.n	800102c <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART3)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a20      	ldr	r2, [pc, #128]	; (8001044 <HAL_UART_MspInit+0x178>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d131      	bne.n	800102c <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <HAL_UART_MspInit+0x16c>)
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	4a1a      	ldr	r2, [pc, #104]	; (8001038 <HAL_UART_MspInit+0x16c>)
 8000fce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd2:	61d3      	str	r3, [r2, #28]
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_UART_MspInit+0x16c>)
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe0:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_UART_MspInit+0x16c>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a14      	ldr	r2, [pc, #80]	; (8001038 <HAL_UART_MspInit+0x16c>)
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_UART_MspInit+0x16c>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0308 	and.w	r3, r3, #8
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ffc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f107 0320 	add.w	r3, r7, #32
 800100a:	4619      	mov	r1, r3
 800100c:	480e      	ldr	r0, [pc, #56]	; (8001048 <HAL_UART_MspInit+0x17c>)
 800100e:	f000 fa91 	bl	8001534 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001012:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001018:	2300      	movs	r3, #0
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f107 0320 	add.w	r3, r7, #32
 8001024:	4619      	mov	r1, r3
 8001026:	4808      	ldr	r0, [pc, #32]	; (8001048 <HAL_UART_MspInit+0x17c>)
 8001028:	f000 fa84 	bl	8001534 <HAL_GPIO_Init>
}
 800102c:	bf00      	nop
 800102e:	3730      	adds	r7, #48	; 0x30
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40013800 	.word	0x40013800
 8001038:	40021000 	.word	0x40021000
 800103c:	40010800 	.word	0x40010800
 8001040:	40004400 	.word	0x40004400
 8001044:	40004800 	.word	0x40004800
 8001048:	40010c00 	.word	0x40010c00

0800104c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	; 0x30
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 800105c:	2200      	movs	r2, #0
 800105e:	6879      	ldr	r1, [r7, #4]
 8001060:	2019      	movs	r0, #25
 8001062:	f000 fa3c 	bl	80014de <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001066:	2019      	movs	r0, #25
 8001068:	f000 fa55 	bl	8001516 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800106c:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <HAL_InitTick+0x9c>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a1d      	ldr	r2, [pc, #116]	; (80010e8 <HAL_InitTick+0x9c>)
 8001072:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <HAL_InitTick+0x9c>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001084:	f107 0210 	add.w	r2, r7, #16
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4611      	mov	r1, r2
 800108e:	4618      	mov	r0, r3
 8001090:	f001 f802 	bl	8002098 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001094:	f000 ffec 	bl	8002070 <HAL_RCC_GetPCLK2Freq>
 8001098:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800109a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109c:	4a13      	ldr	r2, [pc, #76]	; (80010ec <HAL_InitTick+0xa0>)
 800109e:	fba2 2303 	umull	r2, r3, r2, r3
 80010a2:	0c9b      	lsrs	r3, r3, #18
 80010a4:	3b01      	subs	r3, #1
 80010a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <HAL_InitTick+0xa4>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <HAL_InitTick+0xa8>)
 80010ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <HAL_InitTick+0xa4>)
 80010b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010b4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010b6:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <HAL_InitTick+0xa4>)
 80010b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ba:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_InitTick+0xa4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <HAL_InitTick+0xa4>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <HAL_InitTick+0xa4>)
 80010ca:	f001 f833 	bl	8002134 <HAL_TIM_Base_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d104      	bne.n	80010de <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80010d4:	4806      	ldr	r0, [pc, #24]	; (80010f0 <HAL_InitTick+0xa4>)
 80010d6:	f001 f885 	bl	80021e4 <HAL_TIM_Base_Start_IT>
 80010da:	4603      	mov	r3, r0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3730      	adds	r7, #48	; 0x30
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40021000 	.word	0x40021000
 80010ec:	431bde83 	.word	0x431bde83
 80010f0:	200015d4 	.word	0x200015d4
 80010f4:	40012c00 	.word	0x40012c00

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <NMI_Handler+0x4>

080010fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <HardFault_Handler+0x4>

08001104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <MemManage_Handler+0x4>

0800110a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <UsageFault_Handler+0x4>

08001116 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr
	...

08001124 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <TIM1_UP_IRQHandler+0x10>)
 800112a:	f001 f8ad 	bl	8002288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200015d4 	.word	0x200015d4

08001138 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
	return 1;
 800113c:	2301      	movs	r3, #1
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr

08001146 <_kill>:

int _kill(int pid, int sig)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001150:	f002 fe66 	bl	8003e20 <__errno>
 8001154:	4603      	mov	r3, r0
 8001156:	2216      	movs	r2, #22
 8001158:	601a      	str	r2, [r3, #0]
	return -1;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_exit>:

void _exit (int status)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800116e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffe7 	bl	8001146 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001178:	e7fe      	b.n	8001178 <_exit+0x12>

0800117a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	60f8      	str	r0, [r7, #12]
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
 800118a:	e00a      	b.n	80011a2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800118c:	f3af 8000 	nop.w
 8001190:	4601      	mov	r1, r0
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	60ba      	str	r2, [r7, #8]
 8001198:	b2ca      	uxtb	r2, r1
 800119a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	3301      	adds	r3, #1
 80011a0:	617b      	str	r3, [r7, #20]
 80011a2:	697a      	ldr	r2, [r7, #20]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	dbf0      	blt.n	800118c <_read+0x12>
	}

return len;
 80011aa:	687b      	ldr	r3, [r7, #4]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3718      	adds	r7, #24
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
 80011c4:	e009      	b.n	80011da <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1c5a      	adds	r2, r3, #1
 80011ca:	60ba      	str	r2, [r7, #8]
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	3301      	adds	r3, #1
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	429a      	cmp	r2, r3
 80011e0:	dbf1      	blt.n	80011c6 <_write+0x12>
	}
	return len;
 80011e2:	687b      	ldr	r3, [r7, #4]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <_close>:

int _close(int file)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	return -1;
 80011f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr

08001202 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
 800120a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001212:	605a      	str	r2, [r3, #4]
	return 0;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <_isatty>:

int _isatty(int file)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	return 1;
 8001228:	2301      	movs	r3, #1
}
 800122a:	4618      	mov	r0, r3
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr

08001234 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
	return 0;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3714      	adds	r7, #20
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr

0800124c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001254:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <_sbrk+0x5c>)
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <_sbrk+0x60>)
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001260:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001268:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <_sbrk+0x64>)
 800126a:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <_sbrk+0x68>)
 800126c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800126e:	4b10      	ldr	r3, [pc, #64]	; (80012b0 <_sbrk+0x64>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4413      	add	r3, r2
 8001276:	693a      	ldr	r2, [r7, #16]
 8001278:	429a      	cmp	r2, r3
 800127a:	d207      	bcs.n	800128c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800127c:	f002 fdd0 	bl	8003e20 <__errno>
 8001280:	4603      	mov	r3, r0
 8001282:	220c      	movs	r2, #12
 8001284:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800128a:	e009      	b.n	80012a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <_sbrk+0x64>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001292:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <_sbrk+0x64>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4413      	add	r3, r2
 800129a:	4a05      	ldr	r2, [pc, #20]	; (80012b0 <_sbrk+0x64>)
 800129c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800129e:	68fb      	ldr	r3, [r7, #12]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20005000 	.word	0x20005000
 80012ac:	00000400 	.word	0x00000400
 80012b0:	200003c4 	.word	0x200003c4
 80012b4:	20001630 	.word	0x20001630

080012b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80012c4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80012c6:	e003      	b.n	80012d0 <LoopCopyDataInit>

080012c8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80012c8:	4b0b      	ldr	r3, [pc, #44]	; (80012f8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80012ca:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80012cc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80012ce:	3104      	adds	r1, #4

080012d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80012d0:	480a      	ldr	r0, [pc, #40]	; (80012fc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80012d4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80012d6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012d8:	d3f6      	bcc.n	80012c8 <CopyDataInit>
  ldr r2, =_sbss
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80012dc:	e002      	b.n	80012e4 <LoopFillZerobss>

080012de <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  str r3, [r2], #4
 80012e0:	f842 3b04 	str.w	r3, [r2], #4

080012e4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80012e6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012e8:	d3f9      	bcc.n	80012de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012ea:	f7ff ffe5 	bl	80012b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ee:	f002 fd9d 	bl	8003e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012f2:	f7ff faed 	bl	80008d0 <main>
  bx lr
 80012f6:	4770      	bx	lr
  ldr r3, =_sidata
 80012f8:	08005548 	.word	0x08005548
  ldr r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001300:	20000150 	.word	0x20000150
  ldr r2, =_sbss
 8001304:	20000150 	.word	0x20000150
  ldr r3, = _ebss
 8001308:	20001630 	.word	0x20001630

0800130c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC1_2_IRQHandler>
	...

08001310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_Init+0x28>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_Init+0x28>)
 800131a:	f043 0310 	orr.w	r3, r3, #16
 800131e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001320:	2003      	movs	r0, #3
 8001322:	f000 f8d1 	bl	80014c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001326:	2000      	movs	r0, #0
 8001328:	f7ff fe90 	bl	800104c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800132c:	f7ff fd96 	bl	8000e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40022000 	.word	0x40022000

0800133c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001340:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_IncTick+0x1c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b05      	ldr	r3, [pc, #20]	; (800135c <HAL_IncTick+0x20>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a03      	ldr	r2, [pc, #12]	; (800135c <HAL_IncTick+0x20>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	200000e4 	.word	0x200000e4
 800135c:	2000161c 	.word	0x2000161c

08001360 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return uwTick;
 8001364:	4b02      	ldr	r3, [pc, #8]	; (8001370 <HAL_GetTick+0x10>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	2000161c 	.word	0x2000161c

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800139c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a6:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	60d3      	str	r3, [r2, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bc80      	pop	{r7}
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db0b      	blt.n	8001402 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	f003 021f 	and.w	r2, r3, #31
 80013f0:	4906      	ldr	r1, [pc, #24]	; (800140c <__NVIC_EnableIRQ+0x34>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	2001      	movs	r0, #1
 80013fa:	fa00 f202 	lsl.w	r2, r0, r2
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	e000e100 	.word	0xe000e100

08001410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001420:	2b00      	cmp	r3, #0
 8001422:	db0a      	blt.n	800143a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	b2da      	uxtb	r2, r3
 8001428:	490c      	ldr	r1, [pc, #48]	; (800145c <__NVIC_SetPriority+0x4c>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	0112      	lsls	r2, r2, #4
 8001430:	b2d2      	uxtb	r2, r2
 8001432:	440b      	add	r3, r1
 8001434:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001438:	e00a      	b.n	8001450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4908      	ldr	r1, [pc, #32]	; (8001460 <__NVIC_SetPriority+0x50>)
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	3b04      	subs	r3, #4
 8001448:	0112      	lsls	r2, r2, #4
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	440b      	add	r3, r1
 800144e:	761a      	strb	r2, [r3, #24]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	e000e100 	.word	0xe000e100
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001464:	b480      	push	{r7}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	f1c3 0307 	rsb	r3, r3, #7
 800147e:	2b04      	cmp	r3, #4
 8001480:	bf28      	it	cs
 8001482:	2304      	movcs	r3, #4
 8001484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3304      	adds	r3, #4
 800148a:	2b06      	cmp	r3, #6
 800148c:	d902      	bls.n	8001494 <NVIC_EncodePriority+0x30>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3b03      	subs	r3, #3
 8001492:	e000      	b.n	8001496 <NVIC_EncodePriority+0x32>
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001498:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	43da      	mvns	r2, r3
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	401a      	ands	r2, r3
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	fa01 f303 	lsl.w	r3, r1, r3
 80014b6:	43d9      	mvns	r1, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014bc:	4313      	orrs	r3, r2
         );
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3724      	adds	r7, #36	; 0x24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ff4f 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	4603      	mov	r3, r0
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
 80014ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f0:	f7ff ff64 	bl	80013bc <__NVIC_GetPriorityGrouping>
 80014f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ffb2 	bl	8001464 <NVIC_EncodePriority>
 8001500:	4602      	mov	r2, r0
 8001502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff81 	bl	8001410 <__NVIC_SetPriority>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff57 	bl	80013d8 <__NVIC_EnableIRQ>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001534:	b480      	push	{r7}
 8001536:	b08b      	sub	sp, #44	; 0x2c
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001546:	e169      	b.n	800181c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001548:	2201      	movs	r2, #1
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	69fa      	ldr	r2, [r7, #28]
 8001558:	4013      	ands	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	429a      	cmp	r2, r3
 8001562:	f040 8158 	bne.w	8001816 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4a9a      	ldr	r2, [pc, #616]	; (80017d4 <HAL_GPIO_Init+0x2a0>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d05e      	beq.n	800162e <HAL_GPIO_Init+0xfa>
 8001570:	4a98      	ldr	r2, [pc, #608]	; (80017d4 <HAL_GPIO_Init+0x2a0>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d875      	bhi.n	8001662 <HAL_GPIO_Init+0x12e>
 8001576:	4a98      	ldr	r2, [pc, #608]	; (80017d8 <HAL_GPIO_Init+0x2a4>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d058      	beq.n	800162e <HAL_GPIO_Init+0xfa>
 800157c:	4a96      	ldr	r2, [pc, #600]	; (80017d8 <HAL_GPIO_Init+0x2a4>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d86f      	bhi.n	8001662 <HAL_GPIO_Init+0x12e>
 8001582:	4a96      	ldr	r2, [pc, #600]	; (80017dc <HAL_GPIO_Init+0x2a8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d052      	beq.n	800162e <HAL_GPIO_Init+0xfa>
 8001588:	4a94      	ldr	r2, [pc, #592]	; (80017dc <HAL_GPIO_Init+0x2a8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d869      	bhi.n	8001662 <HAL_GPIO_Init+0x12e>
 800158e:	4a94      	ldr	r2, [pc, #592]	; (80017e0 <HAL_GPIO_Init+0x2ac>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d04c      	beq.n	800162e <HAL_GPIO_Init+0xfa>
 8001594:	4a92      	ldr	r2, [pc, #584]	; (80017e0 <HAL_GPIO_Init+0x2ac>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d863      	bhi.n	8001662 <HAL_GPIO_Init+0x12e>
 800159a:	4a92      	ldr	r2, [pc, #584]	; (80017e4 <HAL_GPIO_Init+0x2b0>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d046      	beq.n	800162e <HAL_GPIO_Init+0xfa>
 80015a0:	4a90      	ldr	r2, [pc, #576]	; (80017e4 <HAL_GPIO_Init+0x2b0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d85d      	bhi.n	8001662 <HAL_GPIO_Init+0x12e>
 80015a6:	2b12      	cmp	r3, #18
 80015a8:	d82a      	bhi.n	8001600 <HAL_GPIO_Init+0xcc>
 80015aa:	2b12      	cmp	r3, #18
 80015ac:	d859      	bhi.n	8001662 <HAL_GPIO_Init+0x12e>
 80015ae:	a201      	add	r2, pc, #4	; (adr r2, 80015b4 <HAL_GPIO_Init+0x80>)
 80015b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b4:	0800162f 	.word	0x0800162f
 80015b8:	08001609 	.word	0x08001609
 80015bc:	0800161b 	.word	0x0800161b
 80015c0:	0800165d 	.word	0x0800165d
 80015c4:	08001663 	.word	0x08001663
 80015c8:	08001663 	.word	0x08001663
 80015cc:	08001663 	.word	0x08001663
 80015d0:	08001663 	.word	0x08001663
 80015d4:	08001663 	.word	0x08001663
 80015d8:	08001663 	.word	0x08001663
 80015dc:	08001663 	.word	0x08001663
 80015e0:	08001663 	.word	0x08001663
 80015e4:	08001663 	.word	0x08001663
 80015e8:	08001663 	.word	0x08001663
 80015ec:	08001663 	.word	0x08001663
 80015f0:	08001663 	.word	0x08001663
 80015f4:	08001663 	.word	0x08001663
 80015f8:	08001611 	.word	0x08001611
 80015fc:	08001625 	.word	0x08001625
 8001600:	4a79      	ldr	r2, [pc, #484]	; (80017e8 <HAL_GPIO_Init+0x2b4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d013      	beq.n	800162e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001606:	e02c      	b.n	8001662 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	623b      	str	r3, [r7, #32]
          break;
 800160e:	e029      	b.n	8001664 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	3304      	adds	r3, #4
 8001616:	623b      	str	r3, [r7, #32]
          break;
 8001618:	e024      	b.n	8001664 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	3308      	adds	r3, #8
 8001620:	623b      	str	r3, [r7, #32]
          break;
 8001622:	e01f      	b.n	8001664 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	330c      	adds	r3, #12
 800162a:	623b      	str	r3, [r7, #32]
          break;
 800162c:	e01a      	b.n	8001664 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d102      	bne.n	800163c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001636:	2304      	movs	r3, #4
 8001638:	623b      	str	r3, [r7, #32]
          break;
 800163a:	e013      	b.n	8001664 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d105      	bne.n	8001650 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001644:	2308      	movs	r3, #8
 8001646:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	611a      	str	r2, [r3, #16]
          break;
 800164e:	e009      	b.n	8001664 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001650:	2308      	movs	r3, #8
 8001652:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	615a      	str	r2, [r3, #20]
          break;
 800165a:	e003      	b.n	8001664 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800165c:	2300      	movs	r3, #0
 800165e:	623b      	str	r3, [r7, #32]
          break;
 8001660:	e000      	b.n	8001664 <HAL_GPIO_Init+0x130>
          break;
 8001662:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	2bff      	cmp	r3, #255	; 0xff
 8001668:	d801      	bhi.n	800166e <HAL_GPIO_Init+0x13a>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	e001      	b.n	8001672 <HAL_GPIO_Init+0x13e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3304      	adds	r3, #4
 8001672:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	2bff      	cmp	r3, #255	; 0xff
 8001678:	d802      	bhi.n	8001680 <HAL_GPIO_Init+0x14c>
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	e002      	b.n	8001686 <HAL_GPIO_Init+0x152>
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	3b08      	subs	r3, #8
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	210f      	movs	r1, #15
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	fa01 f303 	lsl.w	r3, r1, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	401a      	ands	r2, r3
 8001698:	6a39      	ldr	r1, [r7, #32]
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	431a      	orrs	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f000 80b1 	beq.w	8001816 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016b4:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <HAL_GPIO_Init+0x2b8>)
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	4a4c      	ldr	r2, [pc, #304]	; (80017ec <HAL_GPIO_Init+0x2b8>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6193      	str	r3, [r2, #24]
 80016c0:	4b4a      	ldr	r3, [pc, #296]	; (80017ec <HAL_GPIO_Init+0x2b8>)
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016cc:	4a48      	ldr	r2, [pc, #288]	; (80017f0 <HAL_GPIO_Init+0x2bc>)
 80016ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d0:	089b      	lsrs	r3, r3, #2
 80016d2:	3302      	adds	r3, #2
 80016d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	220f      	movs	r2, #15
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	4013      	ands	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a40      	ldr	r2, [pc, #256]	; (80017f4 <HAL_GPIO_Init+0x2c0>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d013      	beq.n	8001720 <HAL_GPIO_Init+0x1ec>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a3f      	ldr	r2, [pc, #252]	; (80017f8 <HAL_GPIO_Init+0x2c4>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d00d      	beq.n	800171c <HAL_GPIO_Init+0x1e8>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a3e      	ldr	r2, [pc, #248]	; (80017fc <HAL_GPIO_Init+0x2c8>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d007      	beq.n	8001718 <HAL_GPIO_Init+0x1e4>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a3d      	ldr	r2, [pc, #244]	; (8001800 <HAL_GPIO_Init+0x2cc>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d101      	bne.n	8001714 <HAL_GPIO_Init+0x1e0>
 8001710:	2303      	movs	r3, #3
 8001712:	e006      	b.n	8001722 <HAL_GPIO_Init+0x1ee>
 8001714:	2304      	movs	r3, #4
 8001716:	e004      	b.n	8001722 <HAL_GPIO_Init+0x1ee>
 8001718:	2302      	movs	r3, #2
 800171a:	e002      	b.n	8001722 <HAL_GPIO_Init+0x1ee>
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <HAL_GPIO_Init+0x1ee>
 8001720:	2300      	movs	r3, #0
 8001722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001724:	f002 0203 	and.w	r2, r2, #3
 8001728:	0092      	lsls	r2, r2, #2
 800172a:	4093      	lsls	r3, r2
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	4313      	orrs	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001732:	492f      	ldr	r1, [pc, #188]	; (80017f0 <HAL_GPIO_Init+0x2bc>)
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001736:	089b      	lsrs	r3, r3, #2
 8001738:	3302      	adds	r3, #2
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d006      	beq.n	800175a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	492c      	ldr	r1, [pc, #176]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	600b      	str	r3, [r1, #0]
 8001758:	e006      	b.n	8001768 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800175a:	4b2a      	ldr	r3, [pc, #168]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	43db      	mvns	r3, r3
 8001762:	4928      	ldr	r1, [pc, #160]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 8001764:	4013      	ands	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d006      	beq.n	8001782 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001774:	4b23      	ldr	r3, [pc, #140]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	4922      	ldr	r1, [pc, #136]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 800177a:	69bb      	ldr	r3, [r7, #24]
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001782:	4b20      	ldr	r3, [pc, #128]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	43db      	mvns	r3, r3
 800178a:	491e      	ldr	r1, [pc, #120]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 800178c:	4013      	ands	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d006      	beq.n	80017aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	4918      	ldr	r1, [pc, #96]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	608b      	str	r3, [r1, #8]
 80017a8:	e006      	b.n	80017b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017aa:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 80017ac:	689a      	ldr	r2, [r3, #8]
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	4914      	ldr	r1, [pc, #80]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d021      	beq.n	8001808 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	490e      	ldr	r1, [pc, #56]	; (8001804 <HAL_GPIO_Init+0x2d0>)
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	60cb      	str	r3, [r1, #12]
 80017d0:	e021      	b.n	8001816 <HAL_GPIO_Init+0x2e2>
 80017d2:	bf00      	nop
 80017d4:	10320000 	.word	0x10320000
 80017d8:	10310000 	.word	0x10310000
 80017dc:	10220000 	.word	0x10220000
 80017e0:	10210000 	.word	0x10210000
 80017e4:	10120000 	.word	0x10120000
 80017e8:	10110000 	.word	0x10110000
 80017ec:	40021000 	.word	0x40021000
 80017f0:	40010000 	.word	0x40010000
 80017f4:	40010800 	.word	0x40010800
 80017f8:	40010c00 	.word	0x40010c00
 80017fc:	40011000 	.word	0x40011000
 8001800:	40011400 	.word	0x40011400
 8001804:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_GPIO_Init+0x304>)
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	43db      	mvns	r3, r3
 8001810:	4909      	ldr	r1, [pc, #36]	; (8001838 <HAL_GPIO_Init+0x304>)
 8001812:	4013      	ands	r3, r2
 8001814:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	3301      	adds	r3, #1
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	fa22 f303 	lsr.w	r3, r2, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	f47f ae8e 	bne.w	8001548 <HAL_GPIO_Init+0x14>
  }
}
 800182c:	bf00      	nop
 800182e:	bf00      	nop
 8001830:	372c      	adds	r7, #44	; 0x2c
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	40010400 	.word	0x40010400

0800183c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	460b      	mov	r3, r1
 8001846:	807b      	strh	r3, [r7, #2]
 8001848:	4613      	mov	r3, r2
 800184a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800184c:	787b      	ldrb	r3, [r7, #1]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001852:	887a      	ldrh	r2, [r7, #2]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001858:	e003      	b.n	8001862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800185a:	887b      	ldrh	r3, [r7, #2]
 800185c:	041a      	lsls	r2, r3, #16
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	611a      	str	r2, [r3, #16]
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800187e:	887a      	ldrh	r2, [r7, #2]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4013      	ands	r3, r2
 8001884:	041a      	lsls	r2, r3, #16
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43d9      	mvns	r1, r3
 800188a:	887b      	ldrh	r3, [r7, #2]
 800188c:	400b      	ands	r3, r1
 800188e:	431a      	orrs	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	611a      	str	r2, [r3, #16]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
	...

080018a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e26c      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 8087 	beq.w	80019ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018c0:	4b92      	ldr	r3, [pc, #584]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b04      	cmp	r3, #4
 80018ca:	d00c      	beq.n	80018e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018cc:	4b8f      	ldr	r3, [pc, #572]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 030c 	and.w	r3, r3, #12
 80018d4:	2b08      	cmp	r3, #8
 80018d6:	d112      	bne.n	80018fe <HAL_RCC_OscConfig+0x5e>
 80018d8:	4b8c      	ldr	r3, [pc, #560]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e4:	d10b      	bne.n	80018fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e6:	4b89      	ldr	r3, [pc, #548]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d06c      	beq.n	80019cc <HAL_RCC_OscConfig+0x12c>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d168      	bne.n	80019cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e246      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001906:	d106      	bne.n	8001916 <HAL_RCC_OscConfig+0x76>
 8001908:	4b80      	ldr	r3, [pc, #512]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a7f      	ldr	r2, [pc, #508]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 800190e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	e02e      	b.n	8001974 <HAL_RCC_OscConfig+0xd4>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0x98>
 800191e:	4b7b      	ldr	r3, [pc, #492]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a7a      	ldr	r2, [pc, #488]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b78      	ldr	r3, [pc, #480]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a77      	ldr	r2, [pc, #476]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e01d      	b.n	8001974 <HAL_RCC_OscConfig+0xd4>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001940:	d10c      	bne.n	800195c <HAL_RCC_OscConfig+0xbc>
 8001942:	4b72      	ldr	r3, [pc, #456]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a71      	ldr	r2, [pc, #452]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b6f      	ldr	r3, [pc, #444]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a6e      	ldr	r2, [pc, #440]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	e00b      	b.n	8001974 <HAL_RCC_OscConfig+0xd4>
 800195c:	4b6b      	ldr	r3, [pc, #428]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a6a      	ldr	r2, [pc, #424]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b68      	ldr	r3, [pc, #416]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a67      	ldr	r2, [pc, #412]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 800196e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001972:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d013      	beq.n	80019a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fcf0 	bl	8001360 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001984:	f7ff fcec 	bl	8001360 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	; 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e1fa      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	4b5d      	ldr	r3, [pc, #372]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0xe4>
 80019a2:	e014      	b.n	80019ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff fcdc 	bl	8001360 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ac:	f7ff fcd8 	bl	8001360 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b64      	cmp	r3, #100	; 0x64
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e1e6      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	4b53      	ldr	r3, [pc, #332]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x10c>
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d063      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019da:	4b4c      	ldr	r3, [pc, #304]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00b      	beq.n	80019fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019e6:	4b49      	ldr	r3, [pc, #292]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d11c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x18c>
 80019f2:	4b46      	ldr	r3, [pc, #280]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d116      	bne.n	8001a2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fe:	4b43      	ldr	r3, [pc, #268]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d005      	beq.n	8001a16 <HAL_RCC_OscConfig+0x176>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e1ba      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a16:	4b3d      	ldr	r3, [pc, #244]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4939      	ldr	r1, [pc, #228]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2a:	e03a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d020      	beq.n	8001a76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a34:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3a:	f7ff fc91 	bl	8001360 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a42:	f7ff fc8d 	bl	8001360 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e19b      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a60:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4927      	ldr	r1, [pc, #156]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]
 8001a74:	e015      	b.n	8001aa2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a76:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <HAL_RCC_OscConfig+0x270>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fc70 	bl	8001360 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a84:	f7ff fc6c 	bl	8001360 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e17a      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d03a      	beq.n	8001b24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d019      	beq.n	8001aea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab6:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abc:	f7ff fc50 	bl	8001360 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac4:	f7ff fc4c 	bl	8001360 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e15a      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f000 fb08 	bl	80020f8 <RCC_Delay>
 8001ae8:	e01c      	b.n	8001b24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_RCC_OscConfig+0x274>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af0:	f7ff fc36 	bl	8001360 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af6:	e00f      	b.n	8001b18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af8:	f7ff fc32 	bl	8001360 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d908      	bls.n	8001b18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e140      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	42420000 	.word	0x42420000
 8001b14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b18:	4b9e      	ldr	r3, [pc, #632]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1e9      	bne.n	8001af8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80a6 	beq.w	8001c7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b36:	4b97      	ldr	r3, [pc, #604]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10d      	bne.n	8001b5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	4b94      	ldr	r3, [pc, #592]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	4a93      	ldr	r2, [pc, #588]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4c:	61d3      	str	r3, [r2, #28]
 8001b4e:	4b91      	ldr	r3, [pc, #580]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5e:	4b8e      	ldr	r3, [pc, #568]	; (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d118      	bne.n	8001b9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b6a:	4b8b      	ldr	r3, [pc, #556]	; (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a8a      	ldr	r2, [pc, #552]	; (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b76:	f7ff fbf3 	bl	8001360 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7e:	f7ff fbef 	bl	8001360 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b64      	cmp	r3, #100	; 0x64
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e0fd      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b90:	4b81      	ldr	r3, [pc, #516]	; (8001d98 <HAL_RCC_OscConfig+0x4f8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x312>
 8001ba4:	4b7b      	ldr	r3, [pc, #492]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	4a7a      	ldr	r2, [pc, #488]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	6213      	str	r3, [r2, #32]
 8001bb0:	e02d      	b.n	8001c0e <HAL_RCC_OscConfig+0x36e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x334>
 8001bba:	4b76      	ldr	r3, [pc, #472]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	4a75      	ldr	r2, [pc, #468]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	6213      	str	r3, [r2, #32]
 8001bc6:	4b73      	ldr	r3, [pc, #460]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	4a72      	ldr	r2, [pc, #456]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001bcc:	f023 0304 	bic.w	r3, r3, #4
 8001bd0:	6213      	str	r3, [r2, #32]
 8001bd2:	e01c      	b.n	8001c0e <HAL_RCC_OscConfig+0x36e>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b05      	cmp	r3, #5
 8001bda:	d10c      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x356>
 8001bdc:	4b6d      	ldr	r3, [pc, #436]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4a6c      	ldr	r2, [pc, #432]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001be2:	f043 0304 	orr.w	r3, r3, #4
 8001be6:	6213      	str	r3, [r2, #32]
 8001be8:	4b6a      	ldr	r3, [pc, #424]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	4a69      	ldr	r2, [pc, #420]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6213      	str	r3, [r2, #32]
 8001bf4:	e00b      	b.n	8001c0e <HAL_RCC_OscConfig+0x36e>
 8001bf6:	4b67      	ldr	r3, [pc, #412]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	4a66      	ldr	r2, [pc, #408]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001bfc:	f023 0301 	bic.w	r3, r3, #1
 8001c00:	6213      	str	r3, [r2, #32]
 8001c02:	4b64      	ldr	r3, [pc, #400]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	4a63      	ldr	r2, [pc, #396]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001c08:	f023 0304 	bic.w	r3, r3, #4
 8001c0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d015      	beq.n	8001c42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c16:	f7ff fba3 	bl	8001360 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1c:	e00a      	b.n	8001c34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1e:	f7ff fb9f 	bl	8001360 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e0ab      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c34:	4b57      	ldr	r3, [pc, #348]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0ee      	beq.n	8001c1e <HAL_RCC_OscConfig+0x37e>
 8001c40:	e014      	b.n	8001c6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c42:	f7ff fb8d 	bl	8001360 <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c48:	e00a      	b.n	8001c60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4a:	f7ff fb89 	bl	8001360 <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e095      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c60:	4b4c      	ldr	r3, [pc, #304]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001c62:	6a1b      	ldr	r3, [r3, #32]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1ee      	bne.n	8001c4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c6c:	7dfb      	ldrb	r3, [r7, #23]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d105      	bne.n	8001c7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c72:	4b48      	ldr	r3, [pc, #288]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	4a47      	ldr	r2, [pc, #284]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69db      	ldr	r3, [r3, #28]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 8081 	beq.w	8001d8a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c88:	4b42      	ldr	r3, [pc, #264]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 030c 	and.w	r3, r3, #12
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	d061      	beq.n	8001d58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d146      	bne.n	8001d2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9c:	4b3f      	ldr	r3, [pc, #252]	; (8001d9c <HAL_RCC_OscConfig+0x4fc>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7ff fb5d 	bl	8001360 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001caa:	f7ff fb59 	bl	8001360 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e067      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cbc:	4b35      	ldr	r3, [pc, #212]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1f0      	bne.n	8001caa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd0:	d108      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cd2:	4b30      	ldr	r3, [pc, #192]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	492d      	ldr	r1, [pc, #180]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce4:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a19      	ldr	r1, [r3, #32]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	430b      	orrs	r3, r1
 8001cf6:	4927      	ldr	r1, [pc, #156]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cfc:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <HAL_RCC_OscConfig+0x4fc>)
 8001cfe:	2201      	movs	r2, #1
 8001d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d02:	f7ff fb2d 	bl	8001360 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0a:	f7ff fb29 	bl	8001360 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e037      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x46a>
 8001d28:	e02f      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2a:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <HAL_RCC_OscConfig+0x4fc>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d30:	f7ff fb16 	bl	8001360 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d38:	f7ff fb12 	bl	8001360 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e020      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4a:	4b12      	ldr	r3, [pc, #72]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x498>
 8001d56:	e018      	b.n	8001d8a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69db      	ldr	r3, [r3, #28]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e013      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_RCC_OscConfig+0x4f4>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d106      	bne.n	8001d86 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d001      	beq.n	8001d8a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3718      	adds	r7, #24
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40007000 	.word	0x40007000
 8001d9c:	42420060 	.word	0x42420060

08001da0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0d0      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001db4:	4b6a      	ldr	r3, [pc, #424]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d910      	bls.n	8001de4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc2:	4b67      	ldr	r3, [pc, #412]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 0207 	bic.w	r2, r3, #7
 8001dca:	4965      	ldr	r1, [pc, #404]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0b8      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d020      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dfc:	4b59      	ldr	r3, [pc, #356]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	4a58      	ldr	r2, [pc, #352]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e14:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a52      	ldr	r2, [pc, #328]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e20:	4b50      	ldr	r3, [pc, #320]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	494d      	ldr	r1, [pc, #308]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d040      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e46:	4b47      	ldr	r3, [pc, #284]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d115      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e07f      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5e:	4b41      	ldr	r3, [pc, #260]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e073      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e06b      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e7e:	4b39      	ldr	r3, [pc, #228]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f023 0203 	bic.w	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	4936      	ldr	r1, [pc, #216]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e90:	f7ff fa66 	bl	8001360 <HAL_GetTick>
 8001e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	e00a      	b.n	8001eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e98:	f7ff fa62 	bl	8001360 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e053      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 020c 	and.w	r2, r3, #12
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d1eb      	bne.n	8001e98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d210      	bcs.n	8001ef0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 0207 	bic.w	r2, r3, #7
 8001ed6:	4922      	ldr	r1, [pc, #136]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e032      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	4916      	ldr	r1, [pc, #88]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d009      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	490e      	ldr	r1, [pc, #56]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f2e:	f000 f821 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001f32:	4602      	mov	r2, r0
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	490a      	ldr	r1, [pc, #40]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001f40:	5ccb      	ldrb	r3, [r1, r3]
 8001f42:	fa22 f303 	lsr.w	r3, r2, r3
 8001f46:	4a09      	ldr	r2, [pc, #36]	; (8001f6c <HAL_RCC_ClockConfig+0x1cc>)
 8001f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_RCC_ClockConfig+0x1d0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff f87c 	bl	800104c <HAL_InitTick>

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40022000 	.word	0x40022000
 8001f64:	40021000 	.word	0x40021000
 8001f68:	080053dc 	.word	0x080053dc
 8001f6c:	200000dc 	.word	0x200000dc
 8001f70:	200000e0 	.word	0x200000e0

08001f74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	b490      	push	{r4, r7}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f7a:	4b2a      	ldr	r3, [pc, #168]	; (8002024 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f7c:	1d3c      	adds	r4, r7, #4
 8001f7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f84:	f240 2301 	movw	r3, #513	; 0x201
 8001f88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61bb      	str	r3, [r7, #24]
 8001f92:	2300      	movs	r3, #0
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
 8001f96:	2300      	movs	r3, #0
 8001f98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f9e:	4b22      	ldr	r3, [pc, #136]	; (8002028 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d002      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x40>
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d003      	beq.n	8001fba <HAL_RCC_GetSysClockFreq+0x46>
 8001fb2:	e02d      	b.n	8002010 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb6:	623b      	str	r3, [r7, #32]
      break;
 8001fb8:	e02d      	b.n	8002016 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	0c9b      	lsrs	r3, r3, #18
 8001fbe:	f003 030f 	and.w	r3, r3, #15
 8001fc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fcc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d013      	beq.n	8002000 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fd8:	4b13      	ldr	r3, [pc, #76]	; (8002028 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	0c5b      	lsrs	r3, r3, #17
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	4a0e      	ldr	r2, [pc, #56]	; (800202c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ff2:	fb02 f203 	mul.w	r2, r2, r3
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffe:	e004      	b.n	800200a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	4a0b      	ldr	r2, [pc, #44]	; (8002030 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002004:	fb02 f303 	mul.w	r3, r2, r3
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	623b      	str	r3, [r7, #32]
      break;
 800200e:	e002      	b.n	8002016 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002012:	623b      	str	r3, [r7, #32]
      break;
 8002014:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002016:	6a3b      	ldr	r3, [r7, #32]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3728      	adds	r7, #40	; 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bc90      	pop	{r4, r7}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	080053c0 	.word	0x080053c0
 8002028:	40021000 	.word	0x40021000
 800202c:	007a1200 	.word	0x007a1200
 8002030:	003d0900 	.word	0x003d0900

08002034 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002038:	4b02      	ldr	r3, [pc, #8]	; (8002044 <HAL_RCC_GetHCLKFreq+0x10>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	200000dc 	.word	0x200000dc

08002048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800204c:	f7ff fff2 	bl	8002034 <HAL_RCC_GetHCLKFreq>
 8002050:	4602      	mov	r2, r0
 8002052:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	0a1b      	lsrs	r3, r3, #8
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	4903      	ldr	r1, [pc, #12]	; (800206c <HAL_RCC_GetPCLK1Freq+0x24>)
 800205e:	5ccb      	ldrb	r3, [r1, r3]
 8002060:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002064:	4618      	mov	r0, r3
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000
 800206c:	080053ec 	.word	0x080053ec

08002070 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002074:	f7ff ffde 	bl	8002034 <HAL_RCC_GetHCLKFreq>
 8002078:	4602      	mov	r2, r0
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_RCC_GetPCLK2Freq+0x20>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	0adb      	lsrs	r3, r3, #11
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	4903      	ldr	r1, [pc, #12]	; (8002094 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002086:	5ccb      	ldrb	r3, [r1, r3]
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
}
 800208c:	4618      	mov	r0, r3
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40021000 	.word	0x40021000
 8002094:	080053ec 	.word	0x080053ec

08002098 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	220f      	movs	r2, #15
 80020a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_RCC_GetClockConfig+0x58>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0203 	and.w	r2, r3, #3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020b4:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <HAL_RCC_GetClockConfig+0x58>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_RCC_GetClockConfig+0x58>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <HAL_RCC_GetClockConfig+0x58>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	08db      	lsrs	r3, r3, #3
 80020d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <HAL_RCC_GetClockConfig+0x5c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0207 	and.w	r2, r3, #7
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40022000 	.word	0x40022000

080020f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002100:	4b0a      	ldr	r3, [pc, #40]	; (800212c <RCC_Delay+0x34>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0a      	ldr	r2, [pc, #40]	; (8002130 <RCC_Delay+0x38>)
 8002106:	fba2 2303 	umull	r2, r3, r2, r3
 800210a:	0a5b      	lsrs	r3, r3, #9
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002114:	bf00      	nop
  }
  while (Delay --);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1e5a      	subs	r2, r3, #1
 800211a:	60fa      	str	r2, [r7, #12]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1f9      	bne.n	8002114 <RCC_Delay+0x1c>
}
 8002120:	bf00      	nop
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	200000dc 	.word	0x200000dc
 8002130:	10624dd3 	.word	0x10624dd3

08002134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e041      	b.n	80021ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f839 	bl	80021d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3304      	adds	r3, #4
 8002170:	4619      	mov	r1, r3
 8002172:	4610      	mov	r0, r2
 8002174:	f000 f9b4 	bl	80024e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d001      	beq.n	80021fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e03a      	b.n	8002272 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2202      	movs	r2, #2
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a18      	ldr	r2, [pc, #96]	; (800227c <HAL_TIM_Base_Start_IT+0x98>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d00e      	beq.n	800223c <HAL_TIM_Base_Start_IT+0x58>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002226:	d009      	beq.n	800223c <HAL_TIM_Base_Start_IT+0x58>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a14      	ldr	r2, [pc, #80]	; (8002280 <HAL_TIM_Base_Start_IT+0x9c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d004      	beq.n	800223c <HAL_TIM_Base_Start_IT+0x58>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a13      	ldr	r2, [pc, #76]	; (8002284 <HAL_TIM_Base_Start_IT+0xa0>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d111      	bne.n	8002260 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 0307 	and.w	r3, r3, #7
 8002246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2b06      	cmp	r3, #6
 800224c:	d010      	beq.n	8002270 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0201 	orr.w	r2, r2, #1
 800225c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800225e:	e007      	b.n	8002270 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	40012c00 	.word	0x40012c00
 8002280:	40000400 	.word	0x40000400
 8002284:	40000800 	.word	0x40000800

08002288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b02      	cmp	r3, #2
 800229c:	d122      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d11b      	bne.n	80022e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f06f 0202 	mvn.w	r2, #2
 80022b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699b      	ldr	r3, [r3, #24]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f000 f8ed 	bl	80024aa <HAL_TIM_IC_CaptureCallback>
 80022d0:	e005      	b.n	80022de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f8e0 	bl	8002498 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f8ef 	bl	80024bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d122      	bne.n	8002338 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d11b      	bne.n	8002338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f06f 0204 	mvn.w	r2, #4
 8002308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2202      	movs	r2, #2
 800230e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800231a:	2b00      	cmp	r3, #0
 800231c:	d003      	beq.n	8002326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f8c3 	bl	80024aa <HAL_TIM_IC_CaptureCallback>
 8002324:	e005      	b.n	8002332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f8b6 	bl	8002498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f000 f8c5 	bl	80024bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	f003 0308 	and.w	r3, r3, #8
 8002342:	2b08      	cmp	r3, #8
 8002344:	d122      	bne.n	800238c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f003 0308 	and.w	r3, r3, #8
 8002350:	2b08      	cmp	r3, #8
 8002352:	d11b      	bne.n	800238c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f06f 0208 	mvn.w	r2, #8
 800235c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2204      	movs	r2, #4
 8002362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f899 	bl	80024aa <HAL_TIM_IC_CaptureCallback>
 8002378:	e005      	b.n	8002386 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f88c 	bl	8002498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 f89b 	bl	80024bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f003 0310 	and.w	r3, r3, #16
 8002396:	2b10      	cmp	r3, #16
 8002398:	d122      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0310 	and.w	r3, r3, #16
 80023a4:	2b10      	cmp	r3, #16
 80023a6:	d11b      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f06f 0210 	mvn.w	r2, #16
 80023b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2208      	movs	r2, #8
 80023b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f86f 	bl	80024aa <HAL_TIM_IC_CaptureCallback>
 80023cc:	e005      	b.n	80023da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f862 	bl	8002498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f871 	bl	80024bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d10e      	bne.n	800240c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d107      	bne.n	800240c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0201 	mvn.w	r2, #1
 8002404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7fe fd10 	bl	8000e2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002416:	2b80      	cmp	r3, #128	; 0x80
 8002418:	d10e      	bne.n	8002438 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002424:	2b80      	cmp	r3, #128	; 0x80
 8002426:	d107      	bne.n	8002438 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f8bf 	bl	80025b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002442:	2b40      	cmp	r3, #64	; 0x40
 8002444:	d10e      	bne.n	8002464 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002450:	2b40      	cmp	r3, #64	; 0x40
 8002452:	d107      	bne.n	8002464 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800245c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f835 	bl	80024ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0320 	and.w	r3, r3, #32
 800246e:	2b20      	cmp	r3, #32
 8002470:	d10e      	bne.n	8002490 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0320 	and.w	r3, r3, #32
 800247c:	2b20      	cmp	r3, #32
 800247e:	d107      	bne.n	8002490 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0220 	mvn.w	r2, #32
 8002488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f88a 	bl	80025a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002490:	bf00      	nop
 8002492:	3708      	adds	r7, #8
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr

080024bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a29      	ldr	r2, [pc, #164]	; (8002598 <TIM_Base_SetConfig+0xb8>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00b      	beq.n	8002510 <TIM_Base_SetConfig+0x30>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024fe:	d007      	beq.n	8002510 <TIM_Base_SetConfig+0x30>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a26      	ldr	r2, [pc, #152]	; (800259c <TIM_Base_SetConfig+0xbc>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d003      	beq.n	8002510 <TIM_Base_SetConfig+0x30>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a25      	ldr	r2, [pc, #148]	; (80025a0 <TIM_Base_SetConfig+0xc0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d108      	bne.n	8002522 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	4313      	orrs	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a1c      	ldr	r2, [pc, #112]	; (8002598 <TIM_Base_SetConfig+0xb8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00b      	beq.n	8002542 <TIM_Base_SetConfig+0x62>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002530:	d007      	beq.n	8002542 <TIM_Base_SetConfig+0x62>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a19      	ldr	r2, [pc, #100]	; (800259c <TIM_Base_SetConfig+0xbc>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d003      	beq.n	8002542 <TIM_Base_SetConfig+0x62>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a18      	ldr	r2, [pc, #96]	; (80025a0 <TIM_Base_SetConfig+0xc0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d108      	bne.n	8002554 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002548:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	4313      	orrs	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	695b      	ldr	r3, [r3, #20]
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a07      	ldr	r2, [pc, #28]	; (8002598 <TIM_Base_SetConfig+0xb8>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d103      	bne.n	8002588 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	691a      	ldr	r2, [r3, #16]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	615a      	str	r2, [r3, #20]
}
 800258e:	bf00      	nop
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr
 8002598:	40012c00 	.word	0x40012c00
 800259c:	40000400 	.word	0x40000400
 80025a0:	40000800 	.word	0x40000800

080025a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025ac:	bf00      	nop
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr

080025b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e03f      	b.n	800265a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d106      	bne.n	80025f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7fe fc6c 	bl	8000ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2224      	movs	r2, #36	; 0x24
 80025f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800260a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f9a3 	bl	8002958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002620:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	695a      	ldr	r2, [r3, #20]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002630:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002640:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2220      	movs	r2, #32
 800264c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2220      	movs	r2, #32
 8002654:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b08a      	sub	sp, #40	; 0x28
 8002666:	af02      	add	r7, sp, #8
 8002668:	60f8      	str	r0, [r7, #12]
 800266a:	60b9      	str	r1, [r7, #8]
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	4613      	mov	r3, r2
 8002670:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b20      	cmp	r3, #32
 8002680:	d17c      	bne.n	800277c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <HAL_UART_Transmit+0x2c>
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e075      	b.n	800277e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002698:	2b01      	cmp	r3, #1
 800269a:	d101      	bne.n	80026a0 <HAL_UART_Transmit+0x3e>
 800269c:	2302      	movs	r3, #2
 800269e:	e06e      	b.n	800277e <HAL_UART_Transmit+0x11c>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2221      	movs	r2, #33	; 0x21
 80026b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80026b6:	f7fe fe53 	bl	8001360 <HAL_GetTick>
 80026ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	88fa      	ldrh	r2, [r7, #6]
 80026c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	88fa      	ldrh	r2, [r7, #6]
 80026c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d0:	d108      	bne.n	80026e4 <HAL_UART_Transmit+0x82>
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d104      	bne.n	80026e4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	e003      	b.n	80026ec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80026f4:	e02a      	b.n	800274c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	9300      	str	r3, [sp, #0]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	2200      	movs	r2, #0
 80026fe:	2180      	movs	r1, #128	; 0x80
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f8df 	bl	80028c4 <UART_WaitOnFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e036      	b.n	800277e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10b      	bne.n	800272e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	461a      	mov	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002724:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	3302      	adds	r3, #2
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	e007      	b.n	800273e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	3301      	adds	r3, #1
 800273c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002742:	b29b      	uxth	r3, r3
 8002744:	3b01      	subs	r3, #1
 8002746:	b29a      	uxth	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1cf      	bne.n	80026f6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2200      	movs	r2, #0
 800275e:	2140      	movs	r1, #64	; 0x40
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 f8af 	bl	80028c4 <UART_WaitOnFlagUntilTimeout>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e006      	b.n	800277e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	e000      	b.n	800277e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800277c:	2302      	movs	r3, #2
  }
}
 800277e:	4618      	mov	r0, r3
 8002780:	3720      	adds	r7, #32
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b08a      	sub	sp, #40	; 0x28
 800278a:	af02      	add	r7, sp, #8
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	4613      	mov	r3, r2
 8002794:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	f040 8089 	bne.w	80028ba <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d002      	beq.n	80027b4 <HAL_UART_Receive+0x2e>
 80027ae:	88fb      	ldrh	r3, [r7, #6]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e081      	b.n	80028bc <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_UART_Receive+0x40>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e07a      	b.n	80028bc <HAL_UART_Receive+0x136>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2222      	movs	r2, #34	; 0x22
 80027d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80027dc:	f7fe fdc0 	bl	8001360 <HAL_GetTick>
 80027e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	88fa      	ldrh	r2, [r7, #6]
 80027e6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	88fa      	ldrh	r2, [r7, #6]
 80027ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027f6:	d108      	bne.n	800280a <HAL_UART_Receive+0x84>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d104      	bne.n	800280a <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002800:	2300      	movs	r3, #0
 8002802:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	61bb      	str	r3, [r7, #24]
 8002808:	e003      	b.n	8002812 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800281a:	e043      	b.n	80028a4 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2200      	movs	r2, #0
 8002824:	2120      	movs	r1, #32
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f84c 	bl	80028c4 <UART_WaitOnFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e042      	b.n	80028bc <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10c      	bne.n	8002856 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	b29b      	uxth	r3, r3
 8002844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002848:	b29a      	uxth	r2, r3
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	3302      	adds	r3, #2
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	e01f      	b.n	8002896 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800285e:	d007      	beq.n	8002870 <HAL_UART_Receive+0xea>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10a      	bne.n	800287e <HAL_UART_Receive+0xf8>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d106      	bne.n	800287e <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	b2da      	uxtb	r2, r3
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	701a      	strb	r2, [r3, #0]
 800287c:	e008      	b.n	8002890 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	b2db      	uxtb	r3, r3
 8002886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800288a:	b2da      	uxtb	r2, r3
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	3301      	adds	r3, #1
 8002894:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800289a:	b29b      	uxth	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1b6      	bne.n	800281c <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80028b6:	2300      	movs	r3, #0
 80028b8:	e000      	b.n	80028bc <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80028ba:	2302      	movs	r3, #2
  }
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3720      	adds	r7, #32
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	4613      	mov	r3, r2
 80028d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d4:	e02c      	b.n	8002930 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028dc:	d028      	beq.n	8002930 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d007      	beq.n	80028f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80028e4:	f7fe fd3c 	bl	8001360 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d21d      	bcs.n	8002930 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002902:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2220      	movs	r2, #32
 8002918:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e00f      	b.n	8002950 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	4013      	ands	r3, r2
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	429a      	cmp	r2, r3
 800293e:	bf0c      	ite	eq
 8002940:	2301      	moveq	r3, #1
 8002942:	2300      	movne	r3, #0
 8002944:	b2db      	uxtb	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	79fb      	ldrb	r3, [r7, #7]
 800294a:	429a      	cmp	r2, r3
 800294c:	d0c3      	beq.n	80028d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	430a      	orrs	r2, r1
 8002974:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689a      	ldr	r2, [r3, #8]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002992:	f023 030c 	bic.w	r3, r3, #12
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	68b9      	ldr	r1, [r7, #8]
 800299c:	430b      	orrs	r3, r1
 800299e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	699a      	ldr	r2, [r3, #24]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a2c      	ldr	r2, [pc, #176]	; (8002a6c <UART_SetConfig+0x114>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d103      	bne.n	80029c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029c0:	f7ff fb56 	bl	8002070 <HAL_RCC_GetPCLK2Freq>
 80029c4:	60f8      	str	r0, [r7, #12]
 80029c6:	e002      	b.n	80029ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029c8:	f7ff fb3e 	bl	8002048 <HAL_RCC_GetPCLK1Freq>
 80029cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029ce:	68fa      	ldr	r2, [r7, #12]
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	009a      	lsls	r2, r3, #2
 80029d8:	441a      	add	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e4:	4a22      	ldr	r2, [pc, #136]	; (8002a70 <UART_SetConfig+0x118>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	0119      	lsls	r1, r3, #4
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	009a      	lsls	r2, r3, #2
 80029f8:	441a      	add	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a04:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <UART_SetConfig+0x118>)
 8002a06:	fba3 0302 	umull	r0, r3, r3, r2
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	2064      	movs	r0, #100	; 0x64
 8002a0e:	fb00 f303 	mul.w	r3, r0, r3
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	3332      	adds	r3, #50	; 0x32
 8002a18:	4a15      	ldr	r2, [pc, #84]	; (8002a70 <UART_SetConfig+0x118>)
 8002a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a24:	4419      	add	r1, r3
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009a      	lsls	r2, r3, #2
 8002a30:	441a      	add	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <UART_SetConfig+0x118>)
 8002a3e:	fba3 0302 	umull	r0, r3, r3, r2
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	2064      	movs	r0, #100	; 0x64
 8002a46:	fb00 f303 	mul.w	r3, r0, r3
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	011b      	lsls	r3, r3, #4
 8002a4e:	3332      	adds	r3, #50	; 0x32
 8002a50:	4a07      	ldr	r2, [pc, #28]	; (8002a70 <UART_SetConfig+0x118>)
 8002a52:	fba2 2303 	umull	r2, r3, r2, r3
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	f003 020f 	and.w	r2, r3, #15
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	440a      	add	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40013800 	.word	0x40013800
 8002a70:	51eb851f 	.word	0x51eb851f

08002a74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a86:	2b84      	cmp	r3, #132	; 0x84
 8002a88:	d005      	beq.n	8002a96 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002a8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4413      	add	r3, r2
 8002a92:	3303      	adds	r3, #3
 8002a94:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002a96:	68fb      	ldr	r3, [r7, #12]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bc80      	pop	{r7}
 8002aa0:	4770      	bx	lr

08002aa2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002aa6:	f000 fad1 	bl	800304c <vTaskStartScheduler>
  
  return osOK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ab2:	b089      	sub	sp, #36	; 0x24
 8002ab4:	af04      	add	r7, sp, #16
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d020      	beq.n	8002b04 <osThreadCreate+0x54>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	699b      	ldr	r3, [r3, #24]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d01c      	beq.n	8002b04 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685c      	ldr	r4, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681d      	ldr	r5, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691e      	ldr	r6, [r3, #16]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7ff ffc9 	bl	8002a74 <makeFreeRtosPriority>
 8002ae2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002aec:	9202      	str	r2, [sp, #8]
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	9100      	str	r1, [sp, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	4632      	mov	r2, r6
 8002af6:	4629      	mov	r1, r5
 8002af8:	4620      	mov	r0, r4
 8002afa:	f000 f8e8 	bl	8002cce <xTaskCreateStatic>
 8002afe:	4603      	mov	r3, r0
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	e01c      	b.n	8002b3e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685c      	ldr	r4, [r3, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b10:	b29e      	uxth	r6, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ffab 	bl	8002a74 <makeFreeRtosPriority>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	f107 030c 	add.w	r3, r7, #12
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	9200      	str	r2, [sp, #0]
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	4632      	mov	r2, r6
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f000 f929 	bl	8002d86 <xTaskCreate>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d001      	beq.n	8002b3e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e000      	b.n	8002b40 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b48 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <osDelay+0x16>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	e000      	b.n	8002b60 <osDelay+0x18>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fa3f 	bl	8002fe4 <vTaskDelay>
  
  return osOK;
 8002b66:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f103 0208 	add.w	r2, r3, #8
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f103 0208 	add.w	r2, r3, #8
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f103 0208 	add.w	r2, r3, #8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bc80      	pop	{r7}
 8002bac:	4770      	bx	lr

08002bae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b083      	sub	sp, #12
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b085      	sub	sp, #20
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
 8002bce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	601a      	str	r2, [r3, #0]
}
 8002c02:	bf00      	nop
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c22:	d103      	bne.n	8002c2c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	e00c      	b.n	8002c46 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3308      	adds	r3, #8
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	e002      	b.n	8002c3a <vListInsert+0x2e>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68ba      	ldr	r2, [r7, #8]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d2f6      	bcs.n	8002c34 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	68fa      	ldr	r2, [r7, #12]
 8002c5a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	601a      	str	r2, [r3, #0]
}
 8002c72:	bf00      	nop
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr

08002c7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	6892      	ldr	r2, [r2, #8]
 8002c92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6852      	ldr	r2, [r2, #4]
 8002c9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d103      	bne.n	8002cb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	1e5a      	subs	r2, r3, #1
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr

08002cce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b08e      	sub	sp, #56	; 0x38
 8002cd2:	af04      	add	r7, sp, #16
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
 8002cda:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10a      	bne.n	8002cf8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce6:	f383 8811 	msr	BASEPRI, r3
 8002cea:	f3bf 8f6f 	isb	sy
 8002cee:	f3bf 8f4f 	dsb	sy
 8002cf2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002cf4:	bf00      	nop
 8002cf6:	e7fe      	b.n	8002cf6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10a      	bne.n	8002d14 <xTaskCreateStatic+0x46>
	__asm volatile
 8002cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	61fb      	str	r3, [r7, #28]
}
 8002d10:	bf00      	nop
 8002d12:	e7fe      	b.n	8002d12 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002d14:	2354      	movs	r3, #84	; 0x54
 8002d16:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	2b54      	cmp	r3, #84	; 0x54
 8002d1c:	d00a      	beq.n	8002d34 <xTaskCreateStatic+0x66>
	__asm volatile
 8002d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	61bb      	str	r3, [r7, #24]
}
 8002d30:	bf00      	nop
 8002d32:	e7fe      	b.n	8002d32 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d01e      	beq.n	8002d78 <xTaskCreateStatic+0xaa>
 8002d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d01b      	beq.n	8002d78 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d52:	2300      	movs	r3, #0
 8002d54:	9303      	str	r3, [sp, #12]
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	9302      	str	r3, [sp, #8]
 8002d5a:	f107 0314 	add.w	r3, r7, #20
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 f850 	bl	8002e10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d72:	f000 f8cd 	bl	8002f10 <prvAddNewTaskToReadyList>
 8002d76:	e001      	b.n	8002d7c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d7c:	697b      	ldr	r3, [r7, #20]
	}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3728      	adds	r7, #40	; 0x28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b08c      	sub	sp, #48	; 0x30
 8002d8a:	af04      	add	r7, sp, #16
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	4613      	mov	r3, r2
 8002d94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fe68 	bl	8003a70 <pvPortMalloc>
 8002da0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00e      	beq.n	8002dc6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002da8:	2054      	movs	r0, #84	; 0x54
 8002daa:	f000 fe61 	bl	8003a70 <pvPortMalloc>
 8002dae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
 8002dbc:	e005      	b.n	8002dca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002dbe:	6978      	ldr	r0, [r7, #20]
 8002dc0:	f000 ff1a 	bl	8003bf8 <vPortFree>
 8002dc4:	e001      	b.n	8002dca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d017      	beq.n	8002e00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002dd8:	88fa      	ldrh	r2, [r7, #6]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	9303      	str	r3, [sp, #12]
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	9302      	str	r3, [sp, #8]
 8002de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de4:	9301      	str	r3, [sp, #4]
 8002de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 f80e 	bl	8002e10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002df4:	69f8      	ldr	r0, [r7, #28]
 8002df6:	f000 f88b 	bl	8002f10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	e002      	b.n	8002e06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e06:	69bb      	ldr	r3, [r7, #24]
	}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3720      	adds	r7, #32
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	f023 0307 	bic.w	r3, r3, #7
 8002e36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	617b      	str	r3, [r7, #20]
}
 8002e54:	bf00      	nop
 8002e56:	e7fe      	b.n	8002e56 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e58:	2300      	movs	r3, #0
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	e012      	b.n	8002e84 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	4413      	add	r3, r2
 8002e64:	7819      	ldrb	r1, [r3, #0]
 8002e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3334      	adds	r3, #52	; 0x34
 8002e6e:	460a      	mov	r2, r1
 8002e70:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	4413      	add	r3, r2
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d006      	beq.n	8002e8c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	3301      	adds	r3, #1
 8002e82:	61fb      	str	r3, [r7, #28]
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	2b0f      	cmp	r3, #15
 8002e88:	d9e9      	bls.n	8002e5e <prvInitialiseNewTask+0x4e>
 8002e8a:	e000      	b.n	8002e8e <prvInitialiseNewTask+0x7e>
		{
			break;
 8002e8c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e98:	2b06      	cmp	r3, #6
 8002e9a:	d901      	bls.n	8002ea0 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e9c:	2306      	movs	r3, #6
 8002e9e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ea4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ea8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002eaa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	2200      	movs	r2, #0
 8002eb0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff fe79 	bl	8002bae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebe:	3318      	adds	r3, #24
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fe74 	bl	8002bae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ece:	f1c3 0207 	rsb	r2, r3, #7
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eda:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ede:	2200      	movs	r2, #0
 8002ee0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	68f9      	ldr	r1, [r7, #12]
 8002eee:	69b8      	ldr	r0, [r7, #24]
 8002ef0:	f000 fc0e 	bl	8003710 <pxPortInitialiseStack>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ef8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f06:	bf00      	nop
 8002f08:	3720      	adds	r7, #32
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f18:	f000 fce8 	bl	80038ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f1c:	4b2a      	ldr	r3, [pc, #168]	; (8002fc8 <prvAddNewTaskToReadyList+0xb8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3301      	adds	r3, #1
 8002f22:	4a29      	ldr	r2, [pc, #164]	; (8002fc8 <prvAddNewTaskToReadyList+0xb8>)
 8002f24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f26:	4b29      	ldr	r3, [pc, #164]	; (8002fcc <prvAddNewTaskToReadyList+0xbc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d109      	bne.n	8002f42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f2e:	4a27      	ldr	r2, [pc, #156]	; (8002fcc <prvAddNewTaskToReadyList+0xbc>)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f34:	4b24      	ldr	r3, [pc, #144]	; (8002fc8 <prvAddNewTaskToReadyList+0xb8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d110      	bne.n	8002f5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f3c:	f000 fac0 	bl	80034c0 <prvInitialiseTaskLists>
 8002f40:	e00d      	b.n	8002f5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f42:	4b23      	ldr	r3, [pc, #140]	; (8002fd0 <prvAddNewTaskToReadyList+0xc0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d109      	bne.n	8002f5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f4a:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <prvAddNewTaskToReadyList+0xbc>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d802      	bhi.n	8002f5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f58:	4a1c      	ldr	r2, [pc, #112]	; (8002fcc <prvAddNewTaskToReadyList+0xbc>)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f5e:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <prvAddNewTaskToReadyList+0xc4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	3301      	adds	r3, #1
 8002f64:	4a1b      	ldr	r2, [pc, #108]	; (8002fd4 <prvAddNewTaskToReadyList+0xc4>)
 8002f66:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <prvAddNewTaskToReadyList+0xc8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	4a18      	ldr	r2, [pc, #96]	; (8002fd8 <prvAddNewTaskToReadyList+0xc8>)
 8002f78:	6013      	str	r3, [r2, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4a15      	ldr	r2, [pc, #84]	; (8002fdc <prvAddNewTaskToReadyList+0xcc>)
 8002f88:	441a      	add	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4610      	mov	r0, r2
 8002f92:	f7ff fe18 	bl	8002bc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f96:	f000 fcd9 	bl	800394c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <prvAddNewTaskToReadyList+0xc0>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00e      	beq.n	8002fc0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <prvAddNewTaskToReadyList+0xbc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d207      	bcs.n	8002fc0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <prvAddNewTaskToReadyList+0xd0>)
 8002fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	200004c8 	.word	0x200004c8
 8002fcc:	200003c8 	.word	0x200003c8
 8002fd0:	200004d4 	.word	0x200004d4
 8002fd4:	200004e4 	.word	0x200004e4
 8002fd8:	200004d0 	.word	0x200004d0
 8002fdc:	200003cc 	.word	0x200003cc
 8002fe0:	e000ed04 	.word	0xe000ed04

08002fe4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d017      	beq.n	8003026 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002ff6:	4b13      	ldr	r3, [pc, #76]	; (8003044 <vTaskDelay+0x60>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <vTaskDelay+0x30>
	__asm volatile
 8002ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	60bb      	str	r3, [r7, #8]
}
 8003010:	bf00      	nop
 8003012:	e7fe      	b.n	8003012 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003014:	f000 f87a 	bl	800310c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003018:	2100      	movs	r1, #0
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fb12 	bl	8003644 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003020:	f000 f882 	bl	8003128 <xTaskResumeAll>
 8003024:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d107      	bne.n	800303c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <vTaskDelay+0x64>)
 800302e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003032:	601a      	str	r2, [r3, #0]
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	200004f0 	.word	0x200004f0
 8003048:	e000ed04 	.word	0xe000ed04

0800304c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b08a      	sub	sp, #40	; 0x28
 8003050:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003056:	2300      	movs	r3, #0
 8003058:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800305a:	463a      	mov	r2, r7
 800305c:	1d39      	adds	r1, r7, #4
 800305e:	f107 0308 	add.w	r3, r7, #8
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd f87c 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003068:	6839      	ldr	r1, [r7, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	9202      	str	r2, [sp, #8]
 8003070:	9301      	str	r3, [sp, #4]
 8003072:	2300      	movs	r3, #0
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	2300      	movs	r3, #0
 8003078:	460a      	mov	r2, r1
 800307a:	491e      	ldr	r1, [pc, #120]	; (80030f4 <vTaskStartScheduler+0xa8>)
 800307c:	481e      	ldr	r0, [pc, #120]	; (80030f8 <vTaskStartScheduler+0xac>)
 800307e:	f7ff fe26 	bl	8002cce <xTaskCreateStatic>
 8003082:	4603      	mov	r3, r0
 8003084:	4a1d      	ldr	r2, [pc, #116]	; (80030fc <vTaskStartScheduler+0xb0>)
 8003086:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003088:	4b1c      	ldr	r3, [pc, #112]	; (80030fc <vTaskStartScheduler+0xb0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d002      	beq.n	8003096 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003090:	2301      	movs	r3, #1
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	e001      	b.n	800309a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d116      	bne.n	80030ce <vTaskStartScheduler+0x82>
	__asm volatile
 80030a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a4:	f383 8811 	msr	BASEPRI, r3
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	613b      	str	r3, [r7, #16]
}
 80030b2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <vTaskStartScheduler+0xb4>)
 80030b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80030bc:	4b11      	ldr	r3, [pc, #68]	; (8003104 <vTaskStartScheduler+0xb8>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80030c2:	4b11      	ldr	r3, [pc, #68]	; (8003108 <vTaskStartScheduler+0xbc>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80030c8:	f000 fb9e 	bl	8003808 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80030cc:	e00e      	b.n	80030ec <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030d4:	d10a      	bne.n	80030ec <vTaskStartScheduler+0xa0>
	__asm volatile
 80030d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030da:	f383 8811 	msr	BASEPRI, r3
 80030de:	f3bf 8f6f 	isb	sy
 80030e2:	f3bf 8f4f 	dsb	sy
 80030e6:	60fb      	str	r3, [r7, #12]
}
 80030e8:	bf00      	nop
 80030ea:	e7fe      	b.n	80030ea <vTaskStartScheduler+0x9e>
}
 80030ec:	bf00      	nop
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	080053d0 	.word	0x080053d0
 80030f8:	08003491 	.word	0x08003491
 80030fc:	200004ec 	.word	0x200004ec
 8003100:	200004e8 	.word	0x200004e8
 8003104:	200004d4 	.word	0x200004d4
 8003108:	200004cc 	.word	0x200004cc

0800310c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003110:	4b04      	ldr	r3, [pc, #16]	; (8003124 <vTaskSuspendAll+0x18>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3301      	adds	r3, #1
 8003116:	4a03      	ldr	r2, [pc, #12]	; (8003124 <vTaskSuspendAll+0x18>)
 8003118:	6013      	str	r3, [r2, #0]
}
 800311a:	bf00      	nop
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	200004f0 	.word	0x200004f0

08003128 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003132:	2300      	movs	r3, #0
 8003134:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003136:	4b41      	ldr	r3, [pc, #260]	; (800323c <xTaskResumeAll+0x114>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10a      	bne.n	8003154 <xTaskResumeAll+0x2c>
	__asm volatile
 800313e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003142:	f383 8811 	msr	BASEPRI, r3
 8003146:	f3bf 8f6f 	isb	sy
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	603b      	str	r3, [r7, #0]
}
 8003150:	bf00      	nop
 8003152:	e7fe      	b.n	8003152 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003154:	f000 fbca 	bl	80038ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003158:	4b38      	ldr	r3, [pc, #224]	; (800323c <xTaskResumeAll+0x114>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3b01      	subs	r3, #1
 800315e:	4a37      	ldr	r2, [pc, #220]	; (800323c <xTaskResumeAll+0x114>)
 8003160:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003162:	4b36      	ldr	r3, [pc, #216]	; (800323c <xTaskResumeAll+0x114>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d161      	bne.n	800322e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800316a:	4b35      	ldr	r3, [pc, #212]	; (8003240 <xTaskResumeAll+0x118>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d05d      	beq.n	800322e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003172:	e02e      	b.n	80031d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003174:	4b33      	ldr	r3, [pc, #204]	; (8003244 <xTaskResumeAll+0x11c>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	3318      	adds	r3, #24
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fd7b 	bl	8002c7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	3304      	adds	r3, #4
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fd76 	bl	8002c7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	2201      	movs	r2, #1
 8003196:	409a      	lsls	r2, r3
 8003198:	4b2b      	ldr	r3, [pc, #172]	; (8003248 <xTaskResumeAll+0x120>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4313      	orrs	r3, r2
 800319e:	4a2a      	ldr	r2, [pc, #168]	; (8003248 <xTaskResumeAll+0x120>)
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4a27      	ldr	r2, [pc, #156]	; (800324c <xTaskResumeAll+0x124>)
 80031b0:	441a      	add	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	3304      	adds	r3, #4
 80031b6:	4619      	mov	r1, r3
 80031b8:	4610      	mov	r0, r2
 80031ba:	f7ff fd04 	bl	8002bc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031c2:	4b23      	ldr	r3, [pc, #140]	; (8003250 <xTaskResumeAll+0x128>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d302      	bcc.n	80031d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80031cc:	4b21      	ldr	r3, [pc, #132]	; (8003254 <xTaskResumeAll+0x12c>)
 80031ce:	2201      	movs	r2, #1
 80031d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031d2:	4b1c      	ldr	r3, [pc, #112]	; (8003244 <xTaskResumeAll+0x11c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1cc      	bne.n	8003174 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d001      	beq.n	80031e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80031e0:	f000 fa0c 	bl	80035fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80031e4:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <xTaskResumeAll+0x130>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d010      	beq.n	8003212 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80031f0:	f000 f836 	bl	8003260 <xTaskIncrementTick>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80031fa:	4b16      	ldr	r3, [pc, #88]	; (8003254 <xTaskResumeAll+0x12c>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3b01      	subs	r3, #1
 8003204:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1f1      	bne.n	80031f0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800320c:	4b12      	ldr	r3, [pc, #72]	; (8003258 <xTaskResumeAll+0x130>)
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003212:	4b10      	ldr	r3, [pc, #64]	; (8003254 <xTaskResumeAll+0x12c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d009      	beq.n	800322e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800321a:	2301      	movs	r3, #1
 800321c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800321e:	4b0f      	ldr	r3, [pc, #60]	; (800325c <xTaskResumeAll+0x134>)
 8003220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800322e:	f000 fb8d 	bl	800394c <vPortExitCritical>

	return xAlreadyYielded;
 8003232:	68bb      	ldr	r3, [r7, #8]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	200004f0 	.word	0x200004f0
 8003240:	200004c8 	.word	0x200004c8
 8003244:	20000488 	.word	0x20000488
 8003248:	200004d0 	.word	0x200004d0
 800324c:	200003cc 	.word	0x200003cc
 8003250:	200003c8 	.word	0x200003c8
 8003254:	200004dc 	.word	0x200004dc
 8003258:	200004d8 	.word	0x200004d8
 800325c:	e000ed04 	.word	0xe000ed04

08003260 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800326a:	4b51      	ldr	r3, [pc, #324]	; (80033b0 <xTaskIncrementTick+0x150>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	f040 808d 	bne.w	800338e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003274:	4b4f      	ldr	r3, [pc, #316]	; (80033b4 <xTaskIncrementTick+0x154>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3301      	adds	r3, #1
 800327a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800327c:	4a4d      	ldr	r2, [pc, #308]	; (80033b4 <xTaskIncrementTick+0x154>)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d120      	bne.n	80032ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003288:	4b4b      	ldr	r3, [pc, #300]	; (80033b8 <xTaskIncrementTick+0x158>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	603b      	str	r3, [r7, #0]
}
 80032a4:	bf00      	nop
 80032a6:	e7fe      	b.n	80032a6 <xTaskIncrementTick+0x46>
 80032a8:	4b43      	ldr	r3, [pc, #268]	; (80033b8 <xTaskIncrementTick+0x158>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	4b43      	ldr	r3, [pc, #268]	; (80033bc <xTaskIncrementTick+0x15c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a41      	ldr	r2, [pc, #260]	; (80033b8 <xTaskIncrementTick+0x158>)
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4a41      	ldr	r2, [pc, #260]	; (80033bc <xTaskIncrementTick+0x15c>)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	4b40      	ldr	r3, [pc, #256]	; (80033c0 <xTaskIncrementTick+0x160>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3301      	adds	r3, #1
 80032c2:	4a3f      	ldr	r2, [pc, #252]	; (80033c0 <xTaskIncrementTick+0x160>)
 80032c4:	6013      	str	r3, [r2, #0]
 80032c6:	f000 f999 	bl	80035fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80032ca:	4b3e      	ldr	r3, [pc, #248]	; (80033c4 <xTaskIncrementTick+0x164>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d34d      	bcc.n	8003370 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032d4:	4b38      	ldr	r3, [pc, #224]	; (80033b8 <xTaskIncrementTick+0x158>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <xTaskIncrementTick+0x82>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <xTaskIncrementTick+0x84>
 80032e2:	2300      	movs	r3, #0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032e8:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <xTaskIncrementTick+0x164>)
 80032ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032ee:	601a      	str	r2, [r3, #0]
					break;
 80032f0:	e03e      	b.n	8003370 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80032f2:	4b31      	ldr	r3, [pc, #196]	; (80033b8 <xTaskIncrementTick+0x158>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	429a      	cmp	r2, r3
 8003308:	d203      	bcs.n	8003312 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800330a:	4a2e      	ldr	r2, [pc, #184]	; (80033c4 <xTaskIncrementTick+0x164>)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6013      	str	r3, [r2, #0]
						break;
 8003310:	e02e      	b.n	8003370 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	3304      	adds	r3, #4
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff fcb0 	bl	8002c7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	2b00      	cmp	r3, #0
 8003322:	d004      	beq.n	800332e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	3318      	adds	r3, #24
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fca7 	bl	8002c7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003332:	2201      	movs	r2, #1
 8003334:	409a      	lsls	r2, r3
 8003336:	4b24      	ldr	r3, [pc, #144]	; (80033c8 <xTaskIncrementTick+0x168>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4313      	orrs	r3, r2
 800333c:	4a22      	ldr	r2, [pc, #136]	; (80033c8 <xTaskIncrementTick+0x168>)
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4a1f      	ldr	r2, [pc, #124]	; (80033cc <xTaskIncrementTick+0x16c>)
 800334e:	441a      	add	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	3304      	adds	r3, #4
 8003354:	4619      	mov	r1, r3
 8003356:	4610      	mov	r0, r2
 8003358:	f7ff fc35 	bl	8002bc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003360:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <xTaskIncrementTick+0x170>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003366:	429a      	cmp	r2, r3
 8003368:	d3b4      	bcc.n	80032d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800336a:	2301      	movs	r3, #1
 800336c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800336e:	e7b1      	b.n	80032d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003370:	4b17      	ldr	r3, [pc, #92]	; (80033d0 <xTaskIncrementTick+0x170>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003376:	4915      	ldr	r1, [pc, #84]	; (80033cc <xTaskIncrementTick+0x16c>)
 8003378:	4613      	mov	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d907      	bls.n	8003398 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003388:	2301      	movs	r3, #1
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	e004      	b.n	8003398 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800338e:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <xTaskIncrementTick+0x174>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3301      	adds	r3, #1
 8003394:	4a0f      	ldr	r2, [pc, #60]	; (80033d4 <xTaskIncrementTick+0x174>)
 8003396:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003398:	4b0f      	ldr	r3, [pc, #60]	; (80033d8 <xTaskIncrementTick+0x178>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80033a0:	2301      	movs	r3, #1
 80033a2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80033a4:	697b      	ldr	r3, [r7, #20]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	200004f0 	.word	0x200004f0
 80033b4:	200004cc 	.word	0x200004cc
 80033b8:	20000480 	.word	0x20000480
 80033bc:	20000484 	.word	0x20000484
 80033c0:	200004e0 	.word	0x200004e0
 80033c4:	200004e8 	.word	0x200004e8
 80033c8:	200004d0 	.word	0x200004d0
 80033cc:	200003cc 	.word	0x200003cc
 80033d0:	200003c8 	.word	0x200003c8
 80033d4:	200004d8 	.word	0x200004d8
 80033d8:	200004dc 	.word	0x200004dc

080033dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80033dc:	b480      	push	{r7}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80033e2:	4b26      	ldr	r3, [pc, #152]	; (800347c <vTaskSwitchContext+0xa0>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80033ea:	4b25      	ldr	r3, [pc, #148]	; (8003480 <vTaskSwitchContext+0xa4>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80033f0:	e03f      	b.n	8003472 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80033f2:	4b23      	ldr	r3, [pc, #140]	; (8003480 <vTaskSwitchContext+0xa4>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80033f8:	4b22      	ldr	r3, [pc, #136]	; (8003484 <vTaskSwitchContext+0xa8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	fab3 f383 	clz	r3, r3
 8003404:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003406:	7afb      	ldrb	r3, [r7, #11]
 8003408:	f1c3 031f 	rsb	r3, r3, #31
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	491e      	ldr	r1, [pc, #120]	; (8003488 <vTaskSwitchContext+0xac>)
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4613      	mov	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003426:	f383 8811 	msr	BASEPRI, r3
 800342a:	f3bf 8f6f 	isb	sy
 800342e:	f3bf 8f4f 	dsb	sy
 8003432:	607b      	str	r3, [r7, #4]
}
 8003434:	bf00      	nop
 8003436:	e7fe      	b.n	8003436 <vTaskSwitchContext+0x5a>
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4613      	mov	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4a11      	ldr	r2, [pc, #68]	; (8003488 <vTaskSwitchContext+0xac>)
 8003444:	4413      	add	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	3308      	adds	r3, #8
 800345a:	429a      	cmp	r2, r3
 800345c:	d104      	bne.n	8003468 <vTaskSwitchContext+0x8c>
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	4a07      	ldr	r2, [pc, #28]	; (800348c <vTaskSwitchContext+0xb0>)
 8003470:	6013      	str	r3, [r2, #0]
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	200004f0 	.word	0x200004f0
 8003480:	200004dc 	.word	0x200004dc
 8003484:	200004d0 	.word	0x200004d0
 8003488:	200003cc 	.word	0x200003cc
 800348c:	200003c8 	.word	0x200003c8

08003490 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003498:	f000 f852 	bl	8003540 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <prvIdleTask+0x28>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d9f9      	bls.n	8003498 <prvIdleTask+0x8>
			{
				taskYIELD();
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <prvIdleTask+0x2c>)
 80034a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80034b4:	e7f0      	b.n	8003498 <prvIdleTask+0x8>
 80034b6:	bf00      	nop
 80034b8:	200003cc 	.word	0x200003cc
 80034bc:	e000ed04 	.word	0xe000ed04

080034c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034c6:	2300      	movs	r3, #0
 80034c8:	607b      	str	r3, [r7, #4]
 80034ca:	e00c      	b.n	80034e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4a12      	ldr	r2, [pc, #72]	; (8003520 <prvInitialiseTaskLists+0x60>)
 80034d8:	4413      	add	r3, r2
 80034da:	4618      	mov	r0, r3
 80034dc:	f7ff fb48 	bl	8002b70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3301      	adds	r3, #1
 80034e4:	607b      	str	r3, [r7, #4]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b06      	cmp	r3, #6
 80034ea:	d9ef      	bls.n	80034cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80034ec:	480d      	ldr	r0, [pc, #52]	; (8003524 <prvInitialiseTaskLists+0x64>)
 80034ee:	f7ff fb3f 	bl	8002b70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80034f2:	480d      	ldr	r0, [pc, #52]	; (8003528 <prvInitialiseTaskLists+0x68>)
 80034f4:	f7ff fb3c 	bl	8002b70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80034f8:	480c      	ldr	r0, [pc, #48]	; (800352c <prvInitialiseTaskLists+0x6c>)
 80034fa:	f7ff fb39 	bl	8002b70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80034fe:	480c      	ldr	r0, [pc, #48]	; (8003530 <prvInitialiseTaskLists+0x70>)
 8003500:	f7ff fb36 	bl	8002b70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003504:	480b      	ldr	r0, [pc, #44]	; (8003534 <prvInitialiseTaskLists+0x74>)
 8003506:	f7ff fb33 	bl	8002b70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800350a:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <prvInitialiseTaskLists+0x78>)
 800350c:	4a05      	ldr	r2, [pc, #20]	; (8003524 <prvInitialiseTaskLists+0x64>)
 800350e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003510:	4b0a      	ldr	r3, [pc, #40]	; (800353c <prvInitialiseTaskLists+0x7c>)
 8003512:	4a05      	ldr	r2, [pc, #20]	; (8003528 <prvInitialiseTaskLists+0x68>)
 8003514:	601a      	str	r2, [r3, #0]
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	200003cc 	.word	0x200003cc
 8003524:	20000458 	.word	0x20000458
 8003528:	2000046c 	.word	0x2000046c
 800352c:	20000488 	.word	0x20000488
 8003530:	2000049c 	.word	0x2000049c
 8003534:	200004b4 	.word	0x200004b4
 8003538:	20000480 	.word	0x20000480
 800353c:	20000484 	.word	0x20000484

08003540 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003546:	e019      	b.n	800357c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003548:	f000 f9d0 	bl	80038ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800354c:	4b10      	ldr	r3, [pc, #64]	; (8003590 <prvCheckTasksWaitingTermination+0x50>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3304      	adds	r3, #4
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fb8f 	bl	8002c7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800355e:	4b0d      	ldr	r3, [pc, #52]	; (8003594 <prvCheckTasksWaitingTermination+0x54>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	3b01      	subs	r3, #1
 8003564:	4a0b      	ldr	r2, [pc, #44]	; (8003594 <prvCheckTasksWaitingTermination+0x54>)
 8003566:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003568:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <prvCheckTasksWaitingTermination+0x58>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3b01      	subs	r3, #1
 800356e:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <prvCheckTasksWaitingTermination+0x58>)
 8003570:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003572:	f000 f9eb 	bl	800394c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f810 	bl	800359c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800357c:	4b06      	ldr	r3, [pc, #24]	; (8003598 <prvCheckTasksWaitingTermination+0x58>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1e1      	bne.n	8003548 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003584:	bf00      	nop
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	2000049c 	.word	0x2000049c
 8003594:	200004c8 	.word	0x200004c8
 8003598:	200004b0 	.word	0x200004b0

0800359c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d108      	bne.n	80035c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fb20 	bl	8003bf8 <vPortFree>
				vPortFree( pxTCB );
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 fb1d 	bl	8003bf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80035be:	e018      	b.n	80035f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d103      	bne.n	80035d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fb14 	bl	8003bf8 <vPortFree>
	}
 80035d0:	e00f      	b.n	80035f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d00a      	beq.n	80035f2 <prvDeleteTCB+0x56>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	60fb      	str	r3, [r7, #12]
}
 80035ee:	bf00      	nop
 80035f0:	e7fe      	b.n	80035f0 <prvDeleteTCB+0x54>
	}
 80035f2:	bf00      	nop
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003602:	4b0e      	ldr	r3, [pc, #56]	; (800363c <prvResetNextTaskUnblockTime+0x40>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <prvResetNextTaskUnblockTime+0x14>
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <prvResetNextTaskUnblockTime+0x16>
 8003610:	2300      	movs	r3, #0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d004      	beq.n	8003620 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <prvResetNextTaskUnblockTime+0x44>)
 8003618:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800361c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800361e:	e008      	b.n	8003632 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003620:	4b06      	ldr	r3, [pc, #24]	; (800363c <prvResetNextTaskUnblockTime+0x40>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	4a04      	ldr	r2, [pc, #16]	; (8003640 <prvResetNextTaskUnblockTime+0x44>)
 8003630:	6013      	str	r3, [r2, #0]
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	bc80      	pop	{r7}
 800363a:	4770      	bx	lr
 800363c:	20000480 	.word	0x20000480
 8003640:	200004e8 	.word	0x200004e8

08003644 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800364e:	4b29      	ldr	r3, [pc, #164]	; (80036f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003654:	4b28      	ldr	r3, [pc, #160]	; (80036f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3304      	adds	r3, #4
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff fb0e 	bl	8002c7c <uxListRemove>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10b      	bne.n	800367e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003666:	4b24      	ldr	r3, [pc, #144]	; (80036f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	2201      	movs	r2, #1
 800366e:	fa02 f303 	lsl.w	r3, r2, r3
 8003672:	43da      	mvns	r2, r3
 8003674:	4b21      	ldr	r3, [pc, #132]	; (80036fc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4013      	ands	r3, r2
 800367a:	4a20      	ldr	r2, [pc, #128]	; (80036fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800367c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003684:	d10a      	bne.n	800369c <prvAddCurrentTaskToDelayedList+0x58>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d007      	beq.n	800369c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800368c:	4b1a      	ldr	r3, [pc, #104]	; (80036f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3304      	adds	r3, #4
 8003692:	4619      	mov	r1, r3
 8003694:	481a      	ldr	r0, [pc, #104]	; (8003700 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003696:	f7ff fa96 	bl	8002bc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800369a:	e026      	b.n	80036ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4413      	add	r3, r2
 80036a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80036a4:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d209      	bcs.n	80036c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036b4:	4b13      	ldr	r3, [pc, #76]	; (8003704 <prvAddCurrentTaskToDelayedList+0xc0>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3304      	adds	r3, #4
 80036be:	4619      	mov	r1, r3
 80036c0:	4610      	mov	r0, r2
 80036c2:	f7ff faa3 	bl	8002c0c <vListInsert>
}
 80036c6:	e010      	b.n	80036ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036c8:	4b0f      	ldr	r3, [pc, #60]	; (8003708 <prvAddCurrentTaskToDelayedList+0xc4>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3304      	adds	r3, #4
 80036d2:	4619      	mov	r1, r3
 80036d4:	4610      	mov	r0, r2
 80036d6:	f7ff fa99 	bl	8002c0c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80036da:	4b0c      	ldr	r3, [pc, #48]	; (800370c <prvAddCurrentTaskToDelayedList+0xc8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d202      	bcs.n	80036ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80036e4:	4a09      	ldr	r2, [pc, #36]	; (800370c <prvAddCurrentTaskToDelayedList+0xc8>)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	6013      	str	r3, [r2, #0]
}
 80036ea:	bf00      	nop
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	200004cc 	.word	0x200004cc
 80036f8:	200003c8 	.word	0x200003c8
 80036fc:	200004d0 	.word	0x200004d0
 8003700:	200004b4 	.word	0x200004b4
 8003704:	20000484 	.word	0x20000484
 8003708:	20000480 	.word	0x20000480
 800370c:	200004e8 	.word	0x200004e8

08003710 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3b04      	subs	r3, #4
 8003720:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3b04      	subs	r3, #4
 800372e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f023 0201 	bic.w	r2, r3, #1
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3b04      	subs	r3, #4
 800373e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003740:	4a08      	ldr	r2, [pc, #32]	; (8003764 <pxPortInitialiseStack+0x54>)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	3b14      	subs	r3, #20
 800374a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	3b20      	subs	r3, #32
 8003756:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003758:	68fb      	ldr	r3, [r7, #12]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3714      	adds	r7, #20
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr
 8003764:	08003769 	.word	0x08003769

08003768 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800376e:	2300      	movs	r3, #0
 8003770:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003772:	4b12      	ldr	r3, [pc, #72]	; (80037bc <prvTaskExitError+0x54>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800377a:	d00a      	beq.n	8003792 <prvTaskExitError+0x2a>
	__asm volatile
 800377c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	f3bf 8f6f 	isb	sy
 8003788:	f3bf 8f4f 	dsb	sy
 800378c:	60fb      	str	r3, [r7, #12]
}
 800378e:	bf00      	nop
 8003790:	e7fe      	b.n	8003790 <prvTaskExitError+0x28>
	__asm volatile
 8003792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	60bb      	str	r3, [r7, #8]
}
 80037a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80037a6:	bf00      	nop
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d0fc      	beq.n	80037a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80037ae:	bf00      	nop
 80037b0:	bf00      	nop
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bc80      	pop	{r7}
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	200000e8 	.word	0x200000e8

080037c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80037c0:	4b07      	ldr	r3, [pc, #28]	; (80037e0 <pxCurrentTCBConst2>)
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	6808      	ldr	r0, [r1, #0]
 80037c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80037ca:	f380 8809 	msr	PSP, r0
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f04f 0000 	mov.w	r0, #0
 80037d6:	f380 8811 	msr	BASEPRI, r0
 80037da:	f04e 0e0d 	orr.w	lr, lr, #13
 80037de:	4770      	bx	lr

080037e0 <pxCurrentTCBConst2>:
 80037e0:	200003c8 	.word	0x200003c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop

080037e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80037e8:	4806      	ldr	r0, [pc, #24]	; (8003804 <prvPortStartFirstTask+0x1c>)
 80037ea:	6800      	ldr	r0, [r0, #0]
 80037ec:	6800      	ldr	r0, [r0, #0]
 80037ee:	f380 8808 	msr	MSP, r0
 80037f2:	b662      	cpsie	i
 80037f4:	b661      	cpsie	f
 80037f6:	f3bf 8f4f 	dsb	sy
 80037fa:	f3bf 8f6f 	isb	sy
 80037fe:	df00      	svc	0
 8003800:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003802:	bf00      	nop
 8003804:	e000ed08 	.word	0xe000ed08

08003808 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800380e:	4b32      	ldr	r3, [pc, #200]	; (80038d8 <xPortStartScheduler+0xd0>)
 8003810:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	22ff      	movs	r2, #255	; 0xff
 800381e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003828:	78fb      	ldrb	r3, [r7, #3]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003830:	b2da      	uxtb	r2, r3
 8003832:	4b2a      	ldr	r3, [pc, #168]	; (80038dc <xPortStartScheduler+0xd4>)
 8003834:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003836:	4b2a      	ldr	r3, [pc, #168]	; (80038e0 <xPortStartScheduler+0xd8>)
 8003838:	2207      	movs	r2, #7
 800383a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800383c:	e009      	b.n	8003852 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800383e:	4b28      	ldr	r3, [pc, #160]	; (80038e0 <xPortStartScheduler+0xd8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3b01      	subs	r3, #1
 8003844:	4a26      	ldr	r2, [pc, #152]	; (80038e0 <xPortStartScheduler+0xd8>)
 8003846:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003848:	78fb      	ldrb	r3, [r7, #3]
 800384a:	b2db      	uxtb	r3, r3
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	b2db      	uxtb	r3, r3
 8003850:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385a:	2b80      	cmp	r3, #128	; 0x80
 800385c:	d0ef      	beq.n	800383e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800385e:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <xPortStartScheduler+0xd8>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f1c3 0307 	rsb	r3, r3, #7
 8003866:	2b04      	cmp	r3, #4
 8003868:	d00a      	beq.n	8003880 <xPortStartScheduler+0x78>
	__asm volatile
 800386a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	60bb      	str	r3, [r7, #8]
}
 800387c:	bf00      	nop
 800387e:	e7fe      	b.n	800387e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003880:	4b17      	ldr	r3, [pc, #92]	; (80038e0 <xPortStartScheduler+0xd8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	021b      	lsls	r3, r3, #8
 8003886:	4a16      	ldr	r2, [pc, #88]	; (80038e0 <xPortStartScheduler+0xd8>)
 8003888:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800388a:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <xPortStartScheduler+0xd8>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003892:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <xPortStartScheduler+0xd8>)
 8003894:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800389e:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <xPortStartScheduler+0xdc>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a10      	ldr	r2, [pc, #64]	; (80038e4 <xPortStartScheduler+0xdc>)
 80038a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <xPortStartScheduler+0xdc>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a0d      	ldr	r2, [pc, #52]	; (80038e4 <xPortStartScheduler+0xdc>)
 80038b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80038b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80038b6:	f000 f8b9 	bl	8003a2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80038ba:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <xPortStartScheduler+0xe0>)
 80038bc:	2200      	movs	r2, #0
 80038be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80038c0:	f7ff ff92 	bl	80037e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80038c4:	f7ff fd8a 	bl	80033dc <vTaskSwitchContext>
	prvTaskExitError();
 80038c8:	f7ff ff4e 	bl	8003768 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	e000e400 	.word	0xe000e400
 80038dc:	200004f4 	.word	0x200004f4
 80038e0:	200004f8 	.word	0x200004f8
 80038e4:	e000ed20 	.word	0xe000ed20
 80038e8:	200000e8 	.word	0x200000e8

080038ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
	__asm volatile
 80038f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f6:	f383 8811 	msr	BASEPRI, r3
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	f3bf 8f4f 	dsb	sy
 8003902:	607b      	str	r3, [r7, #4]
}
 8003904:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003906:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <vPortEnterCritical+0x58>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	3301      	adds	r3, #1
 800390c:	4a0d      	ldr	r2, [pc, #52]	; (8003944 <vPortEnterCritical+0x58>)
 800390e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <vPortEnterCritical+0x58>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d10f      	bne.n	8003938 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003918:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <vPortEnterCritical+0x5c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <vPortEnterCritical+0x4c>
	__asm volatile
 8003922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	f3bf 8f6f 	isb	sy
 800392e:	f3bf 8f4f 	dsb	sy
 8003932:	603b      	str	r3, [r7, #0]
}
 8003934:	bf00      	nop
 8003936:	e7fe      	b.n	8003936 <vPortEnterCritical+0x4a>
	}
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	200000e8 	.word	0x200000e8
 8003948:	e000ed04 	.word	0xe000ed04

0800394c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003952:	4b11      	ldr	r3, [pc, #68]	; (8003998 <vPortExitCritical+0x4c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10a      	bne.n	8003970 <vPortExitCritical+0x24>
	__asm volatile
 800395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	607b      	str	r3, [r7, #4]
}
 800396c:	bf00      	nop
 800396e:	e7fe      	b.n	800396e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003970:	4b09      	ldr	r3, [pc, #36]	; (8003998 <vPortExitCritical+0x4c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3b01      	subs	r3, #1
 8003976:	4a08      	ldr	r2, [pc, #32]	; (8003998 <vPortExitCritical+0x4c>)
 8003978:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800397a:	4b07      	ldr	r3, [pc, #28]	; (8003998 <vPortExitCritical+0x4c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d105      	bne.n	800398e <vPortExitCritical+0x42>
 8003982:	2300      	movs	r3, #0
 8003984:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800398c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr
 8003998:	200000e8 	.word	0x200000e8
 800399c:	00000000 	.word	0x00000000

080039a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80039a0:	f3ef 8009 	mrs	r0, PSP
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <pxCurrentTCBConst>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80039b0:	6010      	str	r0, [r2, #0]
 80039b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80039b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80039ba:	f380 8811 	msr	BASEPRI, r0
 80039be:	f7ff fd0d 	bl	80033dc <vTaskSwitchContext>
 80039c2:	f04f 0000 	mov.w	r0, #0
 80039c6:	f380 8811 	msr	BASEPRI, r0
 80039ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80039ce:	6819      	ldr	r1, [r3, #0]
 80039d0:	6808      	ldr	r0, [r1, #0]
 80039d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80039d6:	f380 8809 	msr	PSP, r0
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	4770      	bx	lr

080039e0 <pxCurrentTCBConst>:
 80039e0:	200003c8 	.word	0x200003c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80039e4:	bf00      	nop
 80039e6:	bf00      	nop

080039e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
	__asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	607b      	str	r3, [r7, #4]
}
 8003a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003a02:	f7ff fc2d 	bl	8003260 <xTaskIncrementTick>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003a0c:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <SysTick_Handler+0x40>)
 8003a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	2300      	movs	r3, #0
 8003a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	f383 8811 	msr	BASEPRI, r3
}
 8003a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003a20:	bf00      	nop
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	e000ed04 	.word	0xe000ed04

08003a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003a30:	4b0a      	ldr	r3, [pc, #40]	; (8003a5c <vPortSetupTimerInterrupt+0x30>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003a36:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <vPortSetupTimerInterrupt+0x34>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <vPortSetupTimerInterrupt+0x38>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a09      	ldr	r2, [pc, #36]	; (8003a68 <vPortSetupTimerInterrupt+0x3c>)
 8003a42:	fba2 2303 	umull	r2, r3, r2, r3
 8003a46:	099b      	lsrs	r3, r3, #6
 8003a48:	4a08      	ldr	r2, [pc, #32]	; (8003a6c <vPortSetupTimerInterrupt+0x40>)
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a4e:	4b03      	ldr	r3, [pc, #12]	; (8003a5c <vPortSetupTimerInterrupt+0x30>)
 8003a50:	2207      	movs	r2, #7
 8003a52:	601a      	str	r2, [r3, #0]
}
 8003a54:	bf00      	nop
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr
 8003a5c:	e000e010 	.word	0xe000e010
 8003a60:	e000e018 	.word	0xe000e018
 8003a64:	200000dc 	.word	0x200000dc
 8003a68:	10624dd3 	.word	0x10624dd3
 8003a6c:	e000e014 	.word	0xe000e014

08003a70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08a      	sub	sp, #40	; 0x28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003a7c:	f7ff fb46 	bl	800310c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003a80:	4b58      	ldr	r3, [pc, #352]	; (8003be4 <pvPortMalloc+0x174>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003a88:	f000 f910 	bl	8003cac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003a8c:	4b56      	ldr	r3, [pc, #344]	; (8003be8 <pvPortMalloc+0x178>)
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f040 808e 	bne.w	8003bb6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01d      	beq.n	8003adc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003aa0:	2208      	movs	r2, #8
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d014      	beq.n	8003adc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f023 0307 	bic.w	r3, r3, #7
 8003ab8:	3308      	adds	r3, #8
 8003aba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <pvPortMalloc+0x6c>
	__asm volatile
 8003ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aca:	f383 8811 	msr	BASEPRI, r3
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	617b      	str	r3, [r7, #20]
}
 8003ad8:	bf00      	nop
 8003ada:	e7fe      	b.n	8003ada <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d069      	beq.n	8003bb6 <pvPortMalloc+0x146>
 8003ae2:	4b42      	ldr	r3, [pc, #264]	; (8003bec <pvPortMalloc+0x17c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d864      	bhi.n	8003bb6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003aec:	4b40      	ldr	r3, [pc, #256]	; (8003bf0 <pvPortMalloc+0x180>)
 8003aee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003af0:	4b3f      	ldr	r3, [pc, #252]	; (8003bf0 <pvPortMalloc+0x180>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003af6:	e004      	b.n	8003b02 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d903      	bls.n	8003b14 <pvPortMalloc+0xa4>
 8003b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1f1      	bne.n	8003af8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003b14:	4b33      	ldr	r3, [pc, #204]	; (8003be4 <pvPortMalloc+0x174>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d04b      	beq.n	8003bb6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2208      	movs	r2, #8
 8003b24:	4413      	add	r3, r2
 8003b26:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	1ad2      	subs	r2, r2, r3
 8003b38:	2308      	movs	r3, #8
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d91f      	bls.n	8003b80 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4413      	add	r3, r2
 8003b46:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <pvPortMalloc+0xf8>
	__asm volatile
 8003b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b56:	f383 8811 	msr	BASEPRI, r3
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	f3bf 8f4f 	dsb	sy
 8003b62:	613b      	str	r3, [r7, #16]
}
 8003b64:	bf00      	nop
 8003b66:	e7fe      	b.n	8003b66 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6a:	685a      	ldr	r2, [r3, #4]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	1ad2      	subs	r2, r2, r3
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b7a:	69b8      	ldr	r0, [r7, #24]
 8003b7c:	f000 f8f8 	bl	8003d70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b80:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <pvPortMalloc+0x17c>)
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	4a18      	ldr	r2, [pc, #96]	; (8003bec <pvPortMalloc+0x17c>)
 8003b8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b8e:	4b17      	ldr	r3, [pc, #92]	; (8003bec <pvPortMalloc+0x17c>)
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4b18      	ldr	r3, [pc, #96]	; (8003bf4 <pvPortMalloc+0x184>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d203      	bcs.n	8003ba2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b9a:	4b14      	ldr	r3, [pc, #80]	; (8003bec <pvPortMalloc+0x17c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a15      	ldr	r2, [pc, #84]	; (8003bf4 <pvPortMalloc+0x184>)
 8003ba0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	4b10      	ldr	r3, [pc, #64]	; (8003be8 <pvPortMalloc+0x178>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003bb6:	f7ff fab7 	bl	8003128 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	f003 0307 	and.w	r3, r3, #7
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00a      	beq.n	8003bda <pvPortMalloc+0x16a>
	__asm volatile
 8003bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc8:	f383 8811 	msr	BASEPRI, r3
 8003bcc:	f3bf 8f6f 	isb	sy
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	60fb      	str	r3, [r7, #12]
}
 8003bd6:	bf00      	nop
 8003bd8:	e7fe      	b.n	8003bd8 <pvPortMalloc+0x168>
	return pvReturn;
 8003bda:	69fb      	ldr	r3, [r7, #28]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3728      	adds	r7, #40	; 0x28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20001104 	.word	0x20001104
 8003be8:	20001110 	.word	0x20001110
 8003bec:	20001108 	.word	0x20001108
 8003bf0:	200010fc 	.word	0x200010fc
 8003bf4:	2000110c 	.word	0x2000110c

08003bf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d048      	beq.n	8003c9c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003c0a:	2308      	movs	r3, #8
 8003c0c:	425b      	negs	r3, r3
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4413      	add	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	685a      	ldr	r2, [r3, #4]
 8003c1c:	4b21      	ldr	r3, [pc, #132]	; (8003ca4 <vPortFree+0xac>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4013      	ands	r3, r2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10a      	bne.n	8003c3c <vPortFree+0x44>
	__asm volatile
 8003c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2a:	f383 8811 	msr	BASEPRI, r3
 8003c2e:	f3bf 8f6f 	isb	sy
 8003c32:	f3bf 8f4f 	dsb	sy
 8003c36:	60fb      	str	r3, [r7, #12]
}
 8003c38:	bf00      	nop
 8003c3a:	e7fe      	b.n	8003c3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <vPortFree+0x62>
	__asm volatile
 8003c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	60bb      	str	r3, [r7, #8]
}
 8003c56:	bf00      	nop
 8003c58:	e7fe      	b.n	8003c58 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <vPortFree+0xac>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d019      	beq.n	8003c9c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d115      	bne.n	8003c9c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <vPortFree+0xac>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	401a      	ands	r2, r3
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003c80:	f7ff fa44 	bl	800310c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	4b07      	ldr	r3, [pc, #28]	; (8003ca8 <vPortFree+0xb0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	4a06      	ldr	r2, [pc, #24]	; (8003ca8 <vPortFree+0xb0>)
 8003c90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c92:	6938      	ldr	r0, [r7, #16]
 8003c94:	f000 f86c 	bl	8003d70 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003c98:	f7ff fa46 	bl	8003128 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003c9c:	bf00      	nop
 8003c9e:	3718      	adds	r7, #24
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20001110 	.word	0x20001110
 8003ca8:	20001108 	.word	0x20001108

08003cac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003cb2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003cb6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003cb8:	4b27      	ldr	r3, [pc, #156]	; (8003d58 <prvHeapInit+0xac>)
 8003cba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00c      	beq.n	8003ce0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3307      	adds	r3, #7
 8003cca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 0307 	bic.w	r3, r3, #7
 8003cd2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	4a1f      	ldr	r2, [pc, #124]	; (8003d58 <prvHeapInit+0xac>)
 8003cdc:	4413      	add	r3, r2
 8003cde:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ce4:	4a1d      	ldr	r2, [pc, #116]	; (8003d5c <prvHeapInit+0xb0>)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003cea:	4b1c      	ldr	r3, [pc, #112]	; (8003d5c <prvHeapInit+0xb0>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003cf8:	2208      	movs	r2, #8
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 0307 	bic.w	r3, r3, #7
 8003d06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4a15      	ldr	r2, [pc, #84]	; (8003d60 <prvHeapInit+0xb4>)
 8003d0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003d0e:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <prvHeapInit+0xb4>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2200      	movs	r2, #0
 8003d14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003d16:	4b12      	ldr	r3, [pc, #72]	; (8003d60 <prvHeapInit+0xb4>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	1ad2      	subs	r2, r2, r3
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d2c:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <prvHeapInit+0xb4>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <prvHeapInit+0xb8>)
 8003d3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	4a09      	ldr	r2, [pc, #36]	; (8003d68 <prvHeapInit+0xbc>)
 8003d42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d44:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <prvHeapInit+0xc0>)
 8003d46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003d4a:	601a      	str	r2, [r3, #0]
}
 8003d4c:	bf00      	nop
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	200004fc 	.word	0x200004fc
 8003d5c:	200010fc 	.word	0x200010fc
 8003d60:	20001104 	.word	0x20001104
 8003d64:	2000110c 	.word	0x2000110c
 8003d68:	20001108 	.word	0x20001108
 8003d6c:	20001110 	.word	0x20001110

08003d70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003d78:	4b27      	ldr	r3, [pc, #156]	; (8003e18 <prvInsertBlockIntoFreeList+0xa8>)
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	e002      	b.n	8003d84 <prvInsertBlockIntoFreeList+0x14>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d8f7      	bhi.n	8003d7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	68ba      	ldr	r2, [r7, #8]
 8003d98:	4413      	add	r3, r2
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d108      	bne.n	8003db2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	441a      	add	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	441a      	add	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d118      	bne.n	8003df8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	4b14      	ldr	r3, [pc, #80]	; (8003e1c <prvInsertBlockIntoFreeList+0xac>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d00d      	beq.n	8003dee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	441a      	add	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	e008      	b.n	8003e00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003dee:	4b0b      	ldr	r3, [pc, #44]	; (8003e1c <prvInsertBlockIntoFreeList+0xac>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e003      	b.n	8003e00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d002      	beq.n	8003e0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr
 8003e18:	200010fc 	.word	0x200010fc
 8003e1c:	20001104 	.word	0x20001104

08003e20 <__errno>:
 8003e20:	4b01      	ldr	r3, [pc, #4]	; (8003e28 <__errno+0x8>)
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	200000ec 	.word	0x200000ec

08003e2c <__libc_init_array>:
 8003e2c:	b570      	push	{r4, r5, r6, lr}
 8003e2e:	2600      	movs	r6, #0
 8003e30:	4d0c      	ldr	r5, [pc, #48]	; (8003e64 <__libc_init_array+0x38>)
 8003e32:	4c0d      	ldr	r4, [pc, #52]	; (8003e68 <__libc_init_array+0x3c>)
 8003e34:	1b64      	subs	r4, r4, r5
 8003e36:	10a4      	asrs	r4, r4, #2
 8003e38:	42a6      	cmp	r6, r4
 8003e3a:	d109      	bne.n	8003e50 <__libc_init_array+0x24>
 8003e3c:	f001 fa90 	bl	8005360 <_init>
 8003e40:	2600      	movs	r6, #0
 8003e42:	4d0a      	ldr	r5, [pc, #40]	; (8003e6c <__libc_init_array+0x40>)
 8003e44:	4c0a      	ldr	r4, [pc, #40]	; (8003e70 <__libc_init_array+0x44>)
 8003e46:	1b64      	subs	r4, r4, r5
 8003e48:	10a4      	asrs	r4, r4, #2
 8003e4a:	42a6      	cmp	r6, r4
 8003e4c:	d105      	bne.n	8003e5a <__libc_init_array+0x2e>
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}
 8003e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e54:	4798      	blx	r3
 8003e56:	3601      	adds	r6, #1
 8003e58:	e7ee      	b.n	8003e38 <__libc_init_array+0xc>
 8003e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e5e:	4798      	blx	r3
 8003e60:	3601      	adds	r6, #1
 8003e62:	e7f2      	b.n	8003e4a <__libc_init_array+0x1e>
 8003e64:	08005540 	.word	0x08005540
 8003e68:	08005540 	.word	0x08005540
 8003e6c:	08005540 	.word	0x08005540
 8003e70:	08005544 	.word	0x08005544

08003e74 <memcpy>:
 8003e74:	440a      	add	r2, r1
 8003e76:	4291      	cmp	r1, r2
 8003e78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003e7c:	d100      	bne.n	8003e80 <memcpy+0xc>
 8003e7e:	4770      	bx	lr
 8003e80:	b510      	push	{r4, lr}
 8003e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e86:	4291      	cmp	r1, r2
 8003e88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e8c:	d1f9      	bne.n	8003e82 <memcpy+0xe>
 8003e8e:	bd10      	pop	{r4, pc}

08003e90 <memset>:
 8003e90:	4603      	mov	r3, r0
 8003e92:	4402      	add	r2, r0
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d100      	bne.n	8003e9a <memset+0xa>
 8003e98:	4770      	bx	lr
 8003e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e9e:	e7f9      	b.n	8003e94 <memset+0x4>

08003ea0 <srand>:
 8003ea0:	b538      	push	{r3, r4, r5, lr}
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <srand+0x44>)
 8003ea4:	4604      	mov	r4, r0
 8003ea6:	681d      	ldr	r5, [r3, #0]
 8003ea8:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003eaa:	b9b3      	cbnz	r3, 8003eda <srand+0x3a>
 8003eac:	2018      	movs	r0, #24
 8003eae:	f000 f90f 	bl	80040d0 <malloc>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	63a8      	str	r0, [r5, #56]	; 0x38
 8003eb6:	b920      	cbnz	r0, 8003ec2 <srand+0x22>
 8003eb8:	2142      	movs	r1, #66	; 0x42
 8003eba:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <srand+0x48>)
 8003ebc:	480b      	ldr	r0, [pc, #44]	; (8003eec <srand+0x4c>)
 8003ebe:	f000 f8c5 	bl	800404c <__assert_func>
 8003ec2:	490b      	ldr	r1, [pc, #44]	; (8003ef0 <srand+0x50>)
 8003ec4:	4b0b      	ldr	r3, [pc, #44]	; (8003ef4 <srand+0x54>)
 8003ec6:	e9c0 1300 	strd	r1, r3, [r0]
 8003eca:	4b0b      	ldr	r3, [pc, #44]	; (8003ef8 <srand+0x58>)
 8003ecc:	2100      	movs	r1, #0
 8003ece:	6083      	str	r3, [r0, #8]
 8003ed0:	230b      	movs	r3, #11
 8003ed2:	8183      	strh	r3, [r0, #12]
 8003ed4:	2001      	movs	r0, #1
 8003ed6:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003eda:	2200      	movs	r2, #0
 8003edc:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003ede:	611c      	str	r4, [r3, #16]
 8003ee0:	615a      	str	r2, [r3, #20]
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	200000ec 	.word	0x200000ec
 8003ee8:	080053f8 	.word	0x080053f8
 8003eec:	0800540f 	.word	0x0800540f
 8003ef0:	abcd330e 	.word	0xabcd330e
 8003ef4:	e66d1234 	.word	0xe66d1234
 8003ef8:	0005deec 	.word	0x0005deec

08003efc <rand>:
 8003efc:	4b17      	ldr	r3, [pc, #92]	; (8003f5c <rand+0x60>)
 8003efe:	b510      	push	{r4, lr}
 8003f00:	681c      	ldr	r4, [r3, #0]
 8003f02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f04:	b9b3      	cbnz	r3, 8003f34 <rand+0x38>
 8003f06:	2018      	movs	r0, #24
 8003f08:	f000 f8e2 	bl	80040d0 <malloc>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	63a0      	str	r0, [r4, #56]	; 0x38
 8003f10:	b920      	cbnz	r0, 8003f1c <rand+0x20>
 8003f12:	214e      	movs	r1, #78	; 0x4e
 8003f14:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <rand+0x64>)
 8003f16:	4813      	ldr	r0, [pc, #76]	; (8003f64 <rand+0x68>)
 8003f18:	f000 f898 	bl	800404c <__assert_func>
 8003f1c:	4912      	ldr	r1, [pc, #72]	; (8003f68 <rand+0x6c>)
 8003f1e:	4b13      	ldr	r3, [pc, #76]	; (8003f6c <rand+0x70>)
 8003f20:	e9c0 1300 	strd	r1, r3, [r0]
 8003f24:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <rand+0x74>)
 8003f26:	2100      	movs	r1, #0
 8003f28:	6083      	str	r3, [r0, #8]
 8003f2a:	230b      	movs	r3, #11
 8003f2c:	8183      	strh	r3, [r0, #12]
 8003f2e:	2001      	movs	r0, #1
 8003f30:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003f34:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003f36:	480f      	ldr	r0, [pc, #60]	; (8003f74 <rand+0x78>)
 8003f38:	690a      	ldr	r2, [r1, #16]
 8003f3a:	694b      	ldr	r3, [r1, #20]
 8003f3c:	4350      	muls	r0, r2
 8003f3e:	4c0e      	ldr	r4, [pc, #56]	; (8003f78 <rand+0x7c>)
 8003f40:	fb04 0003 	mla	r0, r4, r3, r0
 8003f44:	fba2 3404 	umull	r3, r4, r2, r4
 8003f48:	1c5a      	adds	r2, r3, #1
 8003f4a:	4404      	add	r4, r0
 8003f4c:	f144 0000 	adc.w	r0, r4, #0
 8003f50:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8003f54:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003f58:	bd10      	pop	{r4, pc}
 8003f5a:	bf00      	nop
 8003f5c:	200000ec 	.word	0x200000ec
 8003f60:	080053f8 	.word	0x080053f8
 8003f64:	0800540f 	.word	0x0800540f
 8003f68:	abcd330e 	.word	0xabcd330e
 8003f6c:	e66d1234 	.word	0xe66d1234
 8003f70:	0005deec 	.word	0x0005deec
 8003f74:	5851f42d 	.word	0x5851f42d
 8003f78:	4c957f2d 	.word	0x4c957f2d

08003f7c <siprintf>:
 8003f7c:	b40e      	push	{r1, r2, r3}
 8003f7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f82:	b500      	push	{lr}
 8003f84:	b09c      	sub	sp, #112	; 0x70
 8003f86:	ab1d      	add	r3, sp, #116	; 0x74
 8003f88:	9002      	str	r0, [sp, #8]
 8003f8a:	9006      	str	r0, [sp, #24]
 8003f8c:	9107      	str	r1, [sp, #28]
 8003f8e:	9104      	str	r1, [sp, #16]
 8003f90:	4808      	ldr	r0, [pc, #32]	; (8003fb4 <siprintf+0x38>)
 8003f92:	4909      	ldr	r1, [pc, #36]	; (8003fb8 <siprintf+0x3c>)
 8003f94:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f98:	9105      	str	r1, [sp, #20]
 8003f9a:	6800      	ldr	r0, [r0, #0]
 8003f9c:	a902      	add	r1, sp, #8
 8003f9e:	9301      	str	r3, [sp, #4]
 8003fa0:	f000 f9a0 	bl	80042e4 <_svfiprintf_r>
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	9b02      	ldr	r3, [sp, #8]
 8003fa8:	701a      	strb	r2, [r3, #0]
 8003faa:	b01c      	add	sp, #112	; 0x70
 8003fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fb0:	b003      	add	sp, #12
 8003fb2:	4770      	bx	lr
 8003fb4:	200000ec 	.word	0x200000ec
 8003fb8:	ffff0208 	.word	0xffff0208

08003fbc <strcat>:
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	b510      	push	{r4, lr}
 8003fc0:	7814      	ldrb	r4, [r2, #0]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	3201      	adds	r2, #1
 8003fc6:	2c00      	cmp	r4, #0
 8003fc8:	d1fa      	bne.n	8003fc0 <strcat+0x4>
 8003fca:	3b01      	subs	r3, #1
 8003fcc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fd0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fd4:	2a00      	cmp	r2, #0
 8003fd6:	d1f9      	bne.n	8003fcc <strcat+0x10>
 8003fd8:	bd10      	pop	{r4, pc}

08003fda <strcpy>:
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fe0:	f803 2b01 	strb.w	r2, [r3], #1
 8003fe4:	2a00      	cmp	r2, #0
 8003fe6:	d1f9      	bne.n	8003fdc <strcpy+0x2>
 8003fe8:	4770      	bx	lr

08003fea <strstr>:
 8003fea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fec:	780c      	ldrb	r4, [r1, #0]
 8003fee:	b164      	cbz	r4, 800400a <strstr+0x20>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	781a      	ldrb	r2, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	1c5e      	adds	r6, r3, #1
 8003ff8:	b90a      	cbnz	r2, 8003ffe <strstr+0x14>
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	e005      	b.n	800400a <strstr+0x20>
 8003ffe:	4294      	cmp	r4, r2
 8004000:	d108      	bne.n	8004014 <strstr+0x2a>
 8004002:	460d      	mov	r5, r1
 8004004:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004008:	b902      	cbnz	r2, 800400c <strstr+0x22>
 800400a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800400c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004010:	4297      	cmp	r7, r2
 8004012:	d0f7      	beq.n	8004004 <strstr+0x1a>
 8004014:	4633      	mov	r3, r6
 8004016:	e7ec      	b.n	8003ff2 <strstr+0x8>

08004018 <time>:
 8004018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800401a:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <time+0x30>)
 800401c:	4604      	mov	r4, r0
 800401e:	2200      	movs	r2, #0
 8004020:	4669      	mov	r1, sp
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	f000 f842 	bl	80040ac <_gettimeofday_r>
 8004028:	2800      	cmp	r0, #0
 800402a:	da05      	bge.n	8004038 <time+0x20>
 800402c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004034:	e9cd 2300 	strd	r2, r3, [sp]
 8004038:	e9dd 0100 	ldrd	r0, r1, [sp]
 800403c:	b10c      	cbz	r4, 8004042 <time+0x2a>
 800403e:	e9c4 0100 	strd	r0, r1, [r4]
 8004042:	b004      	add	sp, #16
 8004044:	bd10      	pop	{r4, pc}
 8004046:	bf00      	nop
 8004048:	200000ec 	.word	0x200000ec

0800404c <__assert_func>:
 800404c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800404e:	4614      	mov	r4, r2
 8004050:	461a      	mov	r2, r3
 8004052:	4b09      	ldr	r3, [pc, #36]	; (8004078 <__assert_func+0x2c>)
 8004054:	4605      	mov	r5, r0
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68d8      	ldr	r0, [r3, #12]
 800405a:	b14c      	cbz	r4, 8004070 <__assert_func+0x24>
 800405c:	4b07      	ldr	r3, [pc, #28]	; (800407c <__assert_func+0x30>)
 800405e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004062:	9100      	str	r1, [sp, #0]
 8004064:	462b      	mov	r3, r5
 8004066:	4906      	ldr	r1, [pc, #24]	; (8004080 <__assert_func+0x34>)
 8004068:	f000 f80e 	bl	8004088 <fiprintf>
 800406c:	f000 fdf8 	bl	8004c60 <abort>
 8004070:	4b04      	ldr	r3, [pc, #16]	; (8004084 <__assert_func+0x38>)
 8004072:	461c      	mov	r4, r3
 8004074:	e7f3      	b.n	800405e <__assert_func+0x12>
 8004076:	bf00      	nop
 8004078:	200000ec 	.word	0x200000ec
 800407c:	0800546e 	.word	0x0800546e
 8004080:	0800547b 	.word	0x0800547b
 8004084:	080054a9 	.word	0x080054a9

08004088 <fiprintf>:
 8004088:	b40e      	push	{r1, r2, r3}
 800408a:	b503      	push	{r0, r1, lr}
 800408c:	4601      	mov	r1, r0
 800408e:	ab03      	add	r3, sp, #12
 8004090:	4805      	ldr	r0, [pc, #20]	; (80040a8 <fiprintf+0x20>)
 8004092:	f853 2b04 	ldr.w	r2, [r3], #4
 8004096:	6800      	ldr	r0, [r0, #0]
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	f000 fa4b 	bl	8004534 <_vfiprintf_r>
 800409e:	b002      	add	sp, #8
 80040a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80040a4:	b003      	add	sp, #12
 80040a6:	4770      	bx	lr
 80040a8:	200000ec 	.word	0x200000ec

080040ac <_gettimeofday_r>:
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	2300      	movs	r3, #0
 80040b0:	4d06      	ldr	r5, [pc, #24]	; (80040cc <_gettimeofday_r+0x20>)
 80040b2:	4604      	mov	r4, r0
 80040b4:	4608      	mov	r0, r1
 80040b6:	4611      	mov	r1, r2
 80040b8:	602b      	str	r3, [r5, #0]
 80040ba:	f001 f949 	bl	8005350 <_gettimeofday>
 80040be:	1c43      	adds	r3, r0, #1
 80040c0:	d102      	bne.n	80040c8 <_gettimeofday_r+0x1c>
 80040c2:	682b      	ldr	r3, [r5, #0]
 80040c4:	b103      	cbz	r3, 80040c8 <_gettimeofday_r+0x1c>
 80040c6:	6023      	str	r3, [r4, #0]
 80040c8:	bd38      	pop	{r3, r4, r5, pc}
 80040ca:	bf00      	nop
 80040cc:	20001620 	.word	0x20001620

080040d0 <malloc>:
 80040d0:	4b02      	ldr	r3, [pc, #8]	; (80040dc <malloc+0xc>)
 80040d2:	4601      	mov	r1, r0
 80040d4:	6818      	ldr	r0, [r3, #0]
 80040d6:	f000 b84f 	b.w	8004178 <_malloc_r>
 80040da:	bf00      	nop
 80040dc:	200000ec 	.word	0x200000ec

080040e0 <_free_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	4605      	mov	r5, r0
 80040e4:	2900      	cmp	r1, #0
 80040e6:	d043      	beq.n	8004170 <_free_r+0x90>
 80040e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ec:	1f0c      	subs	r4, r1, #4
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bfb8      	it	lt
 80040f2:	18e4      	addlt	r4, r4, r3
 80040f4:	f001 f802 	bl	80050fc <__malloc_lock>
 80040f8:	4a1e      	ldr	r2, [pc, #120]	; (8004174 <_free_r+0x94>)
 80040fa:	6813      	ldr	r3, [r2, #0]
 80040fc:	4610      	mov	r0, r2
 80040fe:	b933      	cbnz	r3, 800410e <_free_r+0x2e>
 8004100:	6063      	str	r3, [r4, #4]
 8004102:	6014      	str	r4, [r2, #0]
 8004104:	4628      	mov	r0, r5
 8004106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800410a:	f000 bffd 	b.w	8005108 <__malloc_unlock>
 800410e:	42a3      	cmp	r3, r4
 8004110:	d90a      	bls.n	8004128 <_free_r+0x48>
 8004112:	6821      	ldr	r1, [r4, #0]
 8004114:	1862      	adds	r2, r4, r1
 8004116:	4293      	cmp	r3, r2
 8004118:	bf01      	itttt	eq
 800411a:	681a      	ldreq	r2, [r3, #0]
 800411c:	685b      	ldreq	r3, [r3, #4]
 800411e:	1852      	addeq	r2, r2, r1
 8004120:	6022      	streq	r2, [r4, #0]
 8004122:	6063      	str	r3, [r4, #4]
 8004124:	6004      	str	r4, [r0, #0]
 8004126:	e7ed      	b.n	8004104 <_free_r+0x24>
 8004128:	461a      	mov	r2, r3
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	b10b      	cbz	r3, 8004132 <_free_r+0x52>
 800412e:	42a3      	cmp	r3, r4
 8004130:	d9fa      	bls.n	8004128 <_free_r+0x48>
 8004132:	6811      	ldr	r1, [r2, #0]
 8004134:	1850      	adds	r0, r2, r1
 8004136:	42a0      	cmp	r0, r4
 8004138:	d10b      	bne.n	8004152 <_free_r+0x72>
 800413a:	6820      	ldr	r0, [r4, #0]
 800413c:	4401      	add	r1, r0
 800413e:	1850      	adds	r0, r2, r1
 8004140:	4283      	cmp	r3, r0
 8004142:	6011      	str	r1, [r2, #0]
 8004144:	d1de      	bne.n	8004104 <_free_r+0x24>
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	4401      	add	r1, r0
 800414c:	6011      	str	r1, [r2, #0]
 800414e:	6053      	str	r3, [r2, #4]
 8004150:	e7d8      	b.n	8004104 <_free_r+0x24>
 8004152:	d902      	bls.n	800415a <_free_r+0x7a>
 8004154:	230c      	movs	r3, #12
 8004156:	602b      	str	r3, [r5, #0]
 8004158:	e7d4      	b.n	8004104 <_free_r+0x24>
 800415a:	6820      	ldr	r0, [r4, #0]
 800415c:	1821      	adds	r1, r4, r0
 800415e:	428b      	cmp	r3, r1
 8004160:	bf01      	itttt	eq
 8004162:	6819      	ldreq	r1, [r3, #0]
 8004164:	685b      	ldreq	r3, [r3, #4]
 8004166:	1809      	addeq	r1, r1, r0
 8004168:	6021      	streq	r1, [r4, #0]
 800416a:	6063      	str	r3, [r4, #4]
 800416c:	6054      	str	r4, [r2, #4]
 800416e:	e7c9      	b.n	8004104 <_free_r+0x24>
 8004170:	bd38      	pop	{r3, r4, r5, pc}
 8004172:	bf00      	nop
 8004174:	20001114 	.word	0x20001114

08004178 <_malloc_r>:
 8004178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800417a:	1ccd      	adds	r5, r1, #3
 800417c:	f025 0503 	bic.w	r5, r5, #3
 8004180:	3508      	adds	r5, #8
 8004182:	2d0c      	cmp	r5, #12
 8004184:	bf38      	it	cc
 8004186:	250c      	movcc	r5, #12
 8004188:	2d00      	cmp	r5, #0
 800418a:	4606      	mov	r6, r0
 800418c:	db01      	blt.n	8004192 <_malloc_r+0x1a>
 800418e:	42a9      	cmp	r1, r5
 8004190:	d903      	bls.n	800419a <_malloc_r+0x22>
 8004192:	230c      	movs	r3, #12
 8004194:	6033      	str	r3, [r6, #0]
 8004196:	2000      	movs	r0, #0
 8004198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800419a:	f000 ffaf 	bl	80050fc <__malloc_lock>
 800419e:	4921      	ldr	r1, [pc, #132]	; (8004224 <_malloc_r+0xac>)
 80041a0:	680a      	ldr	r2, [r1, #0]
 80041a2:	4614      	mov	r4, r2
 80041a4:	b99c      	cbnz	r4, 80041ce <_malloc_r+0x56>
 80041a6:	4f20      	ldr	r7, [pc, #128]	; (8004228 <_malloc_r+0xb0>)
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	b923      	cbnz	r3, 80041b6 <_malloc_r+0x3e>
 80041ac:	4621      	mov	r1, r4
 80041ae:	4630      	mov	r0, r6
 80041b0:	f000 fc86 	bl	8004ac0 <_sbrk_r>
 80041b4:	6038      	str	r0, [r7, #0]
 80041b6:	4629      	mov	r1, r5
 80041b8:	4630      	mov	r0, r6
 80041ba:	f000 fc81 	bl	8004ac0 <_sbrk_r>
 80041be:	1c43      	adds	r3, r0, #1
 80041c0:	d123      	bne.n	800420a <_malloc_r+0x92>
 80041c2:	230c      	movs	r3, #12
 80041c4:	4630      	mov	r0, r6
 80041c6:	6033      	str	r3, [r6, #0]
 80041c8:	f000 ff9e 	bl	8005108 <__malloc_unlock>
 80041cc:	e7e3      	b.n	8004196 <_malloc_r+0x1e>
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	1b5b      	subs	r3, r3, r5
 80041d2:	d417      	bmi.n	8004204 <_malloc_r+0x8c>
 80041d4:	2b0b      	cmp	r3, #11
 80041d6:	d903      	bls.n	80041e0 <_malloc_r+0x68>
 80041d8:	6023      	str	r3, [r4, #0]
 80041da:	441c      	add	r4, r3
 80041dc:	6025      	str	r5, [r4, #0]
 80041de:	e004      	b.n	80041ea <_malloc_r+0x72>
 80041e0:	6863      	ldr	r3, [r4, #4]
 80041e2:	42a2      	cmp	r2, r4
 80041e4:	bf0c      	ite	eq
 80041e6:	600b      	streq	r3, [r1, #0]
 80041e8:	6053      	strne	r3, [r2, #4]
 80041ea:	4630      	mov	r0, r6
 80041ec:	f000 ff8c 	bl	8005108 <__malloc_unlock>
 80041f0:	f104 000b 	add.w	r0, r4, #11
 80041f4:	1d23      	adds	r3, r4, #4
 80041f6:	f020 0007 	bic.w	r0, r0, #7
 80041fa:	1ac2      	subs	r2, r0, r3
 80041fc:	d0cc      	beq.n	8004198 <_malloc_r+0x20>
 80041fe:	1a1b      	subs	r3, r3, r0
 8004200:	50a3      	str	r3, [r4, r2]
 8004202:	e7c9      	b.n	8004198 <_malloc_r+0x20>
 8004204:	4622      	mov	r2, r4
 8004206:	6864      	ldr	r4, [r4, #4]
 8004208:	e7cc      	b.n	80041a4 <_malloc_r+0x2c>
 800420a:	1cc4      	adds	r4, r0, #3
 800420c:	f024 0403 	bic.w	r4, r4, #3
 8004210:	42a0      	cmp	r0, r4
 8004212:	d0e3      	beq.n	80041dc <_malloc_r+0x64>
 8004214:	1a21      	subs	r1, r4, r0
 8004216:	4630      	mov	r0, r6
 8004218:	f000 fc52 	bl	8004ac0 <_sbrk_r>
 800421c:	3001      	adds	r0, #1
 800421e:	d1dd      	bne.n	80041dc <_malloc_r+0x64>
 8004220:	e7cf      	b.n	80041c2 <_malloc_r+0x4a>
 8004222:	bf00      	nop
 8004224:	20001114 	.word	0x20001114
 8004228:	20001118 	.word	0x20001118

0800422c <__ssputs_r>:
 800422c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004230:	688e      	ldr	r6, [r1, #8]
 8004232:	4682      	mov	sl, r0
 8004234:	429e      	cmp	r6, r3
 8004236:	460c      	mov	r4, r1
 8004238:	4690      	mov	r8, r2
 800423a:	461f      	mov	r7, r3
 800423c:	d838      	bhi.n	80042b0 <__ssputs_r+0x84>
 800423e:	898a      	ldrh	r2, [r1, #12]
 8004240:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004244:	d032      	beq.n	80042ac <__ssputs_r+0x80>
 8004246:	6825      	ldr	r5, [r4, #0]
 8004248:	6909      	ldr	r1, [r1, #16]
 800424a:	3301      	adds	r3, #1
 800424c:	eba5 0901 	sub.w	r9, r5, r1
 8004250:	6965      	ldr	r5, [r4, #20]
 8004252:	444b      	add	r3, r9
 8004254:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004258:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800425c:	106d      	asrs	r5, r5, #1
 800425e:	429d      	cmp	r5, r3
 8004260:	bf38      	it	cc
 8004262:	461d      	movcc	r5, r3
 8004264:	0553      	lsls	r3, r2, #21
 8004266:	d531      	bpl.n	80042cc <__ssputs_r+0xa0>
 8004268:	4629      	mov	r1, r5
 800426a:	f7ff ff85 	bl	8004178 <_malloc_r>
 800426e:	4606      	mov	r6, r0
 8004270:	b950      	cbnz	r0, 8004288 <__ssputs_r+0x5c>
 8004272:	230c      	movs	r3, #12
 8004274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004278:	f8ca 3000 	str.w	r3, [sl]
 800427c:	89a3      	ldrh	r3, [r4, #12]
 800427e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004282:	81a3      	strh	r3, [r4, #12]
 8004284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004288:	464a      	mov	r2, r9
 800428a:	6921      	ldr	r1, [r4, #16]
 800428c:	f7ff fdf2 	bl	8003e74 <memcpy>
 8004290:	89a3      	ldrh	r3, [r4, #12]
 8004292:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800429a:	81a3      	strh	r3, [r4, #12]
 800429c:	6126      	str	r6, [r4, #16]
 800429e:	444e      	add	r6, r9
 80042a0:	6026      	str	r6, [r4, #0]
 80042a2:	463e      	mov	r6, r7
 80042a4:	6165      	str	r5, [r4, #20]
 80042a6:	eba5 0509 	sub.w	r5, r5, r9
 80042aa:	60a5      	str	r5, [r4, #8]
 80042ac:	42be      	cmp	r6, r7
 80042ae:	d900      	bls.n	80042b2 <__ssputs_r+0x86>
 80042b0:	463e      	mov	r6, r7
 80042b2:	4632      	mov	r2, r6
 80042b4:	4641      	mov	r1, r8
 80042b6:	6820      	ldr	r0, [r4, #0]
 80042b8:	f000 ff06 	bl	80050c8 <memmove>
 80042bc:	68a3      	ldr	r3, [r4, #8]
 80042be:	6822      	ldr	r2, [r4, #0]
 80042c0:	1b9b      	subs	r3, r3, r6
 80042c2:	4432      	add	r2, r6
 80042c4:	2000      	movs	r0, #0
 80042c6:	60a3      	str	r3, [r4, #8]
 80042c8:	6022      	str	r2, [r4, #0]
 80042ca:	e7db      	b.n	8004284 <__ssputs_r+0x58>
 80042cc:	462a      	mov	r2, r5
 80042ce:	f000 ff21 	bl	8005114 <_realloc_r>
 80042d2:	4606      	mov	r6, r0
 80042d4:	2800      	cmp	r0, #0
 80042d6:	d1e1      	bne.n	800429c <__ssputs_r+0x70>
 80042d8:	4650      	mov	r0, sl
 80042da:	6921      	ldr	r1, [r4, #16]
 80042dc:	f7ff ff00 	bl	80040e0 <_free_r>
 80042e0:	e7c7      	b.n	8004272 <__ssputs_r+0x46>
	...

080042e4 <_svfiprintf_r>:
 80042e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042e8:	4698      	mov	r8, r3
 80042ea:	898b      	ldrh	r3, [r1, #12]
 80042ec:	4607      	mov	r7, r0
 80042ee:	061b      	lsls	r3, r3, #24
 80042f0:	460d      	mov	r5, r1
 80042f2:	4614      	mov	r4, r2
 80042f4:	b09d      	sub	sp, #116	; 0x74
 80042f6:	d50e      	bpl.n	8004316 <_svfiprintf_r+0x32>
 80042f8:	690b      	ldr	r3, [r1, #16]
 80042fa:	b963      	cbnz	r3, 8004316 <_svfiprintf_r+0x32>
 80042fc:	2140      	movs	r1, #64	; 0x40
 80042fe:	f7ff ff3b 	bl	8004178 <_malloc_r>
 8004302:	6028      	str	r0, [r5, #0]
 8004304:	6128      	str	r0, [r5, #16]
 8004306:	b920      	cbnz	r0, 8004312 <_svfiprintf_r+0x2e>
 8004308:	230c      	movs	r3, #12
 800430a:	603b      	str	r3, [r7, #0]
 800430c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004310:	e0d1      	b.n	80044b6 <_svfiprintf_r+0x1d2>
 8004312:	2340      	movs	r3, #64	; 0x40
 8004314:	616b      	str	r3, [r5, #20]
 8004316:	2300      	movs	r3, #0
 8004318:	9309      	str	r3, [sp, #36]	; 0x24
 800431a:	2320      	movs	r3, #32
 800431c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004320:	2330      	movs	r3, #48	; 0x30
 8004322:	f04f 0901 	mov.w	r9, #1
 8004326:	f8cd 800c 	str.w	r8, [sp, #12]
 800432a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80044d0 <_svfiprintf_r+0x1ec>
 800432e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004332:	4623      	mov	r3, r4
 8004334:	469a      	mov	sl, r3
 8004336:	f813 2b01 	ldrb.w	r2, [r3], #1
 800433a:	b10a      	cbz	r2, 8004340 <_svfiprintf_r+0x5c>
 800433c:	2a25      	cmp	r2, #37	; 0x25
 800433e:	d1f9      	bne.n	8004334 <_svfiprintf_r+0x50>
 8004340:	ebba 0b04 	subs.w	fp, sl, r4
 8004344:	d00b      	beq.n	800435e <_svfiprintf_r+0x7a>
 8004346:	465b      	mov	r3, fp
 8004348:	4622      	mov	r2, r4
 800434a:	4629      	mov	r1, r5
 800434c:	4638      	mov	r0, r7
 800434e:	f7ff ff6d 	bl	800422c <__ssputs_r>
 8004352:	3001      	adds	r0, #1
 8004354:	f000 80aa 	beq.w	80044ac <_svfiprintf_r+0x1c8>
 8004358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800435a:	445a      	add	r2, fp
 800435c:	9209      	str	r2, [sp, #36]	; 0x24
 800435e:	f89a 3000 	ldrb.w	r3, [sl]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 80a2 	beq.w	80044ac <_svfiprintf_r+0x1c8>
 8004368:	2300      	movs	r3, #0
 800436a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800436e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004372:	f10a 0a01 	add.w	sl, sl, #1
 8004376:	9304      	str	r3, [sp, #16]
 8004378:	9307      	str	r3, [sp, #28]
 800437a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800437e:	931a      	str	r3, [sp, #104]	; 0x68
 8004380:	4654      	mov	r4, sl
 8004382:	2205      	movs	r2, #5
 8004384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004388:	4851      	ldr	r0, [pc, #324]	; (80044d0 <_svfiprintf_r+0x1ec>)
 800438a:	f000 fe8f 	bl	80050ac <memchr>
 800438e:	9a04      	ldr	r2, [sp, #16]
 8004390:	b9d8      	cbnz	r0, 80043ca <_svfiprintf_r+0xe6>
 8004392:	06d0      	lsls	r0, r2, #27
 8004394:	bf44      	itt	mi
 8004396:	2320      	movmi	r3, #32
 8004398:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800439c:	0711      	lsls	r1, r2, #28
 800439e:	bf44      	itt	mi
 80043a0:	232b      	movmi	r3, #43	; 0x2b
 80043a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80043a6:	f89a 3000 	ldrb.w	r3, [sl]
 80043aa:	2b2a      	cmp	r3, #42	; 0x2a
 80043ac:	d015      	beq.n	80043da <_svfiprintf_r+0xf6>
 80043ae:	4654      	mov	r4, sl
 80043b0:	2000      	movs	r0, #0
 80043b2:	f04f 0c0a 	mov.w	ip, #10
 80043b6:	9a07      	ldr	r2, [sp, #28]
 80043b8:	4621      	mov	r1, r4
 80043ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043be:	3b30      	subs	r3, #48	; 0x30
 80043c0:	2b09      	cmp	r3, #9
 80043c2:	d94e      	bls.n	8004462 <_svfiprintf_r+0x17e>
 80043c4:	b1b0      	cbz	r0, 80043f4 <_svfiprintf_r+0x110>
 80043c6:	9207      	str	r2, [sp, #28]
 80043c8:	e014      	b.n	80043f4 <_svfiprintf_r+0x110>
 80043ca:	eba0 0308 	sub.w	r3, r0, r8
 80043ce:	fa09 f303 	lsl.w	r3, r9, r3
 80043d2:	4313      	orrs	r3, r2
 80043d4:	46a2      	mov	sl, r4
 80043d6:	9304      	str	r3, [sp, #16]
 80043d8:	e7d2      	b.n	8004380 <_svfiprintf_r+0x9c>
 80043da:	9b03      	ldr	r3, [sp, #12]
 80043dc:	1d19      	adds	r1, r3, #4
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	9103      	str	r1, [sp, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	bfbb      	ittet	lt
 80043e6:	425b      	neglt	r3, r3
 80043e8:	f042 0202 	orrlt.w	r2, r2, #2
 80043ec:	9307      	strge	r3, [sp, #28]
 80043ee:	9307      	strlt	r3, [sp, #28]
 80043f0:	bfb8      	it	lt
 80043f2:	9204      	strlt	r2, [sp, #16]
 80043f4:	7823      	ldrb	r3, [r4, #0]
 80043f6:	2b2e      	cmp	r3, #46	; 0x2e
 80043f8:	d10c      	bne.n	8004414 <_svfiprintf_r+0x130>
 80043fa:	7863      	ldrb	r3, [r4, #1]
 80043fc:	2b2a      	cmp	r3, #42	; 0x2a
 80043fe:	d135      	bne.n	800446c <_svfiprintf_r+0x188>
 8004400:	9b03      	ldr	r3, [sp, #12]
 8004402:	3402      	adds	r4, #2
 8004404:	1d1a      	adds	r2, r3, #4
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	9203      	str	r2, [sp, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	bfb8      	it	lt
 800440e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004412:	9305      	str	r3, [sp, #20]
 8004414:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80044e0 <_svfiprintf_r+0x1fc>
 8004418:	2203      	movs	r2, #3
 800441a:	4650      	mov	r0, sl
 800441c:	7821      	ldrb	r1, [r4, #0]
 800441e:	f000 fe45 	bl	80050ac <memchr>
 8004422:	b140      	cbz	r0, 8004436 <_svfiprintf_r+0x152>
 8004424:	2340      	movs	r3, #64	; 0x40
 8004426:	eba0 000a 	sub.w	r0, r0, sl
 800442a:	fa03 f000 	lsl.w	r0, r3, r0
 800442e:	9b04      	ldr	r3, [sp, #16]
 8004430:	3401      	adds	r4, #1
 8004432:	4303      	orrs	r3, r0
 8004434:	9304      	str	r3, [sp, #16]
 8004436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800443a:	2206      	movs	r2, #6
 800443c:	4825      	ldr	r0, [pc, #148]	; (80044d4 <_svfiprintf_r+0x1f0>)
 800443e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004442:	f000 fe33 	bl	80050ac <memchr>
 8004446:	2800      	cmp	r0, #0
 8004448:	d038      	beq.n	80044bc <_svfiprintf_r+0x1d8>
 800444a:	4b23      	ldr	r3, [pc, #140]	; (80044d8 <_svfiprintf_r+0x1f4>)
 800444c:	bb1b      	cbnz	r3, 8004496 <_svfiprintf_r+0x1b2>
 800444e:	9b03      	ldr	r3, [sp, #12]
 8004450:	3307      	adds	r3, #7
 8004452:	f023 0307 	bic.w	r3, r3, #7
 8004456:	3308      	adds	r3, #8
 8004458:	9303      	str	r3, [sp, #12]
 800445a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800445c:	4433      	add	r3, r6
 800445e:	9309      	str	r3, [sp, #36]	; 0x24
 8004460:	e767      	b.n	8004332 <_svfiprintf_r+0x4e>
 8004462:	460c      	mov	r4, r1
 8004464:	2001      	movs	r0, #1
 8004466:	fb0c 3202 	mla	r2, ip, r2, r3
 800446a:	e7a5      	b.n	80043b8 <_svfiprintf_r+0xd4>
 800446c:	2300      	movs	r3, #0
 800446e:	f04f 0c0a 	mov.w	ip, #10
 8004472:	4619      	mov	r1, r3
 8004474:	3401      	adds	r4, #1
 8004476:	9305      	str	r3, [sp, #20]
 8004478:	4620      	mov	r0, r4
 800447a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800447e:	3a30      	subs	r2, #48	; 0x30
 8004480:	2a09      	cmp	r2, #9
 8004482:	d903      	bls.n	800448c <_svfiprintf_r+0x1a8>
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0c5      	beq.n	8004414 <_svfiprintf_r+0x130>
 8004488:	9105      	str	r1, [sp, #20]
 800448a:	e7c3      	b.n	8004414 <_svfiprintf_r+0x130>
 800448c:	4604      	mov	r4, r0
 800448e:	2301      	movs	r3, #1
 8004490:	fb0c 2101 	mla	r1, ip, r1, r2
 8004494:	e7f0      	b.n	8004478 <_svfiprintf_r+0x194>
 8004496:	ab03      	add	r3, sp, #12
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	462a      	mov	r2, r5
 800449c:	4638      	mov	r0, r7
 800449e:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <_svfiprintf_r+0x1f8>)
 80044a0:	a904      	add	r1, sp, #16
 80044a2:	f3af 8000 	nop.w
 80044a6:	1c42      	adds	r2, r0, #1
 80044a8:	4606      	mov	r6, r0
 80044aa:	d1d6      	bne.n	800445a <_svfiprintf_r+0x176>
 80044ac:	89ab      	ldrh	r3, [r5, #12]
 80044ae:	065b      	lsls	r3, r3, #25
 80044b0:	f53f af2c 	bmi.w	800430c <_svfiprintf_r+0x28>
 80044b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044b6:	b01d      	add	sp, #116	; 0x74
 80044b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044bc:	ab03      	add	r3, sp, #12
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	462a      	mov	r2, r5
 80044c2:	4638      	mov	r0, r7
 80044c4:	4b05      	ldr	r3, [pc, #20]	; (80044dc <_svfiprintf_r+0x1f8>)
 80044c6:	a904      	add	r1, sp, #16
 80044c8:	f000 f9d4 	bl	8004874 <_printf_i>
 80044cc:	e7eb      	b.n	80044a6 <_svfiprintf_r+0x1c2>
 80044ce:	bf00      	nop
 80044d0:	080054aa 	.word	0x080054aa
 80044d4:	080054b4 	.word	0x080054b4
 80044d8:	00000000 	.word	0x00000000
 80044dc:	0800422d 	.word	0x0800422d
 80044e0:	080054b0 	.word	0x080054b0

080044e4 <__sfputc_r>:
 80044e4:	6893      	ldr	r3, [r2, #8]
 80044e6:	b410      	push	{r4}
 80044e8:	3b01      	subs	r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	6093      	str	r3, [r2, #8]
 80044ee:	da07      	bge.n	8004500 <__sfputc_r+0x1c>
 80044f0:	6994      	ldr	r4, [r2, #24]
 80044f2:	42a3      	cmp	r3, r4
 80044f4:	db01      	blt.n	80044fa <__sfputc_r+0x16>
 80044f6:	290a      	cmp	r1, #10
 80044f8:	d102      	bne.n	8004500 <__sfputc_r+0x1c>
 80044fa:	bc10      	pop	{r4}
 80044fc:	f000 baf0 	b.w	8004ae0 <__swbuf_r>
 8004500:	6813      	ldr	r3, [r2, #0]
 8004502:	1c58      	adds	r0, r3, #1
 8004504:	6010      	str	r0, [r2, #0]
 8004506:	7019      	strb	r1, [r3, #0]
 8004508:	4608      	mov	r0, r1
 800450a:	bc10      	pop	{r4}
 800450c:	4770      	bx	lr

0800450e <__sfputs_r>:
 800450e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004510:	4606      	mov	r6, r0
 8004512:	460f      	mov	r7, r1
 8004514:	4614      	mov	r4, r2
 8004516:	18d5      	adds	r5, r2, r3
 8004518:	42ac      	cmp	r4, r5
 800451a:	d101      	bne.n	8004520 <__sfputs_r+0x12>
 800451c:	2000      	movs	r0, #0
 800451e:	e007      	b.n	8004530 <__sfputs_r+0x22>
 8004520:	463a      	mov	r2, r7
 8004522:	4630      	mov	r0, r6
 8004524:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004528:	f7ff ffdc 	bl	80044e4 <__sfputc_r>
 800452c:	1c43      	adds	r3, r0, #1
 800452e:	d1f3      	bne.n	8004518 <__sfputs_r+0xa>
 8004530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004534 <_vfiprintf_r>:
 8004534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004538:	460d      	mov	r5, r1
 800453a:	4614      	mov	r4, r2
 800453c:	4698      	mov	r8, r3
 800453e:	4606      	mov	r6, r0
 8004540:	b09d      	sub	sp, #116	; 0x74
 8004542:	b118      	cbz	r0, 800454c <_vfiprintf_r+0x18>
 8004544:	6983      	ldr	r3, [r0, #24]
 8004546:	b90b      	cbnz	r3, 800454c <_vfiprintf_r+0x18>
 8004548:	f000 fcac 	bl	8004ea4 <__sinit>
 800454c:	4b89      	ldr	r3, [pc, #548]	; (8004774 <_vfiprintf_r+0x240>)
 800454e:	429d      	cmp	r5, r3
 8004550:	d11b      	bne.n	800458a <_vfiprintf_r+0x56>
 8004552:	6875      	ldr	r5, [r6, #4]
 8004554:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004556:	07d9      	lsls	r1, r3, #31
 8004558:	d405      	bmi.n	8004566 <_vfiprintf_r+0x32>
 800455a:	89ab      	ldrh	r3, [r5, #12]
 800455c:	059a      	lsls	r2, r3, #22
 800455e:	d402      	bmi.n	8004566 <_vfiprintf_r+0x32>
 8004560:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004562:	f000 fd3d 	bl	8004fe0 <__retarget_lock_acquire_recursive>
 8004566:	89ab      	ldrh	r3, [r5, #12]
 8004568:	071b      	lsls	r3, r3, #28
 800456a:	d501      	bpl.n	8004570 <_vfiprintf_r+0x3c>
 800456c:	692b      	ldr	r3, [r5, #16]
 800456e:	b9eb      	cbnz	r3, 80045ac <_vfiprintf_r+0x78>
 8004570:	4629      	mov	r1, r5
 8004572:	4630      	mov	r0, r6
 8004574:	f000 fb06 	bl	8004b84 <__swsetup_r>
 8004578:	b1c0      	cbz	r0, 80045ac <_vfiprintf_r+0x78>
 800457a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800457c:	07dc      	lsls	r4, r3, #31
 800457e:	d50e      	bpl.n	800459e <_vfiprintf_r+0x6a>
 8004580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004584:	b01d      	add	sp, #116	; 0x74
 8004586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800458a:	4b7b      	ldr	r3, [pc, #492]	; (8004778 <_vfiprintf_r+0x244>)
 800458c:	429d      	cmp	r5, r3
 800458e:	d101      	bne.n	8004594 <_vfiprintf_r+0x60>
 8004590:	68b5      	ldr	r5, [r6, #8]
 8004592:	e7df      	b.n	8004554 <_vfiprintf_r+0x20>
 8004594:	4b79      	ldr	r3, [pc, #484]	; (800477c <_vfiprintf_r+0x248>)
 8004596:	429d      	cmp	r5, r3
 8004598:	bf08      	it	eq
 800459a:	68f5      	ldreq	r5, [r6, #12]
 800459c:	e7da      	b.n	8004554 <_vfiprintf_r+0x20>
 800459e:	89ab      	ldrh	r3, [r5, #12]
 80045a0:	0598      	lsls	r0, r3, #22
 80045a2:	d4ed      	bmi.n	8004580 <_vfiprintf_r+0x4c>
 80045a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045a6:	f000 fd1c 	bl	8004fe2 <__retarget_lock_release_recursive>
 80045aa:	e7e9      	b.n	8004580 <_vfiprintf_r+0x4c>
 80045ac:	2300      	movs	r3, #0
 80045ae:	9309      	str	r3, [sp, #36]	; 0x24
 80045b0:	2320      	movs	r3, #32
 80045b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045b6:	2330      	movs	r3, #48	; 0x30
 80045b8:	f04f 0901 	mov.w	r9, #1
 80045bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80045c0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004780 <_vfiprintf_r+0x24c>
 80045c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045c8:	4623      	mov	r3, r4
 80045ca:	469a      	mov	sl, r3
 80045cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045d0:	b10a      	cbz	r2, 80045d6 <_vfiprintf_r+0xa2>
 80045d2:	2a25      	cmp	r2, #37	; 0x25
 80045d4:	d1f9      	bne.n	80045ca <_vfiprintf_r+0x96>
 80045d6:	ebba 0b04 	subs.w	fp, sl, r4
 80045da:	d00b      	beq.n	80045f4 <_vfiprintf_r+0xc0>
 80045dc:	465b      	mov	r3, fp
 80045de:	4622      	mov	r2, r4
 80045e0:	4629      	mov	r1, r5
 80045e2:	4630      	mov	r0, r6
 80045e4:	f7ff ff93 	bl	800450e <__sfputs_r>
 80045e8:	3001      	adds	r0, #1
 80045ea:	f000 80aa 	beq.w	8004742 <_vfiprintf_r+0x20e>
 80045ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045f0:	445a      	add	r2, fp
 80045f2:	9209      	str	r2, [sp, #36]	; 0x24
 80045f4:	f89a 3000 	ldrb.w	r3, [sl]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80a2 	beq.w	8004742 <_vfiprintf_r+0x20e>
 80045fe:	2300      	movs	r3, #0
 8004600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004608:	f10a 0a01 	add.w	sl, sl, #1
 800460c:	9304      	str	r3, [sp, #16]
 800460e:	9307      	str	r3, [sp, #28]
 8004610:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004614:	931a      	str	r3, [sp, #104]	; 0x68
 8004616:	4654      	mov	r4, sl
 8004618:	2205      	movs	r2, #5
 800461a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800461e:	4858      	ldr	r0, [pc, #352]	; (8004780 <_vfiprintf_r+0x24c>)
 8004620:	f000 fd44 	bl	80050ac <memchr>
 8004624:	9a04      	ldr	r2, [sp, #16]
 8004626:	b9d8      	cbnz	r0, 8004660 <_vfiprintf_r+0x12c>
 8004628:	06d1      	lsls	r1, r2, #27
 800462a:	bf44      	itt	mi
 800462c:	2320      	movmi	r3, #32
 800462e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004632:	0713      	lsls	r3, r2, #28
 8004634:	bf44      	itt	mi
 8004636:	232b      	movmi	r3, #43	; 0x2b
 8004638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800463c:	f89a 3000 	ldrb.w	r3, [sl]
 8004640:	2b2a      	cmp	r3, #42	; 0x2a
 8004642:	d015      	beq.n	8004670 <_vfiprintf_r+0x13c>
 8004644:	4654      	mov	r4, sl
 8004646:	2000      	movs	r0, #0
 8004648:	f04f 0c0a 	mov.w	ip, #10
 800464c:	9a07      	ldr	r2, [sp, #28]
 800464e:	4621      	mov	r1, r4
 8004650:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004654:	3b30      	subs	r3, #48	; 0x30
 8004656:	2b09      	cmp	r3, #9
 8004658:	d94e      	bls.n	80046f8 <_vfiprintf_r+0x1c4>
 800465a:	b1b0      	cbz	r0, 800468a <_vfiprintf_r+0x156>
 800465c:	9207      	str	r2, [sp, #28]
 800465e:	e014      	b.n	800468a <_vfiprintf_r+0x156>
 8004660:	eba0 0308 	sub.w	r3, r0, r8
 8004664:	fa09 f303 	lsl.w	r3, r9, r3
 8004668:	4313      	orrs	r3, r2
 800466a:	46a2      	mov	sl, r4
 800466c:	9304      	str	r3, [sp, #16]
 800466e:	e7d2      	b.n	8004616 <_vfiprintf_r+0xe2>
 8004670:	9b03      	ldr	r3, [sp, #12]
 8004672:	1d19      	adds	r1, r3, #4
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	9103      	str	r1, [sp, #12]
 8004678:	2b00      	cmp	r3, #0
 800467a:	bfbb      	ittet	lt
 800467c:	425b      	neglt	r3, r3
 800467e:	f042 0202 	orrlt.w	r2, r2, #2
 8004682:	9307      	strge	r3, [sp, #28]
 8004684:	9307      	strlt	r3, [sp, #28]
 8004686:	bfb8      	it	lt
 8004688:	9204      	strlt	r2, [sp, #16]
 800468a:	7823      	ldrb	r3, [r4, #0]
 800468c:	2b2e      	cmp	r3, #46	; 0x2e
 800468e:	d10c      	bne.n	80046aa <_vfiprintf_r+0x176>
 8004690:	7863      	ldrb	r3, [r4, #1]
 8004692:	2b2a      	cmp	r3, #42	; 0x2a
 8004694:	d135      	bne.n	8004702 <_vfiprintf_r+0x1ce>
 8004696:	9b03      	ldr	r3, [sp, #12]
 8004698:	3402      	adds	r4, #2
 800469a:	1d1a      	adds	r2, r3, #4
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	9203      	str	r2, [sp, #12]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bfb8      	it	lt
 80046a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80046a8:	9305      	str	r3, [sp, #20]
 80046aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004790 <_vfiprintf_r+0x25c>
 80046ae:	2203      	movs	r2, #3
 80046b0:	4650      	mov	r0, sl
 80046b2:	7821      	ldrb	r1, [r4, #0]
 80046b4:	f000 fcfa 	bl	80050ac <memchr>
 80046b8:	b140      	cbz	r0, 80046cc <_vfiprintf_r+0x198>
 80046ba:	2340      	movs	r3, #64	; 0x40
 80046bc:	eba0 000a 	sub.w	r0, r0, sl
 80046c0:	fa03 f000 	lsl.w	r0, r3, r0
 80046c4:	9b04      	ldr	r3, [sp, #16]
 80046c6:	3401      	adds	r4, #1
 80046c8:	4303      	orrs	r3, r0
 80046ca:	9304      	str	r3, [sp, #16]
 80046cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046d0:	2206      	movs	r2, #6
 80046d2:	482c      	ldr	r0, [pc, #176]	; (8004784 <_vfiprintf_r+0x250>)
 80046d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046d8:	f000 fce8 	bl	80050ac <memchr>
 80046dc:	2800      	cmp	r0, #0
 80046de:	d03f      	beq.n	8004760 <_vfiprintf_r+0x22c>
 80046e0:	4b29      	ldr	r3, [pc, #164]	; (8004788 <_vfiprintf_r+0x254>)
 80046e2:	bb1b      	cbnz	r3, 800472c <_vfiprintf_r+0x1f8>
 80046e4:	9b03      	ldr	r3, [sp, #12]
 80046e6:	3307      	adds	r3, #7
 80046e8:	f023 0307 	bic.w	r3, r3, #7
 80046ec:	3308      	adds	r3, #8
 80046ee:	9303      	str	r3, [sp, #12]
 80046f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046f2:	443b      	add	r3, r7
 80046f4:	9309      	str	r3, [sp, #36]	; 0x24
 80046f6:	e767      	b.n	80045c8 <_vfiprintf_r+0x94>
 80046f8:	460c      	mov	r4, r1
 80046fa:	2001      	movs	r0, #1
 80046fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004700:	e7a5      	b.n	800464e <_vfiprintf_r+0x11a>
 8004702:	2300      	movs	r3, #0
 8004704:	f04f 0c0a 	mov.w	ip, #10
 8004708:	4619      	mov	r1, r3
 800470a:	3401      	adds	r4, #1
 800470c:	9305      	str	r3, [sp, #20]
 800470e:	4620      	mov	r0, r4
 8004710:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004714:	3a30      	subs	r2, #48	; 0x30
 8004716:	2a09      	cmp	r2, #9
 8004718:	d903      	bls.n	8004722 <_vfiprintf_r+0x1ee>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0c5      	beq.n	80046aa <_vfiprintf_r+0x176>
 800471e:	9105      	str	r1, [sp, #20]
 8004720:	e7c3      	b.n	80046aa <_vfiprintf_r+0x176>
 8004722:	4604      	mov	r4, r0
 8004724:	2301      	movs	r3, #1
 8004726:	fb0c 2101 	mla	r1, ip, r1, r2
 800472a:	e7f0      	b.n	800470e <_vfiprintf_r+0x1da>
 800472c:	ab03      	add	r3, sp, #12
 800472e:	9300      	str	r3, [sp, #0]
 8004730:	462a      	mov	r2, r5
 8004732:	4630      	mov	r0, r6
 8004734:	4b15      	ldr	r3, [pc, #84]	; (800478c <_vfiprintf_r+0x258>)
 8004736:	a904      	add	r1, sp, #16
 8004738:	f3af 8000 	nop.w
 800473c:	4607      	mov	r7, r0
 800473e:	1c78      	adds	r0, r7, #1
 8004740:	d1d6      	bne.n	80046f0 <_vfiprintf_r+0x1bc>
 8004742:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004744:	07d9      	lsls	r1, r3, #31
 8004746:	d405      	bmi.n	8004754 <_vfiprintf_r+0x220>
 8004748:	89ab      	ldrh	r3, [r5, #12]
 800474a:	059a      	lsls	r2, r3, #22
 800474c:	d402      	bmi.n	8004754 <_vfiprintf_r+0x220>
 800474e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004750:	f000 fc47 	bl	8004fe2 <__retarget_lock_release_recursive>
 8004754:	89ab      	ldrh	r3, [r5, #12]
 8004756:	065b      	lsls	r3, r3, #25
 8004758:	f53f af12 	bmi.w	8004580 <_vfiprintf_r+0x4c>
 800475c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800475e:	e711      	b.n	8004584 <_vfiprintf_r+0x50>
 8004760:	ab03      	add	r3, sp, #12
 8004762:	9300      	str	r3, [sp, #0]
 8004764:	462a      	mov	r2, r5
 8004766:	4630      	mov	r0, r6
 8004768:	4b08      	ldr	r3, [pc, #32]	; (800478c <_vfiprintf_r+0x258>)
 800476a:	a904      	add	r1, sp, #16
 800476c:	f000 f882 	bl	8004874 <_printf_i>
 8004770:	e7e4      	b.n	800473c <_vfiprintf_r+0x208>
 8004772:	bf00      	nop
 8004774:	08005500 	.word	0x08005500
 8004778:	08005520 	.word	0x08005520
 800477c:	080054e0 	.word	0x080054e0
 8004780:	080054aa 	.word	0x080054aa
 8004784:	080054b4 	.word	0x080054b4
 8004788:	00000000 	.word	0x00000000
 800478c:	0800450f 	.word	0x0800450f
 8004790:	080054b0 	.word	0x080054b0

08004794 <_printf_common>:
 8004794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004798:	4616      	mov	r6, r2
 800479a:	4699      	mov	r9, r3
 800479c:	688a      	ldr	r2, [r1, #8]
 800479e:	690b      	ldr	r3, [r1, #16]
 80047a0:	4607      	mov	r7, r0
 80047a2:	4293      	cmp	r3, r2
 80047a4:	bfb8      	it	lt
 80047a6:	4613      	movlt	r3, r2
 80047a8:	6033      	str	r3, [r6, #0]
 80047aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047ae:	460c      	mov	r4, r1
 80047b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047b4:	b10a      	cbz	r2, 80047ba <_printf_common+0x26>
 80047b6:	3301      	adds	r3, #1
 80047b8:	6033      	str	r3, [r6, #0]
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	0699      	lsls	r1, r3, #26
 80047be:	bf42      	ittt	mi
 80047c0:	6833      	ldrmi	r3, [r6, #0]
 80047c2:	3302      	addmi	r3, #2
 80047c4:	6033      	strmi	r3, [r6, #0]
 80047c6:	6825      	ldr	r5, [r4, #0]
 80047c8:	f015 0506 	ands.w	r5, r5, #6
 80047cc:	d106      	bne.n	80047dc <_printf_common+0x48>
 80047ce:	f104 0a19 	add.w	sl, r4, #25
 80047d2:	68e3      	ldr	r3, [r4, #12]
 80047d4:	6832      	ldr	r2, [r6, #0]
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	42ab      	cmp	r3, r5
 80047da:	dc28      	bgt.n	800482e <_printf_common+0x9a>
 80047dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047e0:	1e13      	subs	r3, r2, #0
 80047e2:	6822      	ldr	r2, [r4, #0]
 80047e4:	bf18      	it	ne
 80047e6:	2301      	movne	r3, #1
 80047e8:	0692      	lsls	r2, r2, #26
 80047ea:	d42d      	bmi.n	8004848 <_printf_common+0xb4>
 80047ec:	4649      	mov	r1, r9
 80047ee:	4638      	mov	r0, r7
 80047f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047f4:	47c0      	blx	r8
 80047f6:	3001      	adds	r0, #1
 80047f8:	d020      	beq.n	800483c <_printf_common+0xa8>
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	68e5      	ldr	r5, [r4, #12]
 80047fe:	f003 0306 	and.w	r3, r3, #6
 8004802:	2b04      	cmp	r3, #4
 8004804:	bf18      	it	ne
 8004806:	2500      	movne	r5, #0
 8004808:	6832      	ldr	r2, [r6, #0]
 800480a:	f04f 0600 	mov.w	r6, #0
 800480e:	68a3      	ldr	r3, [r4, #8]
 8004810:	bf08      	it	eq
 8004812:	1aad      	subeq	r5, r5, r2
 8004814:	6922      	ldr	r2, [r4, #16]
 8004816:	bf08      	it	eq
 8004818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800481c:	4293      	cmp	r3, r2
 800481e:	bfc4      	itt	gt
 8004820:	1a9b      	subgt	r3, r3, r2
 8004822:	18ed      	addgt	r5, r5, r3
 8004824:	341a      	adds	r4, #26
 8004826:	42b5      	cmp	r5, r6
 8004828:	d11a      	bne.n	8004860 <_printf_common+0xcc>
 800482a:	2000      	movs	r0, #0
 800482c:	e008      	b.n	8004840 <_printf_common+0xac>
 800482e:	2301      	movs	r3, #1
 8004830:	4652      	mov	r2, sl
 8004832:	4649      	mov	r1, r9
 8004834:	4638      	mov	r0, r7
 8004836:	47c0      	blx	r8
 8004838:	3001      	adds	r0, #1
 800483a:	d103      	bne.n	8004844 <_printf_common+0xb0>
 800483c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004844:	3501      	adds	r5, #1
 8004846:	e7c4      	b.n	80047d2 <_printf_common+0x3e>
 8004848:	2030      	movs	r0, #48	; 0x30
 800484a:	18e1      	adds	r1, r4, r3
 800484c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004856:	4422      	add	r2, r4
 8004858:	3302      	adds	r3, #2
 800485a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800485e:	e7c5      	b.n	80047ec <_printf_common+0x58>
 8004860:	2301      	movs	r3, #1
 8004862:	4622      	mov	r2, r4
 8004864:	4649      	mov	r1, r9
 8004866:	4638      	mov	r0, r7
 8004868:	47c0      	blx	r8
 800486a:	3001      	adds	r0, #1
 800486c:	d0e6      	beq.n	800483c <_printf_common+0xa8>
 800486e:	3601      	adds	r6, #1
 8004870:	e7d9      	b.n	8004826 <_printf_common+0x92>
	...

08004874 <_printf_i>:
 8004874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004878:	460c      	mov	r4, r1
 800487a:	7e27      	ldrb	r7, [r4, #24]
 800487c:	4691      	mov	r9, r2
 800487e:	2f78      	cmp	r7, #120	; 0x78
 8004880:	4680      	mov	r8, r0
 8004882:	469a      	mov	sl, r3
 8004884:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004886:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800488a:	d807      	bhi.n	800489c <_printf_i+0x28>
 800488c:	2f62      	cmp	r7, #98	; 0x62
 800488e:	d80a      	bhi.n	80048a6 <_printf_i+0x32>
 8004890:	2f00      	cmp	r7, #0
 8004892:	f000 80d9 	beq.w	8004a48 <_printf_i+0x1d4>
 8004896:	2f58      	cmp	r7, #88	; 0x58
 8004898:	f000 80a4 	beq.w	80049e4 <_printf_i+0x170>
 800489c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048a4:	e03a      	b.n	800491c <_printf_i+0xa8>
 80048a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048aa:	2b15      	cmp	r3, #21
 80048ac:	d8f6      	bhi.n	800489c <_printf_i+0x28>
 80048ae:	a001      	add	r0, pc, #4	; (adr r0, 80048b4 <_printf_i+0x40>)
 80048b0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80048b4:	0800490d 	.word	0x0800490d
 80048b8:	08004921 	.word	0x08004921
 80048bc:	0800489d 	.word	0x0800489d
 80048c0:	0800489d 	.word	0x0800489d
 80048c4:	0800489d 	.word	0x0800489d
 80048c8:	0800489d 	.word	0x0800489d
 80048cc:	08004921 	.word	0x08004921
 80048d0:	0800489d 	.word	0x0800489d
 80048d4:	0800489d 	.word	0x0800489d
 80048d8:	0800489d 	.word	0x0800489d
 80048dc:	0800489d 	.word	0x0800489d
 80048e0:	08004a2f 	.word	0x08004a2f
 80048e4:	08004951 	.word	0x08004951
 80048e8:	08004a11 	.word	0x08004a11
 80048ec:	0800489d 	.word	0x0800489d
 80048f0:	0800489d 	.word	0x0800489d
 80048f4:	08004a51 	.word	0x08004a51
 80048f8:	0800489d 	.word	0x0800489d
 80048fc:	08004951 	.word	0x08004951
 8004900:	0800489d 	.word	0x0800489d
 8004904:	0800489d 	.word	0x0800489d
 8004908:	08004a19 	.word	0x08004a19
 800490c:	680b      	ldr	r3, [r1, #0]
 800490e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004912:	1d1a      	adds	r2, r3, #4
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	600a      	str	r2, [r1, #0]
 8004918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800491c:	2301      	movs	r3, #1
 800491e:	e0a4      	b.n	8004a6a <_printf_i+0x1f6>
 8004920:	6825      	ldr	r5, [r4, #0]
 8004922:	6808      	ldr	r0, [r1, #0]
 8004924:	062e      	lsls	r6, r5, #24
 8004926:	f100 0304 	add.w	r3, r0, #4
 800492a:	d50a      	bpl.n	8004942 <_printf_i+0xce>
 800492c:	6805      	ldr	r5, [r0, #0]
 800492e:	600b      	str	r3, [r1, #0]
 8004930:	2d00      	cmp	r5, #0
 8004932:	da03      	bge.n	800493c <_printf_i+0xc8>
 8004934:	232d      	movs	r3, #45	; 0x2d
 8004936:	426d      	negs	r5, r5
 8004938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800493c:	230a      	movs	r3, #10
 800493e:	485e      	ldr	r0, [pc, #376]	; (8004ab8 <_printf_i+0x244>)
 8004940:	e019      	b.n	8004976 <_printf_i+0x102>
 8004942:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004946:	6805      	ldr	r5, [r0, #0]
 8004948:	600b      	str	r3, [r1, #0]
 800494a:	bf18      	it	ne
 800494c:	b22d      	sxthne	r5, r5
 800494e:	e7ef      	b.n	8004930 <_printf_i+0xbc>
 8004950:	680b      	ldr	r3, [r1, #0]
 8004952:	6825      	ldr	r5, [r4, #0]
 8004954:	1d18      	adds	r0, r3, #4
 8004956:	6008      	str	r0, [r1, #0]
 8004958:	0628      	lsls	r0, r5, #24
 800495a:	d501      	bpl.n	8004960 <_printf_i+0xec>
 800495c:	681d      	ldr	r5, [r3, #0]
 800495e:	e002      	b.n	8004966 <_printf_i+0xf2>
 8004960:	0669      	lsls	r1, r5, #25
 8004962:	d5fb      	bpl.n	800495c <_printf_i+0xe8>
 8004964:	881d      	ldrh	r5, [r3, #0]
 8004966:	2f6f      	cmp	r7, #111	; 0x6f
 8004968:	bf0c      	ite	eq
 800496a:	2308      	moveq	r3, #8
 800496c:	230a      	movne	r3, #10
 800496e:	4852      	ldr	r0, [pc, #328]	; (8004ab8 <_printf_i+0x244>)
 8004970:	2100      	movs	r1, #0
 8004972:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004976:	6866      	ldr	r6, [r4, #4]
 8004978:	2e00      	cmp	r6, #0
 800497a:	bfa8      	it	ge
 800497c:	6821      	ldrge	r1, [r4, #0]
 800497e:	60a6      	str	r6, [r4, #8]
 8004980:	bfa4      	itt	ge
 8004982:	f021 0104 	bicge.w	r1, r1, #4
 8004986:	6021      	strge	r1, [r4, #0]
 8004988:	b90d      	cbnz	r5, 800498e <_printf_i+0x11a>
 800498a:	2e00      	cmp	r6, #0
 800498c:	d04d      	beq.n	8004a2a <_printf_i+0x1b6>
 800498e:	4616      	mov	r6, r2
 8004990:	fbb5 f1f3 	udiv	r1, r5, r3
 8004994:	fb03 5711 	mls	r7, r3, r1, r5
 8004998:	5dc7      	ldrb	r7, [r0, r7]
 800499a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800499e:	462f      	mov	r7, r5
 80049a0:	42bb      	cmp	r3, r7
 80049a2:	460d      	mov	r5, r1
 80049a4:	d9f4      	bls.n	8004990 <_printf_i+0x11c>
 80049a6:	2b08      	cmp	r3, #8
 80049a8:	d10b      	bne.n	80049c2 <_printf_i+0x14e>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	07df      	lsls	r7, r3, #31
 80049ae:	d508      	bpl.n	80049c2 <_printf_i+0x14e>
 80049b0:	6923      	ldr	r3, [r4, #16]
 80049b2:	6861      	ldr	r1, [r4, #4]
 80049b4:	4299      	cmp	r1, r3
 80049b6:	bfde      	ittt	le
 80049b8:	2330      	movle	r3, #48	; 0x30
 80049ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049be:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80049c2:	1b92      	subs	r2, r2, r6
 80049c4:	6122      	str	r2, [r4, #16]
 80049c6:	464b      	mov	r3, r9
 80049c8:	4621      	mov	r1, r4
 80049ca:	4640      	mov	r0, r8
 80049cc:	f8cd a000 	str.w	sl, [sp]
 80049d0:	aa03      	add	r2, sp, #12
 80049d2:	f7ff fedf 	bl	8004794 <_printf_common>
 80049d6:	3001      	adds	r0, #1
 80049d8:	d14c      	bne.n	8004a74 <_printf_i+0x200>
 80049da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049de:	b004      	add	sp, #16
 80049e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049e4:	4834      	ldr	r0, [pc, #208]	; (8004ab8 <_printf_i+0x244>)
 80049e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049ea:	680e      	ldr	r6, [r1, #0]
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	f856 5b04 	ldr.w	r5, [r6], #4
 80049f2:	061f      	lsls	r7, r3, #24
 80049f4:	600e      	str	r6, [r1, #0]
 80049f6:	d514      	bpl.n	8004a22 <_printf_i+0x1ae>
 80049f8:	07d9      	lsls	r1, r3, #31
 80049fa:	bf44      	itt	mi
 80049fc:	f043 0320 	orrmi.w	r3, r3, #32
 8004a00:	6023      	strmi	r3, [r4, #0]
 8004a02:	b91d      	cbnz	r5, 8004a0c <_printf_i+0x198>
 8004a04:	6823      	ldr	r3, [r4, #0]
 8004a06:	f023 0320 	bic.w	r3, r3, #32
 8004a0a:	6023      	str	r3, [r4, #0]
 8004a0c:	2310      	movs	r3, #16
 8004a0e:	e7af      	b.n	8004970 <_printf_i+0xfc>
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	f043 0320 	orr.w	r3, r3, #32
 8004a16:	6023      	str	r3, [r4, #0]
 8004a18:	2378      	movs	r3, #120	; 0x78
 8004a1a:	4828      	ldr	r0, [pc, #160]	; (8004abc <_printf_i+0x248>)
 8004a1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a20:	e7e3      	b.n	80049ea <_printf_i+0x176>
 8004a22:	065e      	lsls	r6, r3, #25
 8004a24:	bf48      	it	mi
 8004a26:	b2ad      	uxthmi	r5, r5
 8004a28:	e7e6      	b.n	80049f8 <_printf_i+0x184>
 8004a2a:	4616      	mov	r6, r2
 8004a2c:	e7bb      	b.n	80049a6 <_printf_i+0x132>
 8004a2e:	680b      	ldr	r3, [r1, #0]
 8004a30:	6826      	ldr	r6, [r4, #0]
 8004a32:	1d1d      	adds	r5, r3, #4
 8004a34:	6960      	ldr	r0, [r4, #20]
 8004a36:	600d      	str	r5, [r1, #0]
 8004a38:	0635      	lsls	r5, r6, #24
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	d501      	bpl.n	8004a42 <_printf_i+0x1ce>
 8004a3e:	6018      	str	r0, [r3, #0]
 8004a40:	e002      	b.n	8004a48 <_printf_i+0x1d4>
 8004a42:	0671      	lsls	r1, r6, #25
 8004a44:	d5fb      	bpl.n	8004a3e <_printf_i+0x1ca>
 8004a46:	8018      	strh	r0, [r3, #0]
 8004a48:	2300      	movs	r3, #0
 8004a4a:	4616      	mov	r6, r2
 8004a4c:	6123      	str	r3, [r4, #16]
 8004a4e:	e7ba      	b.n	80049c6 <_printf_i+0x152>
 8004a50:	680b      	ldr	r3, [r1, #0]
 8004a52:	1d1a      	adds	r2, r3, #4
 8004a54:	600a      	str	r2, [r1, #0]
 8004a56:	681e      	ldr	r6, [r3, #0]
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	6862      	ldr	r2, [r4, #4]
 8004a5e:	f000 fb25 	bl	80050ac <memchr>
 8004a62:	b108      	cbz	r0, 8004a68 <_printf_i+0x1f4>
 8004a64:	1b80      	subs	r0, r0, r6
 8004a66:	6060      	str	r0, [r4, #4]
 8004a68:	6863      	ldr	r3, [r4, #4]
 8004a6a:	6123      	str	r3, [r4, #16]
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a72:	e7a8      	b.n	80049c6 <_printf_i+0x152>
 8004a74:	4632      	mov	r2, r6
 8004a76:	4649      	mov	r1, r9
 8004a78:	4640      	mov	r0, r8
 8004a7a:	6923      	ldr	r3, [r4, #16]
 8004a7c:	47d0      	blx	sl
 8004a7e:	3001      	adds	r0, #1
 8004a80:	d0ab      	beq.n	80049da <_printf_i+0x166>
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	079b      	lsls	r3, r3, #30
 8004a86:	d413      	bmi.n	8004ab0 <_printf_i+0x23c>
 8004a88:	68e0      	ldr	r0, [r4, #12]
 8004a8a:	9b03      	ldr	r3, [sp, #12]
 8004a8c:	4298      	cmp	r0, r3
 8004a8e:	bfb8      	it	lt
 8004a90:	4618      	movlt	r0, r3
 8004a92:	e7a4      	b.n	80049de <_printf_i+0x16a>
 8004a94:	2301      	movs	r3, #1
 8004a96:	4632      	mov	r2, r6
 8004a98:	4649      	mov	r1, r9
 8004a9a:	4640      	mov	r0, r8
 8004a9c:	47d0      	blx	sl
 8004a9e:	3001      	adds	r0, #1
 8004aa0:	d09b      	beq.n	80049da <_printf_i+0x166>
 8004aa2:	3501      	adds	r5, #1
 8004aa4:	68e3      	ldr	r3, [r4, #12]
 8004aa6:	9903      	ldr	r1, [sp, #12]
 8004aa8:	1a5b      	subs	r3, r3, r1
 8004aaa:	42ab      	cmp	r3, r5
 8004aac:	dcf2      	bgt.n	8004a94 <_printf_i+0x220>
 8004aae:	e7eb      	b.n	8004a88 <_printf_i+0x214>
 8004ab0:	2500      	movs	r5, #0
 8004ab2:	f104 0619 	add.w	r6, r4, #25
 8004ab6:	e7f5      	b.n	8004aa4 <_printf_i+0x230>
 8004ab8:	080054bb 	.word	0x080054bb
 8004abc:	080054cc 	.word	0x080054cc

08004ac0 <_sbrk_r>:
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	4d05      	ldr	r5, [pc, #20]	; (8004adc <_sbrk_r+0x1c>)
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	4608      	mov	r0, r1
 8004aca:	602b      	str	r3, [r5, #0]
 8004acc:	f7fc fbbe 	bl	800124c <_sbrk>
 8004ad0:	1c43      	adds	r3, r0, #1
 8004ad2:	d102      	bne.n	8004ada <_sbrk_r+0x1a>
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	b103      	cbz	r3, 8004ada <_sbrk_r+0x1a>
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	bd38      	pop	{r3, r4, r5, pc}
 8004adc:	20001620 	.word	0x20001620

08004ae0 <__swbuf_r>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	460e      	mov	r6, r1
 8004ae4:	4614      	mov	r4, r2
 8004ae6:	4605      	mov	r5, r0
 8004ae8:	b118      	cbz	r0, 8004af2 <__swbuf_r+0x12>
 8004aea:	6983      	ldr	r3, [r0, #24]
 8004aec:	b90b      	cbnz	r3, 8004af2 <__swbuf_r+0x12>
 8004aee:	f000 f9d9 	bl	8004ea4 <__sinit>
 8004af2:	4b21      	ldr	r3, [pc, #132]	; (8004b78 <__swbuf_r+0x98>)
 8004af4:	429c      	cmp	r4, r3
 8004af6:	d12b      	bne.n	8004b50 <__swbuf_r+0x70>
 8004af8:	686c      	ldr	r4, [r5, #4]
 8004afa:	69a3      	ldr	r3, [r4, #24]
 8004afc:	60a3      	str	r3, [r4, #8]
 8004afe:	89a3      	ldrh	r3, [r4, #12]
 8004b00:	071a      	lsls	r2, r3, #28
 8004b02:	d52f      	bpl.n	8004b64 <__swbuf_r+0x84>
 8004b04:	6923      	ldr	r3, [r4, #16]
 8004b06:	b36b      	cbz	r3, 8004b64 <__swbuf_r+0x84>
 8004b08:	6923      	ldr	r3, [r4, #16]
 8004b0a:	6820      	ldr	r0, [r4, #0]
 8004b0c:	b2f6      	uxtb	r6, r6
 8004b0e:	1ac0      	subs	r0, r0, r3
 8004b10:	6963      	ldr	r3, [r4, #20]
 8004b12:	4637      	mov	r7, r6
 8004b14:	4283      	cmp	r3, r0
 8004b16:	dc04      	bgt.n	8004b22 <__swbuf_r+0x42>
 8004b18:	4621      	mov	r1, r4
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	f000 f92e 	bl	8004d7c <_fflush_r>
 8004b20:	bb30      	cbnz	r0, 8004b70 <__swbuf_r+0x90>
 8004b22:	68a3      	ldr	r3, [r4, #8]
 8004b24:	3001      	adds	r0, #1
 8004b26:	3b01      	subs	r3, #1
 8004b28:	60a3      	str	r3, [r4, #8]
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	6022      	str	r2, [r4, #0]
 8004b30:	701e      	strb	r6, [r3, #0]
 8004b32:	6963      	ldr	r3, [r4, #20]
 8004b34:	4283      	cmp	r3, r0
 8004b36:	d004      	beq.n	8004b42 <__swbuf_r+0x62>
 8004b38:	89a3      	ldrh	r3, [r4, #12]
 8004b3a:	07db      	lsls	r3, r3, #31
 8004b3c:	d506      	bpl.n	8004b4c <__swbuf_r+0x6c>
 8004b3e:	2e0a      	cmp	r6, #10
 8004b40:	d104      	bne.n	8004b4c <__swbuf_r+0x6c>
 8004b42:	4621      	mov	r1, r4
 8004b44:	4628      	mov	r0, r5
 8004b46:	f000 f919 	bl	8004d7c <_fflush_r>
 8004b4a:	b988      	cbnz	r0, 8004b70 <__swbuf_r+0x90>
 8004b4c:	4638      	mov	r0, r7
 8004b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b50:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <__swbuf_r+0x9c>)
 8004b52:	429c      	cmp	r4, r3
 8004b54:	d101      	bne.n	8004b5a <__swbuf_r+0x7a>
 8004b56:	68ac      	ldr	r4, [r5, #8]
 8004b58:	e7cf      	b.n	8004afa <__swbuf_r+0x1a>
 8004b5a:	4b09      	ldr	r3, [pc, #36]	; (8004b80 <__swbuf_r+0xa0>)
 8004b5c:	429c      	cmp	r4, r3
 8004b5e:	bf08      	it	eq
 8004b60:	68ec      	ldreq	r4, [r5, #12]
 8004b62:	e7ca      	b.n	8004afa <__swbuf_r+0x1a>
 8004b64:	4621      	mov	r1, r4
 8004b66:	4628      	mov	r0, r5
 8004b68:	f000 f80c 	bl	8004b84 <__swsetup_r>
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	d0cb      	beq.n	8004b08 <__swbuf_r+0x28>
 8004b70:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004b74:	e7ea      	b.n	8004b4c <__swbuf_r+0x6c>
 8004b76:	bf00      	nop
 8004b78:	08005500 	.word	0x08005500
 8004b7c:	08005520 	.word	0x08005520
 8004b80:	080054e0 	.word	0x080054e0

08004b84 <__swsetup_r>:
 8004b84:	4b32      	ldr	r3, [pc, #200]	; (8004c50 <__swsetup_r+0xcc>)
 8004b86:	b570      	push	{r4, r5, r6, lr}
 8004b88:	681d      	ldr	r5, [r3, #0]
 8004b8a:	4606      	mov	r6, r0
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	b125      	cbz	r5, 8004b9a <__swsetup_r+0x16>
 8004b90:	69ab      	ldr	r3, [r5, #24]
 8004b92:	b913      	cbnz	r3, 8004b9a <__swsetup_r+0x16>
 8004b94:	4628      	mov	r0, r5
 8004b96:	f000 f985 	bl	8004ea4 <__sinit>
 8004b9a:	4b2e      	ldr	r3, [pc, #184]	; (8004c54 <__swsetup_r+0xd0>)
 8004b9c:	429c      	cmp	r4, r3
 8004b9e:	d10f      	bne.n	8004bc0 <__swsetup_r+0x3c>
 8004ba0:	686c      	ldr	r4, [r5, #4]
 8004ba2:	89a3      	ldrh	r3, [r4, #12]
 8004ba4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ba8:	0719      	lsls	r1, r3, #28
 8004baa:	d42c      	bmi.n	8004c06 <__swsetup_r+0x82>
 8004bac:	06dd      	lsls	r5, r3, #27
 8004bae:	d411      	bmi.n	8004bd4 <__swsetup_r+0x50>
 8004bb0:	2309      	movs	r3, #9
 8004bb2:	6033      	str	r3, [r6, #0]
 8004bb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bbc:	81a3      	strh	r3, [r4, #12]
 8004bbe:	e03e      	b.n	8004c3e <__swsetup_r+0xba>
 8004bc0:	4b25      	ldr	r3, [pc, #148]	; (8004c58 <__swsetup_r+0xd4>)
 8004bc2:	429c      	cmp	r4, r3
 8004bc4:	d101      	bne.n	8004bca <__swsetup_r+0x46>
 8004bc6:	68ac      	ldr	r4, [r5, #8]
 8004bc8:	e7eb      	b.n	8004ba2 <__swsetup_r+0x1e>
 8004bca:	4b24      	ldr	r3, [pc, #144]	; (8004c5c <__swsetup_r+0xd8>)
 8004bcc:	429c      	cmp	r4, r3
 8004bce:	bf08      	it	eq
 8004bd0:	68ec      	ldreq	r4, [r5, #12]
 8004bd2:	e7e6      	b.n	8004ba2 <__swsetup_r+0x1e>
 8004bd4:	0758      	lsls	r0, r3, #29
 8004bd6:	d512      	bpl.n	8004bfe <__swsetup_r+0x7a>
 8004bd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004bda:	b141      	cbz	r1, 8004bee <__swsetup_r+0x6a>
 8004bdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004be0:	4299      	cmp	r1, r3
 8004be2:	d002      	beq.n	8004bea <__swsetup_r+0x66>
 8004be4:	4630      	mov	r0, r6
 8004be6:	f7ff fa7b 	bl	80040e0 <_free_r>
 8004bea:	2300      	movs	r3, #0
 8004bec:	6363      	str	r3, [r4, #52]	; 0x34
 8004bee:	89a3      	ldrh	r3, [r4, #12]
 8004bf0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004bf4:	81a3      	strh	r3, [r4, #12]
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	6063      	str	r3, [r4, #4]
 8004bfa:	6923      	ldr	r3, [r4, #16]
 8004bfc:	6023      	str	r3, [r4, #0]
 8004bfe:	89a3      	ldrh	r3, [r4, #12]
 8004c00:	f043 0308 	orr.w	r3, r3, #8
 8004c04:	81a3      	strh	r3, [r4, #12]
 8004c06:	6923      	ldr	r3, [r4, #16]
 8004c08:	b94b      	cbnz	r3, 8004c1e <__swsetup_r+0x9a>
 8004c0a:	89a3      	ldrh	r3, [r4, #12]
 8004c0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c14:	d003      	beq.n	8004c1e <__swsetup_r+0x9a>
 8004c16:	4621      	mov	r1, r4
 8004c18:	4630      	mov	r0, r6
 8004c1a:	f000 fa07 	bl	800502c <__smakebuf_r>
 8004c1e:	89a0      	ldrh	r0, [r4, #12]
 8004c20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c24:	f010 0301 	ands.w	r3, r0, #1
 8004c28:	d00a      	beq.n	8004c40 <__swsetup_r+0xbc>
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60a3      	str	r3, [r4, #8]
 8004c2e:	6963      	ldr	r3, [r4, #20]
 8004c30:	425b      	negs	r3, r3
 8004c32:	61a3      	str	r3, [r4, #24]
 8004c34:	6923      	ldr	r3, [r4, #16]
 8004c36:	b943      	cbnz	r3, 8004c4a <__swsetup_r+0xc6>
 8004c38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c3c:	d1ba      	bne.n	8004bb4 <__swsetup_r+0x30>
 8004c3e:	bd70      	pop	{r4, r5, r6, pc}
 8004c40:	0781      	lsls	r1, r0, #30
 8004c42:	bf58      	it	pl
 8004c44:	6963      	ldrpl	r3, [r4, #20]
 8004c46:	60a3      	str	r3, [r4, #8]
 8004c48:	e7f4      	b.n	8004c34 <__swsetup_r+0xb0>
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	e7f7      	b.n	8004c3e <__swsetup_r+0xba>
 8004c4e:	bf00      	nop
 8004c50:	200000ec 	.word	0x200000ec
 8004c54:	08005500 	.word	0x08005500
 8004c58:	08005520 	.word	0x08005520
 8004c5c:	080054e0 	.word	0x080054e0

08004c60 <abort>:
 8004c60:	2006      	movs	r0, #6
 8004c62:	b508      	push	{r3, lr}
 8004c64:	f000 faa4 	bl	80051b0 <raise>
 8004c68:	2001      	movs	r0, #1
 8004c6a:	f7fc fa7c 	bl	8001166 <_exit>
	...

08004c70 <__sflush_r>:
 8004c70:	898a      	ldrh	r2, [r1, #12]
 8004c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c76:	4605      	mov	r5, r0
 8004c78:	0710      	lsls	r0, r2, #28
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	d458      	bmi.n	8004d30 <__sflush_r+0xc0>
 8004c7e:	684b      	ldr	r3, [r1, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	dc05      	bgt.n	8004c90 <__sflush_r+0x20>
 8004c84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	dc02      	bgt.n	8004c90 <__sflush_r+0x20>
 8004c8a:	2000      	movs	r0, #0
 8004c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c92:	2e00      	cmp	r6, #0
 8004c94:	d0f9      	beq.n	8004c8a <__sflush_r+0x1a>
 8004c96:	2300      	movs	r3, #0
 8004c98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c9c:	682f      	ldr	r7, [r5, #0]
 8004c9e:	602b      	str	r3, [r5, #0]
 8004ca0:	d032      	beq.n	8004d08 <__sflush_r+0x98>
 8004ca2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004ca4:	89a3      	ldrh	r3, [r4, #12]
 8004ca6:	075a      	lsls	r2, r3, #29
 8004ca8:	d505      	bpl.n	8004cb6 <__sflush_r+0x46>
 8004caa:	6863      	ldr	r3, [r4, #4]
 8004cac:	1ac0      	subs	r0, r0, r3
 8004cae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cb0:	b10b      	cbz	r3, 8004cb6 <__sflush_r+0x46>
 8004cb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cb4:	1ac0      	subs	r0, r0, r3
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	4602      	mov	r2, r0
 8004cba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	6a21      	ldr	r1, [r4, #32]
 8004cc0:	47b0      	blx	r6
 8004cc2:	1c43      	adds	r3, r0, #1
 8004cc4:	89a3      	ldrh	r3, [r4, #12]
 8004cc6:	d106      	bne.n	8004cd6 <__sflush_r+0x66>
 8004cc8:	6829      	ldr	r1, [r5, #0]
 8004cca:	291d      	cmp	r1, #29
 8004ccc:	d82c      	bhi.n	8004d28 <__sflush_r+0xb8>
 8004cce:	4a2a      	ldr	r2, [pc, #168]	; (8004d78 <__sflush_r+0x108>)
 8004cd0:	40ca      	lsrs	r2, r1
 8004cd2:	07d6      	lsls	r6, r2, #31
 8004cd4:	d528      	bpl.n	8004d28 <__sflush_r+0xb8>
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	6062      	str	r2, [r4, #4]
 8004cda:	6922      	ldr	r2, [r4, #16]
 8004cdc:	04d9      	lsls	r1, r3, #19
 8004cde:	6022      	str	r2, [r4, #0]
 8004ce0:	d504      	bpl.n	8004cec <__sflush_r+0x7c>
 8004ce2:	1c42      	adds	r2, r0, #1
 8004ce4:	d101      	bne.n	8004cea <__sflush_r+0x7a>
 8004ce6:	682b      	ldr	r3, [r5, #0]
 8004ce8:	b903      	cbnz	r3, 8004cec <__sflush_r+0x7c>
 8004cea:	6560      	str	r0, [r4, #84]	; 0x54
 8004cec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cee:	602f      	str	r7, [r5, #0]
 8004cf0:	2900      	cmp	r1, #0
 8004cf2:	d0ca      	beq.n	8004c8a <__sflush_r+0x1a>
 8004cf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cf8:	4299      	cmp	r1, r3
 8004cfa:	d002      	beq.n	8004d02 <__sflush_r+0x92>
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	f7ff f9ef 	bl	80040e0 <_free_r>
 8004d02:	2000      	movs	r0, #0
 8004d04:	6360      	str	r0, [r4, #52]	; 0x34
 8004d06:	e7c1      	b.n	8004c8c <__sflush_r+0x1c>
 8004d08:	6a21      	ldr	r1, [r4, #32]
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	47b0      	blx	r6
 8004d10:	1c41      	adds	r1, r0, #1
 8004d12:	d1c7      	bne.n	8004ca4 <__sflush_r+0x34>
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0c4      	beq.n	8004ca4 <__sflush_r+0x34>
 8004d1a:	2b1d      	cmp	r3, #29
 8004d1c:	d001      	beq.n	8004d22 <__sflush_r+0xb2>
 8004d1e:	2b16      	cmp	r3, #22
 8004d20:	d101      	bne.n	8004d26 <__sflush_r+0xb6>
 8004d22:	602f      	str	r7, [r5, #0]
 8004d24:	e7b1      	b.n	8004c8a <__sflush_r+0x1a>
 8004d26:	89a3      	ldrh	r3, [r4, #12]
 8004d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d2c:	81a3      	strh	r3, [r4, #12]
 8004d2e:	e7ad      	b.n	8004c8c <__sflush_r+0x1c>
 8004d30:	690f      	ldr	r7, [r1, #16]
 8004d32:	2f00      	cmp	r7, #0
 8004d34:	d0a9      	beq.n	8004c8a <__sflush_r+0x1a>
 8004d36:	0793      	lsls	r3, r2, #30
 8004d38:	bf18      	it	ne
 8004d3a:	2300      	movne	r3, #0
 8004d3c:	680e      	ldr	r6, [r1, #0]
 8004d3e:	bf08      	it	eq
 8004d40:	694b      	ldreq	r3, [r1, #20]
 8004d42:	eba6 0807 	sub.w	r8, r6, r7
 8004d46:	600f      	str	r7, [r1, #0]
 8004d48:	608b      	str	r3, [r1, #8]
 8004d4a:	f1b8 0f00 	cmp.w	r8, #0
 8004d4e:	dd9c      	ble.n	8004c8a <__sflush_r+0x1a>
 8004d50:	4643      	mov	r3, r8
 8004d52:	463a      	mov	r2, r7
 8004d54:	4628      	mov	r0, r5
 8004d56:	6a21      	ldr	r1, [r4, #32]
 8004d58:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004d5a:	47b0      	blx	r6
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	dc06      	bgt.n	8004d6e <__sflush_r+0xfe>
 8004d60:	89a3      	ldrh	r3, [r4, #12]
 8004d62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d6a:	81a3      	strh	r3, [r4, #12]
 8004d6c:	e78e      	b.n	8004c8c <__sflush_r+0x1c>
 8004d6e:	4407      	add	r7, r0
 8004d70:	eba8 0800 	sub.w	r8, r8, r0
 8004d74:	e7e9      	b.n	8004d4a <__sflush_r+0xda>
 8004d76:	bf00      	nop
 8004d78:	20400001 	.word	0x20400001

08004d7c <_fflush_r>:
 8004d7c:	b538      	push	{r3, r4, r5, lr}
 8004d7e:	690b      	ldr	r3, [r1, #16]
 8004d80:	4605      	mov	r5, r0
 8004d82:	460c      	mov	r4, r1
 8004d84:	b913      	cbnz	r3, 8004d8c <_fflush_r+0x10>
 8004d86:	2500      	movs	r5, #0
 8004d88:	4628      	mov	r0, r5
 8004d8a:	bd38      	pop	{r3, r4, r5, pc}
 8004d8c:	b118      	cbz	r0, 8004d96 <_fflush_r+0x1a>
 8004d8e:	6983      	ldr	r3, [r0, #24]
 8004d90:	b90b      	cbnz	r3, 8004d96 <_fflush_r+0x1a>
 8004d92:	f000 f887 	bl	8004ea4 <__sinit>
 8004d96:	4b14      	ldr	r3, [pc, #80]	; (8004de8 <_fflush_r+0x6c>)
 8004d98:	429c      	cmp	r4, r3
 8004d9a:	d11b      	bne.n	8004dd4 <_fflush_r+0x58>
 8004d9c:	686c      	ldr	r4, [r5, #4]
 8004d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0ef      	beq.n	8004d86 <_fflush_r+0xa>
 8004da6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004da8:	07d0      	lsls	r0, r2, #31
 8004daa:	d404      	bmi.n	8004db6 <_fflush_r+0x3a>
 8004dac:	0599      	lsls	r1, r3, #22
 8004dae:	d402      	bmi.n	8004db6 <_fflush_r+0x3a>
 8004db0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004db2:	f000 f915 	bl	8004fe0 <__retarget_lock_acquire_recursive>
 8004db6:	4628      	mov	r0, r5
 8004db8:	4621      	mov	r1, r4
 8004dba:	f7ff ff59 	bl	8004c70 <__sflush_r>
 8004dbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dc0:	4605      	mov	r5, r0
 8004dc2:	07da      	lsls	r2, r3, #31
 8004dc4:	d4e0      	bmi.n	8004d88 <_fflush_r+0xc>
 8004dc6:	89a3      	ldrh	r3, [r4, #12]
 8004dc8:	059b      	lsls	r3, r3, #22
 8004dca:	d4dd      	bmi.n	8004d88 <_fflush_r+0xc>
 8004dcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dce:	f000 f908 	bl	8004fe2 <__retarget_lock_release_recursive>
 8004dd2:	e7d9      	b.n	8004d88 <_fflush_r+0xc>
 8004dd4:	4b05      	ldr	r3, [pc, #20]	; (8004dec <_fflush_r+0x70>)
 8004dd6:	429c      	cmp	r4, r3
 8004dd8:	d101      	bne.n	8004dde <_fflush_r+0x62>
 8004dda:	68ac      	ldr	r4, [r5, #8]
 8004ddc:	e7df      	b.n	8004d9e <_fflush_r+0x22>
 8004dde:	4b04      	ldr	r3, [pc, #16]	; (8004df0 <_fflush_r+0x74>)
 8004de0:	429c      	cmp	r4, r3
 8004de2:	bf08      	it	eq
 8004de4:	68ec      	ldreq	r4, [r5, #12]
 8004de6:	e7da      	b.n	8004d9e <_fflush_r+0x22>
 8004de8:	08005500 	.word	0x08005500
 8004dec:	08005520 	.word	0x08005520
 8004df0:	080054e0 	.word	0x080054e0

08004df4 <std>:
 8004df4:	2300      	movs	r3, #0
 8004df6:	b510      	push	{r4, lr}
 8004df8:	4604      	mov	r4, r0
 8004dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8004dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e02:	6083      	str	r3, [r0, #8]
 8004e04:	8181      	strh	r1, [r0, #12]
 8004e06:	6643      	str	r3, [r0, #100]	; 0x64
 8004e08:	81c2      	strh	r2, [r0, #14]
 8004e0a:	6183      	str	r3, [r0, #24]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	2208      	movs	r2, #8
 8004e10:	305c      	adds	r0, #92	; 0x5c
 8004e12:	f7ff f83d 	bl	8003e90 <memset>
 8004e16:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <std+0x38>)
 8004e18:	6224      	str	r4, [r4, #32]
 8004e1a:	6263      	str	r3, [r4, #36]	; 0x24
 8004e1c:	4b04      	ldr	r3, [pc, #16]	; (8004e30 <std+0x3c>)
 8004e1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e20:	4b04      	ldr	r3, [pc, #16]	; (8004e34 <std+0x40>)
 8004e22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e24:	4b04      	ldr	r3, [pc, #16]	; (8004e38 <std+0x44>)
 8004e26:	6323      	str	r3, [r4, #48]	; 0x30
 8004e28:	bd10      	pop	{r4, pc}
 8004e2a:	bf00      	nop
 8004e2c:	080051e9 	.word	0x080051e9
 8004e30:	0800520b 	.word	0x0800520b
 8004e34:	08005243 	.word	0x08005243
 8004e38:	08005267 	.word	0x08005267

08004e3c <_cleanup_r>:
 8004e3c:	4901      	ldr	r1, [pc, #4]	; (8004e44 <_cleanup_r+0x8>)
 8004e3e:	f000 b8af 	b.w	8004fa0 <_fwalk_reent>
 8004e42:	bf00      	nop
 8004e44:	08004d7d 	.word	0x08004d7d

08004e48 <__sfmoreglue>:
 8004e48:	b570      	push	{r4, r5, r6, lr}
 8004e4a:	2568      	movs	r5, #104	; 0x68
 8004e4c:	1e4a      	subs	r2, r1, #1
 8004e4e:	4355      	muls	r5, r2
 8004e50:	460e      	mov	r6, r1
 8004e52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e56:	f7ff f98f 	bl	8004178 <_malloc_r>
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	b140      	cbz	r0, 8004e70 <__sfmoreglue+0x28>
 8004e5e:	2100      	movs	r1, #0
 8004e60:	e9c0 1600 	strd	r1, r6, [r0]
 8004e64:	300c      	adds	r0, #12
 8004e66:	60a0      	str	r0, [r4, #8]
 8004e68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e6c:	f7ff f810 	bl	8003e90 <memset>
 8004e70:	4620      	mov	r0, r4
 8004e72:	bd70      	pop	{r4, r5, r6, pc}

08004e74 <__sfp_lock_acquire>:
 8004e74:	4801      	ldr	r0, [pc, #4]	; (8004e7c <__sfp_lock_acquire+0x8>)
 8004e76:	f000 b8b3 	b.w	8004fe0 <__retarget_lock_acquire_recursive>
 8004e7a:	bf00      	nop
 8004e7c:	2000162c 	.word	0x2000162c

08004e80 <__sfp_lock_release>:
 8004e80:	4801      	ldr	r0, [pc, #4]	; (8004e88 <__sfp_lock_release+0x8>)
 8004e82:	f000 b8ae 	b.w	8004fe2 <__retarget_lock_release_recursive>
 8004e86:	bf00      	nop
 8004e88:	2000162c 	.word	0x2000162c

08004e8c <__sinit_lock_acquire>:
 8004e8c:	4801      	ldr	r0, [pc, #4]	; (8004e94 <__sinit_lock_acquire+0x8>)
 8004e8e:	f000 b8a7 	b.w	8004fe0 <__retarget_lock_acquire_recursive>
 8004e92:	bf00      	nop
 8004e94:	20001627 	.word	0x20001627

08004e98 <__sinit_lock_release>:
 8004e98:	4801      	ldr	r0, [pc, #4]	; (8004ea0 <__sinit_lock_release+0x8>)
 8004e9a:	f000 b8a2 	b.w	8004fe2 <__retarget_lock_release_recursive>
 8004e9e:	bf00      	nop
 8004ea0:	20001627 	.word	0x20001627

08004ea4 <__sinit>:
 8004ea4:	b510      	push	{r4, lr}
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	f7ff fff0 	bl	8004e8c <__sinit_lock_acquire>
 8004eac:	69a3      	ldr	r3, [r4, #24]
 8004eae:	b11b      	cbz	r3, 8004eb8 <__sinit+0x14>
 8004eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eb4:	f7ff bff0 	b.w	8004e98 <__sinit_lock_release>
 8004eb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ebc:	6523      	str	r3, [r4, #80]	; 0x50
 8004ebe:	4b13      	ldr	r3, [pc, #76]	; (8004f0c <__sinit+0x68>)
 8004ec0:	4a13      	ldr	r2, [pc, #76]	; (8004f10 <__sinit+0x6c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004ec6:	42a3      	cmp	r3, r4
 8004ec8:	bf08      	it	eq
 8004eca:	2301      	moveq	r3, #1
 8004ecc:	4620      	mov	r0, r4
 8004ece:	bf08      	it	eq
 8004ed0:	61a3      	streq	r3, [r4, #24]
 8004ed2:	f000 f81f 	bl	8004f14 <__sfp>
 8004ed6:	6060      	str	r0, [r4, #4]
 8004ed8:	4620      	mov	r0, r4
 8004eda:	f000 f81b 	bl	8004f14 <__sfp>
 8004ede:	60a0      	str	r0, [r4, #8]
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f000 f817 	bl	8004f14 <__sfp>
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	2104      	movs	r1, #4
 8004eea:	60e0      	str	r0, [r4, #12]
 8004eec:	6860      	ldr	r0, [r4, #4]
 8004eee:	f7ff ff81 	bl	8004df4 <std>
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	2109      	movs	r1, #9
 8004ef6:	68a0      	ldr	r0, [r4, #8]
 8004ef8:	f7ff ff7c 	bl	8004df4 <std>
 8004efc:	2202      	movs	r2, #2
 8004efe:	2112      	movs	r1, #18
 8004f00:	68e0      	ldr	r0, [r4, #12]
 8004f02:	f7ff ff77 	bl	8004df4 <std>
 8004f06:	2301      	movs	r3, #1
 8004f08:	61a3      	str	r3, [r4, #24]
 8004f0a:	e7d1      	b.n	8004eb0 <__sinit+0xc>
 8004f0c:	080053f4 	.word	0x080053f4
 8004f10:	08004e3d 	.word	0x08004e3d

08004f14 <__sfp>:
 8004f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f16:	4607      	mov	r7, r0
 8004f18:	f7ff ffac 	bl	8004e74 <__sfp_lock_acquire>
 8004f1c:	4b1e      	ldr	r3, [pc, #120]	; (8004f98 <__sfp+0x84>)
 8004f1e:	681e      	ldr	r6, [r3, #0]
 8004f20:	69b3      	ldr	r3, [r6, #24]
 8004f22:	b913      	cbnz	r3, 8004f2a <__sfp+0x16>
 8004f24:	4630      	mov	r0, r6
 8004f26:	f7ff ffbd 	bl	8004ea4 <__sinit>
 8004f2a:	3648      	adds	r6, #72	; 0x48
 8004f2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f30:	3b01      	subs	r3, #1
 8004f32:	d503      	bpl.n	8004f3c <__sfp+0x28>
 8004f34:	6833      	ldr	r3, [r6, #0]
 8004f36:	b30b      	cbz	r3, 8004f7c <__sfp+0x68>
 8004f38:	6836      	ldr	r6, [r6, #0]
 8004f3a:	e7f7      	b.n	8004f2c <__sfp+0x18>
 8004f3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f40:	b9d5      	cbnz	r5, 8004f78 <__sfp+0x64>
 8004f42:	4b16      	ldr	r3, [pc, #88]	; (8004f9c <__sfp+0x88>)
 8004f44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f48:	60e3      	str	r3, [r4, #12]
 8004f4a:	6665      	str	r5, [r4, #100]	; 0x64
 8004f4c:	f000 f847 	bl	8004fde <__retarget_lock_init_recursive>
 8004f50:	f7ff ff96 	bl	8004e80 <__sfp_lock_release>
 8004f54:	2208      	movs	r2, #8
 8004f56:	4629      	mov	r1, r5
 8004f58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004f5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004f60:	6025      	str	r5, [r4, #0]
 8004f62:	61a5      	str	r5, [r4, #24]
 8004f64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f68:	f7fe ff92 	bl	8003e90 <memset>
 8004f6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f74:	4620      	mov	r0, r4
 8004f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f78:	3468      	adds	r4, #104	; 0x68
 8004f7a:	e7d9      	b.n	8004f30 <__sfp+0x1c>
 8004f7c:	2104      	movs	r1, #4
 8004f7e:	4638      	mov	r0, r7
 8004f80:	f7ff ff62 	bl	8004e48 <__sfmoreglue>
 8004f84:	4604      	mov	r4, r0
 8004f86:	6030      	str	r0, [r6, #0]
 8004f88:	2800      	cmp	r0, #0
 8004f8a:	d1d5      	bne.n	8004f38 <__sfp+0x24>
 8004f8c:	f7ff ff78 	bl	8004e80 <__sfp_lock_release>
 8004f90:	230c      	movs	r3, #12
 8004f92:	603b      	str	r3, [r7, #0]
 8004f94:	e7ee      	b.n	8004f74 <__sfp+0x60>
 8004f96:	bf00      	nop
 8004f98:	080053f4 	.word	0x080053f4
 8004f9c:	ffff0001 	.word	0xffff0001

08004fa0 <_fwalk_reent>:
 8004fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fa4:	4606      	mov	r6, r0
 8004fa6:	4688      	mov	r8, r1
 8004fa8:	2700      	movs	r7, #0
 8004faa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fb2:	f1b9 0901 	subs.w	r9, r9, #1
 8004fb6:	d505      	bpl.n	8004fc4 <_fwalk_reent+0x24>
 8004fb8:	6824      	ldr	r4, [r4, #0]
 8004fba:	2c00      	cmp	r4, #0
 8004fbc:	d1f7      	bne.n	8004fae <_fwalk_reent+0xe>
 8004fbe:	4638      	mov	r0, r7
 8004fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fc4:	89ab      	ldrh	r3, [r5, #12]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d907      	bls.n	8004fda <_fwalk_reent+0x3a>
 8004fca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	d003      	beq.n	8004fda <_fwalk_reent+0x3a>
 8004fd2:	4629      	mov	r1, r5
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	47c0      	blx	r8
 8004fd8:	4307      	orrs	r7, r0
 8004fda:	3568      	adds	r5, #104	; 0x68
 8004fdc:	e7e9      	b.n	8004fb2 <_fwalk_reent+0x12>

08004fde <__retarget_lock_init_recursive>:
 8004fde:	4770      	bx	lr

08004fe0 <__retarget_lock_acquire_recursive>:
 8004fe0:	4770      	bx	lr

08004fe2 <__retarget_lock_release_recursive>:
 8004fe2:	4770      	bx	lr

08004fe4 <__swhatbuf_r>:
 8004fe4:	b570      	push	{r4, r5, r6, lr}
 8004fe6:	460e      	mov	r6, r1
 8004fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fec:	4614      	mov	r4, r2
 8004fee:	2900      	cmp	r1, #0
 8004ff0:	461d      	mov	r5, r3
 8004ff2:	b096      	sub	sp, #88	; 0x58
 8004ff4:	da07      	bge.n	8005006 <__swhatbuf_r+0x22>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	602b      	str	r3, [r5, #0]
 8004ffa:	89b3      	ldrh	r3, [r6, #12]
 8004ffc:	061a      	lsls	r2, r3, #24
 8004ffe:	d410      	bmi.n	8005022 <__swhatbuf_r+0x3e>
 8005000:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005004:	e00e      	b.n	8005024 <__swhatbuf_r+0x40>
 8005006:	466a      	mov	r2, sp
 8005008:	f000 f954 	bl	80052b4 <_fstat_r>
 800500c:	2800      	cmp	r0, #0
 800500e:	dbf2      	blt.n	8004ff6 <__swhatbuf_r+0x12>
 8005010:	9a01      	ldr	r2, [sp, #4]
 8005012:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005016:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800501a:	425a      	negs	r2, r3
 800501c:	415a      	adcs	r2, r3
 800501e:	602a      	str	r2, [r5, #0]
 8005020:	e7ee      	b.n	8005000 <__swhatbuf_r+0x1c>
 8005022:	2340      	movs	r3, #64	; 0x40
 8005024:	2000      	movs	r0, #0
 8005026:	6023      	str	r3, [r4, #0]
 8005028:	b016      	add	sp, #88	; 0x58
 800502a:	bd70      	pop	{r4, r5, r6, pc}

0800502c <__smakebuf_r>:
 800502c:	898b      	ldrh	r3, [r1, #12]
 800502e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005030:	079d      	lsls	r5, r3, #30
 8005032:	4606      	mov	r6, r0
 8005034:	460c      	mov	r4, r1
 8005036:	d507      	bpl.n	8005048 <__smakebuf_r+0x1c>
 8005038:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800503c:	6023      	str	r3, [r4, #0]
 800503e:	6123      	str	r3, [r4, #16]
 8005040:	2301      	movs	r3, #1
 8005042:	6163      	str	r3, [r4, #20]
 8005044:	b002      	add	sp, #8
 8005046:	bd70      	pop	{r4, r5, r6, pc}
 8005048:	466a      	mov	r2, sp
 800504a:	ab01      	add	r3, sp, #4
 800504c:	f7ff ffca 	bl	8004fe4 <__swhatbuf_r>
 8005050:	9900      	ldr	r1, [sp, #0]
 8005052:	4605      	mov	r5, r0
 8005054:	4630      	mov	r0, r6
 8005056:	f7ff f88f 	bl	8004178 <_malloc_r>
 800505a:	b948      	cbnz	r0, 8005070 <__smakebuf_r+0x44>
 800505c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005060:	059a      	lsls	r2, r3, #22
 8005062:	d4ef      	bmi.n	8005044 <__smakebuf_r+0x18>
 8005064:	f023 0303 	bic.w	r3, r3, #3
 8005068:	f043 0302 	orr.w	r3, r3, #2
 800506c:	81a3      	strh	r3, [r4, #12]
 800506e:	e7e3      	b.n	8005038 <__smakebuf_r+0xc>
 8005070:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <__smakebuf_r+0x7c>)
 8005072:	62b3      	str	r3, [r6, #40]	; 0x28
 8005074:	89a3      	ldrh	r3, [r4, #12]
 8005076:	6020      	str	r0, [r4, #0]
 8005078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800507c:	81a3      	strh	r3, [r4, #12]
 800507e:	9b00      	ldr	r3, [sp, #0]
 8005080:	6120      	str	r0, [r4, #16]
 8005082:	6163      	str	r3, [r4, #20]
 8005084:	9b01      	ldr	r3, [sp, #4]
 8005086:	b15b      	cbz	r3, 80050a0 <__smakebuf_r+0x74>
 8005088:	4630      	mov	r0, r6
 800508a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800508e:	f000 f923 	bl	80052d8 <_isatty_r>
 8005092:	b128      	cbz	r0, 80050a0 <__smakebuf_r+0x74>
 8005094:	89a3      	ldrh	r3, [r4, #12]
 8005096:	f023 0303 	bic.w	r3, r3, #3
 800509a:	f043 0301 	orr.w	r3, r3, #1
 800509e:	81a3      	strh	r3, [r4, #12]
 80050a0:	89a0      	ldrh	r0, [r4, #12]
 80050a2:	4305      	orrs	r5, r0
 80050a4:	81a5      	strh	r5, [r4, #12]
 80050a6:	e7cd      	b.n	8005044 <__smakebuf_r+0x18>
 80050a8:	08004e3d 	.word	0x08004e3d

080050ac <memchr>:
 80050ac:	4603      	mov	r3, r0
 80050ae:	b510      	push	{r4, lr}
 80050b0:	b2c9      	uxtb	r1, r1
 80050b2:	4402      	add	r2, r0
 80050b4:	4293      	cmp	r3, r2
 80050b6:	4618      	mov	r0, r3
 80050b8:	d101      	bne.n	80050be <memchr+0x12>
 80050ba:	2000      	movs	r0, #0
 80050bc:	e003      	b.n	80050c6 <memchr+0x1a>
 80050be:	7804      	ldrb	r4, [r0, #0]
 80050c0:	3301      	adds	r3, #1
 80050c2:	428c      	cmp	r4, r1
 80050c4:	d1f6      	bne.n	80050b4 <memchr+0x8>
 80050c6:	bd10      	pop	{r4, pc}

080050c8 <memmove>:
 80050c8:	4288      	cmp	r0, r1
 80050ca:	b510      	push	{r4, lr}
 80050cc:	eb01 0402 	add.w	r4, r1, r2
 80050d0:	d902      	bls.n	80050d8 <memmove+0x10>
 80050d2:	4284      	cmp	r4, r0
 80050d4:	4623      	mov	r3, r4
 80050d6:	d807      	bhi.n	80050e8 <memmove+0x20>
 80050d8:	1e43      	subs	r3, r0, #1
 80050da:	42a1      	cmp	r1, r4
 80050dc:	d008      	beq.n	80050f0 <memmove+0x28>
 80050de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050e6:	e7f8      	b.n	80050da <memmove+0x12>
 80050e8:	4601      	mov	r1, r0
 80050ea:	4402      	add	r2, r0
 80050ec:	428a      	cmp	r2, r1
 80050ee:	d100      	bne.n	80050f2 <memmove+0x2a>
 80050f0:	bd10      	pop	{r4, pc}
 80050f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80050f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80050fa:	e7f7      	b.n	80050ec <memmove+0x24>

080050fc <__malloc_lock>:
 80050fc:	4801      	ldr	r0, [pc, #4]	; (8005104 <__malloc_lock+0x8>)
 80050fe:	f7ff bf6f 	b.w	8004fe0 <__retarget_lock_acquire_recursive>
 8005102:	bf00      	nop
 8005104:	20001628 	.word	0x20001628

08005108 <__malloc_unlock>:
 8005108:	4801      	ldr	r0, [pc, #4]	; (8005110 <__malloc_unlock+0x8>)
 800510a:	f7ff bf6a 	b.w	8004fe2 <__retarget_lock_release_recursive>
 800510e:	bf00      	nop
 8005110:	20001628 	.word	0x20001628

08005114 <_realloc_r>:
 8005114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005116:	4607      	mov	r7, r0
 8005118:	4614      	mov	r4, r2
 800511a:	460e      	mov	r6, r1
 800511c:	b921      	cbnz	r1, 8005128 <_realloc_r+0x14>
 800511e:	4611      	mov	r1, r2
 8005120:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005124:	f7ff b828 	b.w	8004178 <_malloc_r>
 8005128:	b922      	cbnz	r2, 8005134 <_realloc_r+0x20>
 800512a:	f7fe ffd9 	bl	80040e0 <_free_r>
 800512e:	4625      	mov	r5, r4
 8005130:	4628      	mov	r0, r5
 8005132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005134:	f000 f8f2 	bl	800531c <_malloc_usable_size_r>
 8005138:	42a0      	cmp	r0, r4
 800513a:	d20f      	bcs.n	800515c <_realloc_r+0x48>
 800513c:	4621      	mov	r1, r4
 800513e:	4638      	mov	r0, r7
 8005140:	f7ff f81a 	bl	8004178 <_malloc_r>
 8005144:	4605      	mov	r5, r0
 8005146:	2800      	cmp	r0, #0
 8005148:	d0f2      	beq.n	8005130 <_realloc_r+0x1c>
 800514a:	4631      	mov	r1, r6
 800514c:	4622      	mov	r2, r4
 800514e:	f7fe fe91 	bl	8003e74 <memcpy>
 8005152:	4631      	mov	r1, r6
 8005154:	4638      	mov	r0, r7
 8005156:	f7fe ffc3 	bl	80040e0 <_free_r>
 800515a:	e7e9      	b.n	8005130 <_realloc_r+0x1c>
 800515c:	4635      	mov	r5, r6
 800515e:	e7e7      	b.n	8005130 <_realloc_r+0x1c>

08005160 <_raise_r>:
 8005160:	291f      	cmp	r1, #31
 8005162:	b538      	push	{r3, r4, r5, lr}
 8005164:	4604      	mov	r4, r0
 8005166:	460d      	mov	r5, r1
 8005168:	d904      	bls.n	8005174 <_raise_r+0x14>
 800516a:	2316      	movs	r3, #22
 800516c:	6003      	str	r3, [r0, #0]
 800516e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005172:	bd38      	pop	{r3, r4, r5, pc}
 8005174:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005176:	b112      	cbz	r2, 800517e <_raise_r+0x1e>
 8005178:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800517c:	b94b      	cbnz	r3, 8005192 <_raise_r+0x32>
 800517e:	4620      	mov	r0, r4
 8005180:	f000 f830 	bl	80051e4 <_getpid_r>
 8005184:	462a      	mov	r2, r5
 8005186:	4601      	mov	r1, r0
 8005188:	4620      	mov	r0, r4
 800518a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800518e:	f000 b817 	b.w	80051c0 <_kill_r>
 8005192:	2b01      	cmp	r3, #1
 8005194:	d00a      	beq.n	80051ac <_raise_r+0x4c>
 8005196:	1c59      	adds	r1, r3, #1
 8005198:	d103      	bne.n	80051a2 <_raise_r+0x42>
 800519a:	2316      	movs	r3, #22
 800519c:	6003      	str	r3, [r0, #0]
 800519e:	2001      	movs	r0, #1
 80051a0:	e7e7      	b.n	8005172 <_raise_r+0x12>
 80051a2:	2400      	movs	r4, #0
 80051a4:	4628      	mov	r0, r5
 80051a6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80051aa:	4798      	blx	r3
 80051ac:	2000      	movs	r0, #0
 80051ae:	e7e0      	b.n	8005172 <_raise_r+0x12>

080051b0 <raise>:
 80051b0:	4b02      	ldr	r3, [pc, #8]	; (80051bc <raise+0xc>)
 80051b2:	4601      	mov	r1, r0
 80051b4:	6818      	ldr	r0, [r3, #0]
 80051b6:	f7ff bfd3 	b.w	8005160 <_raise_r>
 80051ba:	bf00      	nop
 80051bc:	200000ec 	.word	0x200000ec

080051c0 <_kill_r>:
 80051c0:	b538      	push	{r3, r4, r5, lr}
 80051c2:	2300      	movs	r3, #0
 80051c4:	4d06      	ldr	r5, [pc, #24]	; (80051e0 <_kill_r+0x20>)
 80051c6:	4604      	mov	r4, r0
 80051c8:	4608      	mov	r0, r1
 80051ca:	4611      	mov	r1, r2
 80051cc:	602b      	str	r3, [r5, #0]
 80051ce:	f7fb ffba 	bl	8001146 <_kill>
 80051d2:	1c43      	adds	r3, r0, #1
 80051d4:	d102      	bne.n	80051dc <_kill_r+0x1c>
 80051d6:	682b      	ldr	r3, [r5, #0]
 80051d8:	b103      	cbz	r3, 80051dc <_kill_r+0x1c>
 80051da:	6023      	str	r3, [r4, #0]
 80051dc:	bd38      	pop	{r3, r4, r5, pc}
 80051de:	bf00      	nop
 80051e0:	20001620 	.word	0x20001620

080051e4 <_getpid_r>:
 80051e4:	f7fb bfa8 	b.w	8001138 <_getpid>

080051e8 <__sread>:
 80051e8:	b510      	push	{r4, lr}
 80051ea:	460c      	mov	r4, r1
 80051ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f0:	f000 f89c 	bl	800532c <_read_r>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	bfab      	itete	ge
 80051f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051fa:	89a3      	ldrhlt	r3, [r4, #12]
 80051fc:	181b      	addge	r3, r3, r0
 80051fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005202:	bfac      	ite	ge
 8005204:	6563      	strge	r3, [r4, #84]	; 0x54
 8005206:	81a3      	strhlt	r3, [r4, #12]
 8005208:	bd10      	pop	{r4, pc}

0800520a <__swrite>:
 800520a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800520e:	461f      	mov	r7, r3
 8005210:	898b      	ldrh	r3, [r1, #12]
 8005212:	4605      	mov	r5, r0
 8005214:	05db      	lsls	r3, r3, #23
 8005216:	460c      	mov	r4, r1
 8005218:	4616      	mov	r6, r2
 800521a:	d505      	bpl.n	8005228 <__swrite+0x1e>
 800521c:	2302      	movs	r3, #2
 800521e:	2200      	movs	r2, #0
 8005220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005224:	f000 f868 	bl	80052f8 <_lseek_r>
 8005228:	89a3      	ldrh	r3, [r4, #12]
 800522a:	4632      	mov	r2, r6
 800522c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005230:	81a3      	strh	r3, [r4, #12]
 8005232:	4628      	mov	r0, r5
 8005234:	463b      	mov	r3, r7
 8005236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800523a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800523e:	f000 b817 	b.w	8005270 <_write_r>

08005242 <__sseek>:
 8005242:	b510      	push	{r4, lr}
 8005244:	460c      	mov	r4, r1
 8005246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800524a:	f000 f855 	bl	80052f8 <_lseek_r>
 800524e:	1c43      	adds	r3, r0, #1
 8005250:	89a3      	ldrh	r3, [r4, #12]
 8005252:	bf15      	itete	ne
 8005254:	6560      	strne	r0, [r4, #84]	; 0x54
 8005256:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800525a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800525e:	81a3      	strheq	r3, [r4, #12]
 8005260:	bf18      	it	ne
 8005262:	81a3      	strhne	r3, [r4, #12]
 8005264:	bd10      	pop	{r4, pc}

08005266 <__sclose>:
 8005266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800526a:	f000 b813 	b.w	8005294 <_close_r>
	...

08005270 <_write_r>:
 8005270:	b538      	push	{r3, r4, r5, lr}
 8005272:	4604      	mov	r4, r0
 8005274:	4608      	mov	r0, r1
 8005276:	4611      	mov	r1, r2
 8005278:	2200      	movs	r2, #0
 800527a:	4d05      	ldr	r5, [pc, #20]	; (8005290 <_write_r+0x20>)
 800527c:	602a      	str	r2, [r5, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	f7fb ff98 	bl	80011b4 <_write>
 8005284:	1c43      	adds	r3, r0, #1
 8005286:	d102      	bne.n	800528e <_write_r+0x1e>
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	b103      	cbz	r3, 800528e <_write_r+0x1e>
 800528c:	6023      	str	r3, [r4, #0]
 800528e:	bd38      	pop	{r3, r4, r5, pc}
 8005290:	20001620 	.word	0x20001620

08005294 <_close_r>:
 8005294:	b538      	push	{r3, r4, r5, lr}
 8005296:	2300      	movs	r3, #0
 8005298:	4d05      	ldr	r5, [pc, #20]	; (80052b0 <_close_r+0x1c>)
 800529a:	4604      	mov	r4, r0
 800529c:	4608      	mov	r0, r1
 800529e:	602b      	str	r3, [r5, #0]
 80052a0:	f7fb ffa4 	bl	80011ec <_close>
 80052a4:	1c43      	adds	r3, r0, #1
 80052a6:	d102      	bne.n	80052ae <_close_r+0x1a>
 80052a8:	682b      	ldr	r3, [r5, #0]
 80052aa:	b103      	cbz	r3, 80052ae <_close_r+0x1a>
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	bd38      	pop	{r3, r4, r5, pc}
 80052b0:	20001620 	.word	0x20001620

080052b4 <_fstat_r>:
 80052b4:	b538      	push	{r3, r4, r5, lr}
 80052b6:	2300      	movs	r3, #0
 80052b8:	4d06      	ldr	r5, [pc, #24]	; (80052d4 <_fstat_r+0x20>)
 80052ba:	4604      	mov	r4, r0
 80052bc:	4608      	mov	r0, r1
 80052be:	4611      	mov	r1, r2
 80052c0:	602b      	str	r3, [r5, #0]
 80052c2:	f7fb ff9e 	bl	8001202 <_fstat>
 80052c6:	1c43      	adds	r3, r0, #1
 80052c8:	d102      	bne.n	80052d0 <_fstat_r+0x1c>
 80052ca:	682b      	ldr	r3, [r5, #0]
 80052cc:	b103      	cbz	r3, 80052d0 <_fstat_r+0x1c>
 80052ce:	6023      	str	r3, [r4, #0]
 80052d0:	bd38      	pop	{r3, r4, r5, pc}
 80052d2:	bf00      	nop
 80052d4:	20001620 	.word	0x20001620

080052d8 <_isatty_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	2300      	movs	r3, #0
 80052dc:	4d05      	ldr	r5, [pc, #20]	; (80052f4 <_isatty_r+0x1c>)
 80052de:	4604      	mov	r4, r0
 80052e0:	4608      	mov	r0, r1
 80052e2:	602b      	str	r3, [r5, #0]
 80052e4:	f7fb ff9c 	bl	8001220 <_isatty>
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	d102      	bne.n	80052f2 <_isatty_r+0x1a>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	b103      	cbz	r3, 80052f2 <_isatty_r+0x1a>
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	20001620 	.word	0x20001620

080052f8 <_lseek_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4604      	mov	r4, r0
 80052fc:	4608      	mov	r0, r1
 80052fe:	4611      	mov	r1, r2
 8005300:	2200      	movs	r2, #0
 8005302:	4d05      	ldr	r5, [pc, #20]	; (8005318 <_lseek_r+0x20>)
 8005304:	602a      	str	r2, [r5, #0]
 8005306:	461a      	mov	r2, r3
 8005308:	f7fb ff94 	bl	8001234 <_lseek>
 800530c:	1c43      	adds	r3, r0, #1
 800530e:	d102      	bne.n	8005316 <_lseek_r+0x1e>
 8005310:	682b      	ldr	r3, [r5, #0]
 8005312:	b103      	cbz	r3, 8005316 <_lseek_r+0x1e>
 8005314:	6023      	str	r3, [r4, #0]
 8005316:	bd38      	pop	{r3, r4, r5, pc}
 8005318:	20001620 	.word	0x20001620

0800531c <_malloc_usable_size_r>:
 800531c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005320:	1f18      	subs	r0, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	bfbc      	itt	lt
 8005326:	580b      	ldrlt	r3, [r1, r0]
 8005328:	18c0      	addlt	r0, r0, r3
 800532a:	4770      	bx	lr

0800532c <_read_r>:
 800532c:	b538      	push	{r3, r4, r5, lr}
 800532e:	4604      	mov	r4, r0
 8005330:	4608      	mov	r0, r1
 8005332:	4611      	mov	r1, r2
 8005334:	2200      	movs	r2, #0
 8005336:	4d05      	ldr	r5, [pc, #20]	; (800534c <_read_r+0x20>)
 8005338:	602a      	str	r2, [r5, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	f7fb ff1d 	bl	800117a <_read>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d102      	bne.n	800534a <_read_r+0x1e>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	b103      	cbz	r3, 800534a <_read_r+0x1e>
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	20001620 	.word	0x20001620

08005350 <_gettimeofday>:
 8005350:	2258      	movs	r2, #88	; 0x58
 8005352:	4b02      	ldr	r3, [pc, #8]	; (800535c <_gettimeofday+0xc>)
 8005354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005358:	601a      	str	r2, [r3, #0]
 800535a:	4770      	bx	lr
 800535c:	20001620 	.word	0x20001620

08005360 <_init>:
 8005360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005362:	bf00      	nop
 8005364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005366:	bc08      	pop	{r3}
 8005368:	469e      	mov	lr, r3
 800536a:	4770      	bx	lr

0800536c <_fini>:
 800536c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800536e:	bf00      	nop
 8005370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005372:	bc08      	pop	{r3}
 8005374:	469e      	mov	lr, r3
 8005376:	4770      	bx	lr
